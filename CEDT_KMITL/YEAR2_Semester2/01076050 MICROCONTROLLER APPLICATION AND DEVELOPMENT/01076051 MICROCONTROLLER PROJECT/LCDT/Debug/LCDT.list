
LCDT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a290  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025f7c  0800a490  0800a490  0001a490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803040c  0803040c  000501ec  2**0
                  CONTENTS
  4 .ARM          00000008  0803040c  0803040c  0004040c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030414  08030414  000501ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08030414  08030414  00040414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08030418  08030418  00040418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0803041c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  200001ec  08030608  000501ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08030608  0005033c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000501ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fdb  00000000  00000000  0005021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f2  00000000  00000000  000641f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  000672e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  00068538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a173  00000000  00000000  000695e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017de0  00000000  00000000  00093753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbe3c  00000000  00000000  000ab533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a736f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f04  00000000  00000000  001a73c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ec 	.word	0x200001ec
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a478 	.word	0x0800a478

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f0 	.word	0x200001f0
 800023c:	0800a478 	.word	0x0800a478

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b08b      	sub	sp, #44	; 0x2c
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4604      	mov	r4, r0
 80009e4:	4608      	mov	r0, r1
 80009e6:	4611      	mov	r1, r2
 80009e8:	461a      	mov	r2, r3
 80009ea:	4623      	mov	r3, r4
 80009ec:	80fb      	strh	r3, [r7, #6]
 80009ee:	4603      	mov	r3, r0
 80009f0:	80bb      	strh	r3, [r7, #4]
 80009f2:	460b      	mov	r3, r1
 80009f4:	807b      	strh	r3, [r7, #2]
 80009f6:	4613      	mov	r3, r2
 80009f8:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80009fa:	887b      	ldrh	r3, [r7, #2]
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8000a02:	887b      	ldrh	r3, [r7, #2]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	f1c3 0301 	rsb	r3, r3, #1
 8000a0a:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8000a14:	e061      	b.n	8000ada <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8000a16:	88fa      	ldrh	r2, [r7, #6]
 8000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	e018      	b.n	8000a52 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	b298      	uxth	r0, r3
 8000a24:	6a3b      	ldr	r3, [r7, #32]
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	88bb      	ldrh	r3, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	883a      	ldrh	r2, [r7, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	f000 fe33 	bl	800169c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	b298      	uxth	r0, r3
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	88ba      	ldrh	r2, [r7, #4]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	883a      	ldrh	r2, [r7, #0]
 8000a46:	4619      	mov	r1, r3
 8000a48:	f000 fe28 	bl	800169c <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	88fa      	ldrh	r2, [r7, #6]
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	4413      	add	r3, r2
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	dde0      	ble.n	8000a20 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8000a5e:	88fa      	ldrh	r2, [r7, #6]
 8000a60:	6a3b      	ldr	r3, [r7, #32]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	e018      	b.n	8000a9a <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	b298      	uxth	r0, r3
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	88bb      	ldrh	r3, [r7, #4]
 8000a72:	4413      	add	r3, r2
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	883a      	ldrh	r2, [r7, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f000 fe0f 	bl	800169c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	b298      	uxth	r0, r3
 8000a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	88ba      	ldrh	r2, [r7, #4]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	883a      	ldrh	r2, [r7, #0]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f000 fe04 	bl	800169c <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	88fa      	ldrh	r2, [r7, #6]
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	dde0      	ble.n	8000a68 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8000aa6:	6a3b      	ldr	r3, [r7, #32]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005a      	lsls	r2, r3, #1
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	dd09      	ble.n	8000ada <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8000ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000adc:	6a3b      	ldr	r3, [r7, #32]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	da99      	bge.n	8000a16 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8000ae2:	bf00      	nop
 8000ae4:	bf00      	nop
 8000ae6:	372c      	adds	r7, #44	; 0x2c
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd90      	pop	{r4, r7, pc}

08000aec <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b089      	sub	sp, #36	; 0x24
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	4604      	mov	r4, r0
 8000af4:	4608      	mov	r0, r1
 8000af6:	4611      	mov	r1, r2
 8000af8:	461a      	mov	r2, r3
 8000afa:	4623      	mov	r3, r4
 8000afc:	80fb      	strh	r3, [r7, #6]
 8000afe:	4603      	mov	r3, r0
 8000b00:	80bb      	strh	r3, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	807b      	strh	r3, [r7, #2]
 8000b06:	4613      	mov	r3, r2
 8000b08:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8000b26:	887a      	ldrh	r2, [r7, #2]
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	da01      	bge.n	8000b38 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8000b34:	2301      	movs	r3, #1
 8000b36:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8000b3c:	883a      	ldrh	r2, [r7, #0]
 8000b3e:	88bb      	ldrh	r3, [r7, #4]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	da01      	bge.n	8000b4e <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8000b4e:	7cfb      	ldrb	r3, [r7, #19]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d106      	bne.n	8000b62 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8000b54:	887a      	ldrh	r2, [r7, #2]
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	823b      	strh	r3, [r7, #16]
 8000b60:	e005      	b.n	8000b6e <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8000b62:	88fa      	ldrh	r2, [r7, #6]
 8000b64:	887b      	ldrh	r3, [r7, #2]
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8000b6a:	887b      	ldrh	r3, [r7, #2]
 8000b6c:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8000b6e:	7cbb      	ldrb	r3, [r7, #18]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d106      	bne.n	8000b82 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8000b74:	883a      	ldrh	r2, [r7, #0]
 8000b76:	88bb      	ldrh	r3, [r7, #4]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8000b7c:	88bb      	ldrh	r3, [r7, #4]
 8000b7e:	81fb      	strh	r3, [r7, #14]
 8000b80:	e005      	b.n	8000b8e <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8000b82:	88ba      	ldrh	r2, [r7, #4]
 8000b84:	883b      	ldrh	r3, [r7, #0]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8000b8a:	883b      	ldrh	r3, [r7, #0]
 8000b8c:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8000b8e:	8abc      	ldrh	r4, [r7, #20]
 8000b90:	8afa      	ldrh	r2, [r7, #22]
 8000b92:	89f9      	ldrh	r1, [r7, #14]
 8000b94:	8a38      	ldrh	r0, [r7, #16]
 8000b96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	4623      	mov	r3, r4
 8000b9c:	f000 fe58 	bl	8001850 <ILI9341_Draw_Rectangle>
}
 8000ba0:	bf00      	nop
 8000ba2:	371c      	adds	r7, #28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd90      	pop	{r4, r7, pc}

08000ba8 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af02      	add	r7, sp, #8
 8000bae:	4604      	mov	r4, r0
 8000bb0:	4608      	mov	r0, r1
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4623      	mov	r3, r4
 8000bb8:	71fb      	strb	r3, [r7, #7]
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71bb      	strb	r3, [r7, #6]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	717b      	strb	r3, [r7, #5]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8000bca:	7dfb      	ldrb	r3, [r7, #23]
 8000bcc:	2b1f      	cmp	r3, #31
 8000bce:	d802      	bhi.n	8000bd6 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	e002      	b.n	8000bdc <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8000bd6:	7dfb      	ldrb	r3, [r7, #23]
 8000bd8:	3b20      	subs	r3, #32
 8000bda:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000bdc:	2300      	movs	r3, #0
 8000bde:	753b      	strb	r3, [r7, #20]
 8000be0:	e012      	b.n	8000c08 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8000be2:	7dfa      	ldrb	r2, [r7, #23]
 8000be4:	7d38      	ldrb	r0, [r7, #20]
 8000be6:	7d39      	ldrb	r1, [r7, #20]
 8000be8:	4c3b      	ldr	r4, [pc, #236]	; (8000cd8 <ILI9341_Draw_Char+0x130>)
 8000bea:	4613      	mov	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4413      	add	r3, r2
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	4423      	add	r3, r4
 8000bf4:	4403      	add	r3, r0
 8000bf6:	781a      	ldrb	r2, [r3, #0]
 8000bf8:	f101 0318 	add.w	r3, r1, #24
 8000bfc:	443b      	add	r3, r7
 8000bfe:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000c02:	7d3b      	ldrb	r3, [r7, #20]
 8000c04:	3301      	adds	r3, #1
 8000c06:	753b      	strb	r3, [r7, #20]
 8000c08:	7d3b      	ldrb	r3, [r7, #20]
 8000c0a:	2b05      	cmp	r3, #5
 8000c0c:	d9e9      	bls.n	8000be2 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000c0e:	79bb      	ldrb	r3, [r7, #6]
 8000c10:	b298      	uxth	r0, r3
 8000c12:	797b      	ldrb	r3, [r7, #5]
 8000c14:	b299      	uxth	r1, r3
 8000c16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c18:	461a      	mov	r2, r3
 8000c1a:	0052      	lsls	r2, r2, #1
 8000c1c:	4413      	add	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	b29c      	uxth	r4, r3
 8000c28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	4623      	mov	r3, r4
 8000c2e:	f000 fe0f 	bl	8001850 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000c32:	2300      	movs	r3, #0
 8000c34:	757b      	strb	r3, [r7, #21]
 8000c36:	e047      	b.n	8000cc8 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000c38:	2300      	movs	r3, #0
 8000c3a:	75bb      	strb	r3, [r7, #22]
 8000c3c:	e03e      	b.n	8000cbc <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8000c3e:	7d7b      	ldrb	r3, [r7, #21]
 8000c40:	3318      	adds	r3, #24
 8000c42:	443b      	add	r3, r7
 8000c44:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	7dbb      	ldrb	r3, [r7, #22]
 8000c4c:	fa42 f303 	asr.w	r3, r2, r3
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d02e      	beq.n	8000cb6 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8000c58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d110      	bne.n	8000c80 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000c5e:	79bb      	ldrb	r3, [r7, #6]
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	7d7b      	ldrb	r3, [r7, #21]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4413      	add	r3, r2
 8000c68:	b298      	uxth	r0, r3
 8000c6a:	797b      	ldrb	r3, [r7, #5]
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	7dbb      	ldrb	r3, [r7, #22]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	4413      	add	r3, r2
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	887a      	ldrh	r2, [r7, #2]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f000 fd0f 	bl	800169c <ILI9341_Draw_Pixel>
 8000c7e:	e01a      	b.n	8000cb6 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000c80:	79bb      	ldrb	r3, [r7, #6]
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	7d7b      	ldrb	r3, [r7, #21]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000c8a:	fb11 f303 	smulbb	r3, r1, r3
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4413      	add	r3, r2
 8000c92:	b298      	uxth	r0, r3
 8000c94:	797b      	ldrb	r3, [r7, #5]
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	7dbb      	ldrb	r3, [r7, #22]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000c9e:	fb11 f303 	smulbb	r3, r1, r3
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b299      	uxth	r1, r3
 8000ca8:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8000caa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	4623      	mov	r3, r4
 8000cb2:	f000 fdcd 	bl	8001850 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000cb6:	7dbb      	ldrb	r3, [r7, #22]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	75bb      	strb	r3, [r7, #22]
 8000cbc:	7dbb      	ldrb	r3, [r7, #22]
 8000cbe:	2b07      	cmp	r3, #7
 8000cc0:	d9bd      	bls.n	8000c3e <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000cc2:	7d7b      	ldrb	r3, [r7, #21]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	757b      	strb	r3, [r7, #21]
 8000cc8:	7d7b      	ldrb	r3, [r7, #21]
 8000cca:	2b05      	cmp	r3, #5
 8000ccc:	d9b4      	bls.n	8000c38 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
 8000cd2:	371c      	adds	r7, #28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	0800a514 	.word	0x0800a514

08000cdc <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af02      	add	r7, sp, #8
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4603      	mov	r3, r0
 8000cec:	70fb      	strb	r3, [r7, #3]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	70bb      	strb	r3, [r7, #2]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8000cf6:	e017      	b.n	8000d28 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	7818      	ldrb	r0, [r3, #0]
 8000d00:	883c      	ldrh	r4, [r7, #0]
 8000d02:	78ba      	ldrb	r2, [r7, #2]
 8000d04:	78f9      	ldrb	r1, [r7, #3]
 8000d06:	8bbb      	ldrh	r3, [r7, #28]
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	8b3b      	ldrh	r3, [r7, #24]
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	4623      	mov	r3, r4
 8000d10:	f7ff ff4a 	bl	8000ba8 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000d14:	8b3b      	ldrh	r3, [r7, #24]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	461a      	mov	r2, r3
 8000d1a:	0052      	lsls	r2, r2, #1
 8000d1c:	4413      	add	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	78fb      	ldrb	r3, [r7, #3]
 8000d24:	4413      	add	r3, r2
 8000d26:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1e3      	bne.n	8000cf8 <ILI9341_Draw_Text+0x1c>
    }
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd90      	pop	{r4, r7, pc}
	...

08000d3c <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000d48:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8000d4c:	6018      	str	r0, [r3, #0]
 8000d4e:	460a      	mov	r2, r1
 8000d50:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000d54:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8000d58:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 8000d5a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000d5e:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d15e      	bne.n	8000e26 <ILI9341_Draw_Image+0xea>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f000 fa67 	bl	800123c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8000d6e:	23f0      	movs	r3, #240	; 0xf0
 8000d70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d74:	2100      	movs	r1, #0
 8000d76:	2000      	movs	r0, #0
 8000d78:	f000 f9f6 	bl	8001168 <ILI9341_Set_Address>
			
		HAL_GPIO_WritePin(GPIOC, DC_Pin, GPIO_PIN_SET);	
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d82:	48c4      	ldr	r0, [pc, #784]	; (8001094 <ILI9341_Draw_Image+0x358>)
 8000d84:	f002 fab8 	bl	80032f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8e:	48c1      	ldr	r0, [pc, #772]	; (8001094 <ILI9341_Draw_Image+0x358>)
 8000d90:	f002 fab2 	bl	80032f8 <HAL_GPIO_WritePin>
		
		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8000da0:	e035      	b.n	8000e0e <ILI9341_Draw_Image+0xd2>
		{			
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000da8:	e019      	b.n	8000dde <ILI9341_Draw_Image+0xa2>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8000daa:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8000dae:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000db2:	4413      	add	r3, r2
 8000db4:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000db8:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	7819      	ldrb	r1, [r3, #0]
 8000dc2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000dc6:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8000dca:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000dce:	4413      	add	r3, r2
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8000dd4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000dd8:	3301      	adds	r3, #1
 8000dda:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000dde:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000de2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000de6:	d3e0      	bcc.n	8000daa <ILI9341_Draw_Image+0x6e>
				}						
				HAL_SPI_Transmit(&hspi5, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);	
 8000de8:	f107 010c 	add.w	r1, r7, #12
 8000dec:	230a      	movs	r3, #10
 8000dee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000df2:	48a9      	ldr	r0, [pc, #676]	; (8001098 <ILI9341_Draw_Image+0x35c>)
 8000df4:	f004 f9c5 	bl	8005182 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8000df8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000dfc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000e00:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000e04:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8000e08:	3301      	adds	r3, #1
 8000e0a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8000e0e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8000e12:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8000e16:	d9c4      	bls.n	8000da2 <ILI9341_Draw_Image+0x66>
		}
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1e:	489d      	ldr	r0, [pc, #628]	; (8001094 <ILI9341_Draw_Image+0x358>)
 8000e20:	f002 fa6a 	bl	80032f8 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi5, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);	
				counter += BURST_MAX_SIZE;			
		}
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_SET);
	}
}
 8000e24:	e130      	b.n	8001088 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 8000e26:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000e2a:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d15e      	bne.n	8000ef2 <ILI9341_Draw_Image+0x1b6>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 fa01 	bl	800123c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8000e3a:	23f0      	movs	r3, #240	; 0xf0
 8000e3c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e40:	2100      	movs	r1, #0
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 f990 	bl	8001168 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(GPIOC, DC_Pin, GPIO_PIN_SET);	
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e4e:	4891      	ldr	r0, [pc, #580]	; (8001094 <ILI9341_Draw_Image+0x358>)
 8000e50:	f002 fa52 	bl	80032f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5a:	488e      	ldr	r0, [pc, #568]	; (8001094 <ILI9341_Draw_Image+0x358>)
 8000e5c:	f002 fa4c 	bl	80032f8 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000e6c:	e035      	b.n	8000eda <ILI9341_Draw_Image+0x19e>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000e74:	e019      	b.n	8000eaa <ILI9341_Draw_Image+0x16e>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8000e76:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8000e7a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000e7e:	4413      	add	r3, r2
 8000e80:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000e84:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	7819      	ldrb	r1, [r3, #0]
 8000e8e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000e92:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8000e96:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000e9a:	4413      	add	r3, r2
 8000e9c:	460a      	mov	r2, r1
 8000e9e:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8000ea0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000eaa:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000eae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000eb2:	d3e0      	bcc.n	8000e76 <ILI9341_Draw_Image+0x13a>
				HAL_SPI_Transmit(&hspi5, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);	
 8000eb4:	f107 010c 	add.w	r1, r7, #12
 8000eb8:	230a      	movs	r3, #10
 8000eba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ebe:	4876      	ldr	r0, [pc, #472]	; (8001098 <ILI9341_Draw_Image+0x35c>)
 8000ec0:	f004 f95f 	bl	8005182 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8000ec4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000ec8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000ecc:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000ed0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000eda:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000ede:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8000ee2:	d9c4      	bls.n	8000e6e <ILI9341_Draw_Image+0x132>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eea:	486a      	ldr	r0, [pc, #424]	; (8001094 <ILI9341_Draw_Image+0x358>)
 8000eec:	f002 fa04 	bl	80032f8 <HAL_GPIO_WritePin>
}
 8000ef0:	e0ca      	b.n	8001088 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_2)
 8000ef2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000ef6:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d15e      	bne.n	8000fbe <ILI9341_Draw_Image+0x282>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 8000f00:	2002      	movs	r0, #2
 8000f02:	f000 f99b 	bl	800123c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8000f06:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f0a:	22f0      	movs	r2, #240	; 0xf0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 f92a 	bl	8001168 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(GPIOC, DC_Pin, GPIO_PIN_SET);	
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1a:	485e      	ldr	r0, [pc, #376]	; (8001094 <ILI9341_Draw_Image+0x358>)
 8000f1c:	f002 f9ec 	bl	80032f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	485b      	ldr	r0, [pc, #364]	; (8001094 <ILI9341_Draw_Image+0x358>)
 8000f28:	f002 f9e6 	bl	80032f8 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000f38:	e035      	b.n	8000fa6 <ILI9341_Draw_Image+0x26a>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000f40:	e019      	b.n	8000f76 <ILI9341_Draw_Image+0x23a>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8000f42:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000f46:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000f4a:	4413      	add	r3, r2
 8000f4c:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000f50:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8000f54:	6812      	ldr	r2, [r2, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	7819      	ldrb	r1, [r3, #0]
 8000f5a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000f5e:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8000f62:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000f66:	4413      	add	r3, r2
 8000f68:	460a      	mov	r2, r1
 8000f6a:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8000f6c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000f70:	3301      	adds	r3, #1
 8000f72:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000f76:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000f7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f7e:	d3e0      	bcc.n	8000f42 <ILI9341_Draw_Image+0x206>
				HAL_SPI_Transmit(&hspi5, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);	
 8000f80:	f107 010c 	add.w	r1, r7, #12
 8000f84:	230a      	movs	r3, #10
 8000f86:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f8a:	4843      	ldr	r0, [pc, #268]	; (8001098 <ILI9341_Draw_Image+0x35c>)
 8000f8c:	f004 f8f9 	bl	8005182 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8000f90:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000f94:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000f98:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000f9c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000fa6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000faa:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8000fae:	d9c4      	bls.n	8000f3a <ILI9341_Draw_Image+0x1fe>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb6:	4837      	ldr	r0, [pc, #220]	; (8001094 <ILI9341_Draw_Image+0x358>)
 8000fb8:	f002 f99e 	bl	80032f8 <HAL_GPIO_WritePin>
}
 8000fbc:	e064      	b.n	8001088 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_1)
 8000fbe:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000fc2:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d15d      	bne.n	8001088 <ILI9341_Draw_Image+0x34c>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f000 f935 	bl	800123c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8000fd2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fd6:	22f0      	movs	r2, #240	; 0xf0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f000 f8c4 	bl	8001168 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(GPIOC, DC_Pin, GPIO_PIN_SET);	
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe6:	482b      	ldr	r0, [pc, #172]	; (8001094 <ILI9341_Draw_Image+0x358>)
 8000fe8:	f002 f986 	bl	80032f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff2:	4828      	ldr	r0, [pc, #160]	; (8001094 <ILI9341_Draw_Image+0x358>)
 8000ff4:	f002 f980 	bl	80032f8 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001004:	e035      	b.n	8001072 <ILI9341_Draw_Image+0x336>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001006:	2300      	movs	r3, #0
 8001008:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 800100c:	e019      	b.n	8001042 <ILI9341_Draw_Image+0x306>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 800100e:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8001012:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001016:	4413      	add	r3, r2
 8001018:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800101c:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	4413      	add	r3, r2
 8001024:	7819      	ldrb	r1, [r3, #0]
 8001026:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800102a:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 800102e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001032:	4413      	add	r3, r2
 8001034:	460a      	mov	r2, r1
 8001036:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001038:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800103c:	3301      	adds	r3, #1
 800103e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001042:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001046:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800104a:	d3e0      	bcc.n	800100e <ILI9341_Draw_Image+0x2d2>
				HAL_SPI_Transmit(&hspi5, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);	
 800104c:	f107 010c 	add.w	r1, r7, #12
 8001050:	230a      	movs	r3, #10
 8001052:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001056:	4810      	ldr	r0, [pc, #64]	; (8001098 <ILI9341_Draw_Image+0x35c>)
 8001058:	f004 f893 	bl	8005182 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 800105c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001060:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001064:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001068:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800106c:	3301      	adds	r3, #1
 800106e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001072:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001076:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800107a:	d9c4      	bls.n	8001006 <ILI9341_Draw_Image+0x2ca>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001082:	4804      	ldr	r0, [pc, #16]	; (8001094 <ILI9341_Draw_Image+0x358>)
 8001084:	f002 f938 	bl	80032f8 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40020800 	.word	0x40020800
 8001098:	20000274 	.word	0x20000274

0800109c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 80010a0:	f001 fbaa 	bl	80027f8 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 80010a4:	f000 fd66 	bl	8001b74 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ae:	4802      	ldr	r0, [pc, #8]	; (80010b8 <ILI9341_SPI_Init+0x1c>)
 80010b0:	f002 f922 	bl	80032f8 <HAL_GPIO_WritePin>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40020800 	.word	0x40020800

080010bc <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80010c6:	1df9      	adds	r1, r7, #7
 80010c8:	2301      	movs	r3, #1
 80010ca:	2201      	movs	r2, #1
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <ILI9341_SPI_Send+0x20>)
 80010ce:	f004 f858 	bl	8005182 <HAL_SPI_Transmit>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000274 	.word	0x20000274

080010e0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f0:	480b      	ldr	r0, [pc, #44]	; (8001120 <ILI9341_Write_Command+0x40>)
 80010f2:	f002 f901 	bl	80032f8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010fc:	4808      	ldr	r0, [pc, #32]	; (8001120 <ILI9341_Write_Command+0x40>)
 80010fe:	f002 f8fb 	bl	80032f8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ffd9 	bl	80010bc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001110:	4803      	ldr	r0, [pc, #12]	; (8001120 <ILI9341_Write_Command+0x40>)
 8001112:	f002 f8f1 	bl	80032f8 <HAL_GPIO_WritePin>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40020800 	.word	0x40020800

08001124 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001134:	480b      	ldr	r0, [pc, #44]	; (8001164 <ILI9341_Write_Data+0x40>)
 8001136:	f002 f8df 	bl	80032f8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001140:	4808      	ldr	r0, [pc, #32]	; (8001164 <ILI9341_Write_Data+0x40>)
 8001142:	f002 f8d9 	bl	80032f8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ffb7 	bl	80010bc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <ILI9341_Write_Data+0x40>)
 8001156:	f002 f8cf 	bl	80032f8 <HAL_GPIO_WritePin>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40020800 	.word	0x40020800

08001168 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4604      	mov	r4, r0
 8001170:	4608      	mov	r0, r1
 8001172:	4611      	mov	r1, r2
 8001174:	461a      	mov	r2, r3
 8001176:	4623      	mov	r3, r4
 8001178:	80fb      	strh	r3, [r7, #6]
 800117a:	4603      	mov	r3, r0
 800117c:	80bb      	strh	r3, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	807b      	strh	r3, [r7, #2]
 8001182:	4613      	mov	r3, r2
 8001184:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8001186:	202a      	movs	r0, #42	; 0x2a
 8001188:	f7ff ffaa 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	b29b      	uxth	r3, r3
 8001192:	b2db      	uxtb	r3, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ffc5 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ffc0 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80011a4:	887b      	ldrh	r3, [r7, #2]
 80011a6:	0a1b      	lsrs	r3, r3, #8
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ffb9 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ffb4 	bl	8001124 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80011bc:	202b      	movs	r0, #43	; 0x2b
 80011be:	f7ff ff8f 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80011c2:	88bb      	ldrh	r3, [r7, #4]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ffaa 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80011d0:	88bb      	ldrh	r3, [r7, #4]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ffa5 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80011da:	883b      	ldrh	r3, [r7, #0]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	b29b      	uxth	r3, r3
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff9e 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80011e8:	883b      	ldrh	r3, [r7, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff99 	bl	8001124 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80011f2:	202c      	movs	r0, #44	; 0x2c
 80011f4:	f7ff ff74 	bl	80010e0 <ILI9341_Write_Command>
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd90      	pop	{r4, r7, pc}

08001200 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800120a:	480b      	ldr	r0, [pc, #44]	; (8001238 <ILI9341_Reset+0x38>)
 800120c:	f002 f874 	bl	80032f8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001210:	20c8      	movs	r0, #200	; 0xc8
 8001212:	f001 fda3 	bl	8002d5c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121c:	4806      	ldr	r0, [pc, #24]	; (8001238 <ILI9341_Reset+0x38>)
 800121e:	f002 f86b 	bl	80032f8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001222:	20c8      	movs	r0, #200	; 0xc8
 8001224:	f001 fd9a 	bl	8002d5c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8001228:	2201      	movs	r2, #1
 800122a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800122e:	4802      	ldr	r0, [pc, #8]	; (8001238 <ILI9341_Reset+0x38>)
 8001230:	f002 f862 	bl	80032f8 <HAL_GPIO_WritePin>
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40020800 	.word	0x40020800

0800123c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 800124a:	2036      	movs	r0, #54	; 0x36
 800124c:	f7ff ff48 	bl	80010e0 <ILI9341_Write_Command>
HAL_Delay(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f001 fd83 	bl	8002d5c <HAL_Delay>
	
switch(screen_rotation) 
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d837      	bhi.n	80012cc <ILI9341_Set_Rotation+0x90>
 800125c:	a201      	add	r2, pc, #4	; (adr r2, 8001264 <ILI9341_Set_Rotation+0x28>)
 800125e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001262:	bf00      	nop
 8001264:	08001275 	.word	0x08001275
 8001268:	0800128b 	.word	0x0800128b
 800126c:	080012a1 	.word	0x080012a1
 8001270:	080012b7 	.word	0x080012b7
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001274:	2048      	movs	r0, #72	; 0x48
 8001276:	f7ff ff55 	bl	8001124 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <ILI9341_Set_Rotation+0x9c>)
 800127c:	22f0      	movs	r2, #240	; 0xf0
 800127e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <ILI9341_Set_Rotation+0xa0>)
 8001282:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001286:	801a      	strh	r2, [r3, #0]
			break;
 8001288:	e021      	b.n	80012ce <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800128a:	2028      	movs	r0, #40	; 0x28
 800128c:	f7ff ff4a 	bl	8001124 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <ILI9341_Set_Rotation+0x9c>)
 8001292:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001296:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001298:	4b10      	ldr	r3, [pc, #64]	; (80012dc <ILI9341_Set_Rotation+0xa0>)
 800129a:	22f0      	movs	r2, #240	; 0xf0
 800129c:	801a      	strh	r2, [r3, #0]
			break;
 800129e:	e016      	b.n	80012ce <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80012a0:	2088      	movs	r0, #136	; 0x88
 80012a2:	f7ff ff3f 	bl	8001124 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <ILI9341_Set_Rotation+0x9c>)
 80012a8:	22f0      	movs	r2, #240	; 0xf0
 80012aa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <ILI9341_Set_Rotation+0xa0>)
 80012ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012b2:	801a      	strh	r2, [r3, #0]
			break;
 80012b4:	e00b      	b.n	80012ce <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80012b6:	20e8      	movs	r0, #232	; 0xe8
 80012b8:	f7ff ff34 	bl	8001124 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <ILI9341_Set_Rotation+0x9c>)
 80012be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012c2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <ILI9341_Set_Rotation+0xa0>)
 80012c6:	22f0      	movs	r2, #240	; 0xf0
 80012c8:	801a      	strh	r2, [r3, #0]
			break;
 80012ca:	e000      	b.n	80012ce <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80012cc:	bf00      	nop
	}
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000002 	.word	0x20000002
 80012dc:	20000000 	.word	0x20000000

080012e0 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ea:	4802      	ldr	r0, [pc, #8]	; (80012f4 <ILI9341_Enable+0x14>)
 80012ec:	f002 f804 	bl	80032f8 <HAL_GPIO_WritePin>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40020800 	.word	0x40020800

080012f8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80012fc:	f7ff fff0 	bl	80012e0 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001300:	f7ff fecc 	bl	800109c <ILI9341_SPI_Init>
ILI9341_Reset();
 8001304:	f7ff ff7c 	bl	8001200 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001308:	2001      	movs	r0, #1
 800130a:	f7ff fee9 	bl	80010e0 <ILI9341_Write_Command>
HAL_Delay(1000);
 800130e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001312:	f001 fd23 	bl	8002d5c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001316:	20cb      	movs	r0, #203	; 0xcb
 8001318:	f7ff fee2 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 800131c:	2039      	movs	r0, #57	; 0x39
 800131e:	f7ff ff01 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8001322:	202c      	movs	r0, #44	; 0x2c
 8001324:	f7ff fefe 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff fefb 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 800132e:	2034      	movs	r0, #52	; 0x34
 8001330:	f7ff fef8 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001334:	2002      	movs	r0, #2
 8001336:	f7ff fef5 	bl	8001124 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800133a:	20cf      	movs	r0, #207	; 0xcf
 800133c:	f7ff fed0 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff feef 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001346:	20c1      	movs	r0, #193	; 0xc1
 8001348:	f7ff feec 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 800134c:	2030      	movs	r0, #48	; 0x30
 800134e:	f7ff fee9 	bl	8001124 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8001352:	20e8      	movs	r0, #232	; 0xe8
 8001354:	f7ff fec4 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001358:	2085      	movs	r0, #133	; 0x85
 800135a:	f7ff fee3 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800135e:	2000      	movs	r0, #0
 8001360:	f7ff fee0 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001364:	2078      	movs	r0, #120	; 0x78
 8001366:	f7ff fedd 	bl	8001124 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800136a:	20ea      	movs	r0, #234	; 0xea
 800136c:	f7ff feb8 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff fed7 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001376:	2000      	movs	r0, #0
 8001378:	f7ff fed4 	bl	8001124 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800137c:	20ed      	movs	r0, #237	; 0xed
 800137e:	f7ff feaf 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001382:	2064      	movs	r0, #100	; 0x64
 8001384:	f7ff fece 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001388:	2003      	movs	r0, #3
 800138a:	f7ff fecb 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800138e:	2012      	movs	r0, #18
 8001390:	f7ff fec8 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001394:	2081      	movs	r0, #129	; 0x81
 8001396:	f7ff fec5 	bl	8001124 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800139a:	20f7      	movs	r0, #247	; 0xf7
 800139c:	f7ff fea0 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80013a0:	2020      	movs	r0, #32
 80013a2:	f7ff febf 	bl	8001124 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80013a6:	20c0      	movs	r0, #192	; 0xc0
 80013a8:	f7ff fe9a 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80013ac:	2023      	movs	r0, #35	; 0x23
 80013ae:	f7ff feb9 	bl	8001124 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80013b2:	20c1      	movs	r0, #193	; 0xc1
 80013b4:	f7ff fe94 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80013b8:	2010      	movs	r0, #16
 80013ba:	f7ff feb3 	bl	8001124 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80013be:	20c5      	movs	r0, #197	; 0xc5
 80013c0:	f7ff fe8e 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80013c4:	203e      	movs	r0, #62	; 0x3e
 80013c6:	f7ff fead 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80013ca:	2028      	movs	r0, #40	; 0x28
 80013cc:	f7ff feaa 	bl	8001124 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80013d0:	20c7      	movs	r0, #199	; 0xc7
 80013d2:	f7ff fe85 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80013d6:	2086      	movs	r0, #134	; 0x86
 80013d8:	f7ff fea4 	bl	8001124 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80013dc:	2036      	movs	r0, #54	; 0x36
 80013de:	f7ff fe7f 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80013e2:	2048      	movs	r0, #72	; 0x48
 80013e4:	f7ff fe9e 	bl	8001124 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80013e8:	203a      	movs	r0, #58	; 0x3a
 80013ea:	f7ff fe79 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80013ee:	2055      	movs	r0, #85	; 0x55
 80013f0:	f7ff fe98 	bl	8001124 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80013f4:	20b1      	movs	r0, #177	; 0xb1
 80013f6:	f7ff fe73 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff fe92 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001400:	2018      	movs	r0, #24
 8001402:	f7ff fe8f 	bl	8001124 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001406:	20b6      	movs	r0, #182	; 0xb6
 8001408:	f7ff fe6a 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 800140c:	2008      	movs	r0, #8
 800140e:	f7ff fe89 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001412:	2082      	movs	r0, #130	; 0x82
 8001414:	f7ff fe86 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001418:	2027      	movs	r0, #39	; 0x27
 800141a:	f7ff fe83 	bl	8001124 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800141e:	20f2      	movs	r0, #242	; 0xf2
 8001420:	f7ff fe5e 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001424:	2000      	movs	r0, #0
 8001426:	f7ff fe7d 	bl	8001124 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800142a:	2026      	movs	r0, #38	; 0x26
 800142c:	f7ff fe58 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001430:	2001      	movs	r0, #1
 8001432:	f7ff fe77 	bl	8001124 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001436:	20e0      	movs	r0, #224	; 0xe0
 8001438:	f7ff fe52 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 800143c:	200f      	movs	r0, #15
 800143e:	f7ff fe71 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001442:	2031      	movs	r0, #49	; 0x31
 8001444:	f7ff fe6e 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001448:	202b      	movs	r0, #43	; 0x2b
 800144a:	f7ff fe6b 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800144e:	200c      	movs	r0, #12
 8001450:	f7ff fe68 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001454:	200e      	movs	r0, #14
 8001456:	f7ff fe65 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800145a:	2008      	movs	r0, #8
 800145c:	f7ff fe62 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001460:	204e      	movs	r0, #78	; 0x4e
 8001462:	f7ff fe5f 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001466:	20f1      	movs	r0, #241	; 0xf1
 8001468:	f7ff fe5c 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 800146c:	2037      	movs	r0, #55	; 0x37
 800146e:	f7ff fe59 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001472:	2007      	movs	r0, #7
 8001474:	f7ff fe56 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001478:	2010      	movs	r0, #16
 800147a:	f7ff fe53 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800147e:	2003      	movs	r0, #3
 8001480:	f7ff fe50 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001484:	200e      	movs	r0, #14
 8001486:	f7ff fe4d 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800148a:	2009      	movs	r0, #9
 800148c:	f7ff fe4a 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff fe47 	bl	8001124 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001496:	20e1      	movs	r0, #225	; 0xe1
 8001498:	f7ff fe22 	bl	80010e0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800149c:	2000      	movs	r0, #0
 800149e:	f7ff fe41 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80014a2:	200e      	movs	r0, #14
 80014a4:	f7ff fe3e 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80014a8:	2014      	movs	r0, #20
 80014aa:	f7ff fe3b 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80014ae:	2003      	movs	r0, #3
 80014b0:	f7ff fe38 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80014b4:	2011      	movs	r0, #17
 80014b6:	f7ff fe35 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80014ba:	2007      	movs	r0, #7
 80014bc:	f7ff fe32 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80014c0:	2031      	movs	r0, #49	; 0x31
 80014c2:	f7ff fe2f 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80014c6:	20c1      	movs	r0, #193	; 0xc1
 80014c8:	f7ff fe2c 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80014cc:	2048      	movs	r0, #72	; 0x48
 80014ce:	f7ff fe29 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80014d2:	2008      	movs	r0, #8
 80014d4:	f7ff fe26 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80014d8:	200f      	movs	r0, #15
 80014da:	f7ff fe23 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80014de:	200c      	movs	r0, #12
 80014e0:	f7ff fe20 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80014e4:	2031      	movs	r0, #49	; 0x31
 80014e6:	f7ff fe1d 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80014ea:	2036      	movs	r0, #54	; 0x36
 80014ec:	f7ff fe1a 	bl	8001124 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80014f0:	200f      	movs	r0, #15
 80014f2:	f7ff fe17 	bl	8001124 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80014f6:	2011      	movs	r0, #17
 80014f8:	f7ff fdf2 	bl	80010e0 <ILI9341_Write_Command>
HAL_Delay(120);
 80014fc:	2078      	movs	r0, #120	; 0x78
 80014fe:	f001 fc2d 	bl	8002d5c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001502:	2029      	movs	r0, #41	; 0x29
 8001504:	f7ff fdec 	bl	80010e0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001508:	2000      	movs	r0, #0
 800150a:	f7ff fe97 	bl	800123c <ILI9341_Set_Rotation>
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001518:	b08d      	sub	sp, #52	; 0x34
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	6039      	str	r1, [r7, #0]
 8001520:	80fb      	strh	r3, [r7, #6]
 8001522:	466b      	mov	r3, sp
 8001524:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001532:	d202      	bcs.n	800153a <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
 8001538:	e002      	b.n	8001540 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 800153a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001540:	2201      	movs	r2, #1
 8001542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001546:	4840      	ldr	r0, [pc, #256]	; (8001648 <ILI9341_Draw_Colour_Burst+0x134>)
 8001548:	f001 fed6 	bl	80032f8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001552:	483d      	ldr	r0, [pc, #244]	; (8001648 <ILI9341_Draw_Colour_Burst+0x134>)
 8001554:	f001 fed0 	bl	80032f8 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	0a1b      	lsrs	r3, r3, #8
 800155c:	b29b      	uxth	r3, r3
 800155e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8001562:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001564:	460b      	mov	r3, r1
 8001566:	3b01      	subs	r3, #1
 8001568:	61fb      	str	r3, [r7, #28]
 800156a:	2300      	movs	r3, #0
 800156c:	4688      	mov	r8, r1
 800156e:	4699      	mov	r9, r3
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800157c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001580:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001584:	2300      	movs	r3, #0
 8001586:	460c      	mov	r4, r1
 8001588:	461d      	mov	r5, r3
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	00eb      	lsls	r3, r5, #3
 8001594:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001598:	00e2      	lsls	r2, r4, #3
 800159a:	1dcb      	adds	r3, r1, #7
 800159c:	08db      	lsrs	r3, r3, #3
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	ebad 0d03 	sub.w	sp, sp, r3
 80015a4:	466b      	mov	r3, sp
 80015a6:	3300      	adds	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ae:	e00e      	b.n	80015ce <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b4:	4413      	add	r3, r2
 80015b6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015ba:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80015bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015be:	3301      	adds	r3, #1
 80015c0:	88fa      	ldrh	r2, [r7, #6]
 80015c2:	b2d1      	uxtb	r1, r2
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80015c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ca:	3302      	adds	r3, #2
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d3ec      	bcc.n	80015b0 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e4:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80015ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015f0:	fb01 f202 	mul.w	r2, r1, r2
 80015f4:	1a9b      	subs	r3, r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d010      	beq.n	8001620 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80015fe:	2300      	movs	r3, #0
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001602:	e009      	b.n	8001618 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	b29a      	uxth	r2, r3
 8001608:	230a      	movs	r3, #10
 800160a:	69b9      	ldr	r1, [r7, #24]
 800160c:	480f      	ldr	r0, [pc, #60]	; (800164c <ILI9341_Draw_Colour_Burst+0x138>)
 800160e:	f003 fdb8 	bl	8005182 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001614:	3301      	adds	r3, #1
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	429a      	cmp	r2, r3
 800161e:	d3f1      	bcc.n	8001604 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	b29a      	uxth	r2, r3
 8001624:	230a      	movs	r3, #10
 8001626:	69b9      	ldr	r1, [r7, #24]
 8001628:	4808      	ldr	r0, [pc, #32]	; (800164c <ILI9341_Draw_Colour_Burst+0x138>)
 800162a:	f003 fdaa 	bl	8005182 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800162e:	2201      	movs	r2, #1
 8001630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <ILI9341_Draw_Colour_Burst+0x134>)
 8001636:	f001 fe5f 	bl	80032f8 <HAL_GPIO_WritePin>
 800163a:	46b5      	mov	sp, r6
}
 800163c:	bf00      	nop
 800163e:	3734      	adds	r7, #52	; 0x34
 8001640:	46bd      	mov	sp, r7
 8001642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001646:	bf00      	nop
 8001648:	40020800 	.word	0x40020800
 800164c:	20000274 	.word	0x20000274

08001650 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <ILI9341_Fill_Screen+0x44>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <ILI9341_Fill_Screen+0x48>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	b29b      	uxth	r3, r3
 8001666:	2100      	movs	r1, #0
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff fd7d 	bl	8001168 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <ILI9341_Fill_Screen+0x44>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	b29b      	uxth	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <ILI9341_Fill_Screen+0x48>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	b29b      	uxth	r3, r3
 800167c:	fb02 f303 	mul.w	r3, r2, r3
 8001680:	461a      	mov	r2, r3
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff44 	bl	8001514 <ILI9341_Draw_Colour_Burst>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000002 	.word	0x20000002
 8001698:	20000000 	.word	0x20000000

0800169c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	80fb      	strh	r3, [r7, #6]
 80016a6:	460b      	mov	r3, r1
 80016a8:	80bb      	strh	r3, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80016ae:	4b64      	ldr	r3, [pc, #400]	; (8001840 <ILI9341_Draw_Pixel+0x1a4>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	88fa      	ldrh	r2, [r7, #6]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	f080 80be 	bcs.w	8001838 <ILI9341_Draw_Pixel+0x19c>
 80016bc:	4b61      	ldr	r3, [pc, #388]	; (8001844 <ILI9341_Draw_Pixel+0x1a8>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	88ba      	ldrh	r2, [r7, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f080 80b7 	bcs.w	8001838 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d0:	485d      	ldr	r0, [pc, #372]	; (8001848 <ILI9341_Draw_Pixel+0x1ac>)
 80016d2:	f001 fe11 	bl	80032f8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016dc:	485a      	ldr	r0, [pc, #360]	; (8001848 <ILI9341_Draw_Pixel+0x1ac>)
 80016de:	f001 fe0b 	bl	80032f8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80016e2:	202a      	movs	r0, #42	; 0x2a
 80016e4:	f7ff fcea 	bl	80010bc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ee:	4856      	ldr	r0, [pc, #344]	; (8001848 <ILI9341_Draw_Pixel+0x1ac>)
 80016f0:	f001 fe02 	bl	80032f8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80016f4:	2201      	movs	r2, #1
 80016f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016fa:	4853      	ldr	r0, [pc, #332]	; (8001848 <ILI9341_Draw_Pixel+0x1ac>)
 80016fc:	f001 fdfc 	bl	80032f8 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001706:	4850      	ldr	r0, [pc, #320]	; (8001848 <ILI9341_Draw_Pixel+0x1ac>)
 8001708:	f001 fdf6 	bl	80032f8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	0a1b      	lsrs	r3, r3, #8
 8001710:	b29b      	uxth	r3, r3
 8001712:	b2db      	uxtb	r3, r3
 8001714:	753b      	strb	r3, [r7, #20]
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	757b      	strb	r3, [r7, #21]
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	3301      	adds	r3, #1
 8001720:	121b      	asrs	r3, r3, #8
 8001722:	b2db      	uxtb	r3, r3
 8001724:	75bb      	strb	r3, [r7, #22]
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	3301      	adds	r3, #1
 800172c:	b2db      	uxtb	r3, r3
 800172e:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001730:	f107 0114 	add.w	r1, r7, #20
 8001734:	2301      	movs	r3, #1
 8001736:	2204      	movs	r2, #4
 8001738:	4844      	ldr	r0, [pc, #272]	; (800184c <ILI9341_Draw_Pixel+0x1b0>)
 800173a:	f003 fd22 	bl	8005182 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800173e:	2201      	movs	r2, #1
 8001740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001744:	4840      	ldr	r0, [pc, #256]	; (8001848 <ILI9341_Draw_Pixel+0x1ac>)
 8001746:	f001 fdd7 	bl	80032f8 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800174a:	2200      	movs	r2, #0
 800174c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001750:	483d      	ldr	r0, [pc, #244]	; (8001848 <ILI9341_Draw_Pixel+0x1ac>)
 8001752:	f001 fdd1 	bl	80032f8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001756:	2200      	movs	r2, #0
 8001758:	f44f 7180 	mov.w	r1, #256	; 0x100
 800175c:	483a      	ldr	r0, [pc, #232]	; (8001848 <ILI9341_Draw_Pixel+0x1ac>)
 800175e:	f001 fdcb 	bl	80032f8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8001762:	202b      	movs	r0, #43	; 0x2b
 8001764:	f7ff fcaa 	bl	80010bc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001768:	2201      	movs	r2, #1
 800176a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800176e:	4836      	ldr	r0, [pc, #216]	; (8001848 <ILI9341_Draw_Pixel+0x1ac>)
 8001770:	f001 fdc2 	bl	80032f8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001774:	2201      	movs	r2, #1
 8001776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800177a:	4833      	ldr	r0, [pc, #204]	; (8001848 <ILI9341_Draw_Pixel+0x1ac>)
 800177c:	f001 fdbc 	bl	80032f8 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001786:	4830      	ldr	r0, [pc, #192]	; (8001848 <ILI9341_Draw_Pixel+0x1ac>)
 8001788:	f001 fdb6 	bl	80032f8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800178c:	88bb      	ldrh	r3, [r7, #4]
 800178e:	0a1b      	lsrs	r3, r3, #8
 8001790:	b29b      	uxth	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	743b      	strb	r3, [r7, #16]
 8001796:	88bb      	ldrh	r3, [r7, #4]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	747b      	strb	r3, [r7, #17]
 800179c:	88bb      	ldrh	r3, [r7, #4]
 800179e:	3301      	adds	r3, #1
 80017a0:	121b      	asrs	r3, r3, #8
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	74bb      	strb	r3, [r7, #18]
 80017a6:	88bb      	ldrh	r3, [r7, #4]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	3301      	adds	r3, #1
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80017b0:	f107 0110 	add.w	r1, r7, #16
 80017b4:	2301      	movs	r3, #1
 80017b6:	2204      	movs	r2, #4
 80017b8:	4824      	ldr	r0, [pc, #144]	; (800184c <ILI9341_Draw_Pixel+0x1b0>)
 80017ba:	f003 fce2 	bl	8005182 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80017be:	2201      	movs	r2, #1
 80017c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c4:	4820      	ldr	r0, [pc, #128]	; (8001848 <ILI9341_Draw_Pixel+0x1ac>)
 80017c6:	f001 fd97 	bl	80032f8 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80017ca:	2200      	movs	r2, #0
 80017cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d0:	481d      	ldr	r0, [pc, #116]	; (8001848 <ILI9341_Draw_Pixel+0x1ac>)
 80017d2:	f001 fd91 	bl	80032f8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80017d6:	2200      	movs	r2, #0
 80017d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017dc:	481a      	ldr	r0, [pc, #104]	; (8001848 <ILI9341_Draw_Pixel+0x1ac>)
 80017de:	f001 fd8b 	bl	80032f8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80017e2:	202c      	movs	r0, #44	; 0x2c
 80017e4:	f7ff fc6a 	bl	80010bc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80017e8:	2201      	movs	r2, #1
 80017ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ee:	4816      	ldr	r0, [pc, #88]	; (8001848 <ILI9341_Draw_Pixel+0x1ac>)
 80017f0:	f001 fd82 	bl	80032f8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fa:	4813      	ldr	r0, [pc, #76]	; (8001848 <ILI9341_Draw_Pixel+0x1ac>)
 80017fc:	f001 fd7c 	bl	80032f8 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001806:	4810      	ldr	r0, [pc, #64]	; (8001848 <ILI9341_Draw_Pixel+0x1ac>)
 8001808:	f001 fd76 	bl	80032f8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 800180c:	887b      	ldrh	r3, [r7, #2]
 800180e:	0a1b      	lsrs	r3, r3, #8
 8001810:	b29b      	uxth	r3, r3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	733b      	strb	r3, [r7, #12]
 8001816:	887b      	ldrh	r3, [r7, #2]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 800181c:	f107 010c 	add.w	r1, r7, #12
 8001820:	2301      	movs	r3, #1
 8001822:	2202      	movs	r2, #2
 8001824:	4809      	ldr	r0, [pc, #36]	; (800184c <ILI9341_Draw_Pixel+0x1b0>)
 8001826:	f003 fcac 	bl	8005182 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800182a:	2201      	movs	r2, #1
 800182c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001830:	4805      	ldr	r0, [pc, #20]	; (8001848 <ILI9341_Draw_Pixel+0x1ac>)
 8001832:	f001 fd61 	bl	80032f8 <HAL_GPIO_WritePin>
 8001836:	e000      	b.n	800183a <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001838:	bf00      	nop
	
}
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000002 	.word	0x20000002
 8001844:	20000000 	.word	0x20000000
 8001848:	40020800 	.word	0x40020800
 800184c:	20000274 	.word	0x20000274

08001850 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4604      	mov	r4, r0
 8001858:	4608      	mov	r0, r1
 800185a:	4611      	mov	r1, r2
 800185c:	461a      	mov	r2, r3
 800185e:	4623      	mov	r3, r4
 8001860:	80fb      	strh	r3, [r7, #6]
 8001862:	4603      	mov	r3, r0
 8001864:	80bb      	strh	r3, [r7, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	807b      	strh	r3, [r7, #2]
 800186a:	4613      	mov	r3, r2
 800186c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <ILI9341_Draw_Rectangle+0xb0>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	b29b      	uxth	r3, r3
 8001874:	88fa      	ldrh	r2, [r7, #6]
 8001876:	429a      	cmp	r2, r3
 8001878:	d23d      	bcs.n	80018f6 <ILI9341_Draw_Rectangle+0xa6>
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <ILI9341_Draw_Rectangle+0xb4>)
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	88ba      	ldrh	r2, [r7, #4]
 8001882:	429a      	cmp	r2, r3
 8001884:	d237      	bcs.n	80018f6 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001886:	88fa      	ldrh	r2, [r7, #6]
 8001888:	887b      	ldrh	r3, [r7, #2]
 800188a:	4413      	add	r3, r2
 800188c:	4a1c      	ldr	r2, [pc, #112]	; (8001900 <ILI9341_Draw_Rectangle+0xb0>)
 800188e:	8812      	ldrh	r2, [r2, #0]
 8001890:	b292      	uxth	r2, r2
 8001892:	4293      	cmp	r3, r2
 8001894:	dd05      	ble.n	80018a2 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8001896:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <ILI9341_Draw_Rectangle+0xb0>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	b29a      	uxth	r2, r3
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80018a2:	88ba      	ldrh	r2, [r7, #4]
 80018a4:	883b      	ldrh	r3, [r7, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a16      	ldr	r2, [pc, #88]	; (8001904 <ILI9341_Draw_Rectangle+0xb4>)
 80018aa:	8812      	ldrh	r2, [r2, #0]
 80018ac:	b292      	uxth	r2, r2
 80018ae:	4293      	cmp	r3, r2
 80018b0:	dd05      	ble.n	80018be <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <ILI9341_Draw_Rectangle+0xb4>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	88bb      	ldrh	r3, [r7, #4]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80018be:	88fa      	ldrh	r2, [r7, #6]
 80018c0:	887b      	ldrh	r3, [r7, #2]
 80018c2:	4413      	add	r3, r2
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b29c      	uxth	r4, r3
 80018ca:	88ba      	ldrh	r2, [r7, #4]
 80018cc:	883b      	ldrh	r3, [r7, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	88b9      	ldrh	r1, [r7, #4]
 80018d8:	88f8      	ldrh	r0, [r7, #6]
 80018da:	4622      	mov	r2, r4
 80018dc:	f7ff fc44 	bl	8001168 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80018e0:	883b      	ldrh	r3, [r7, #0]
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	fb02 f303 	mul.w	r3, r2, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	8b3b      	ldrh	r3, [r7, #24]
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fe10 	bl	8001514 <ILI9341_Draw_Colour_Burst>
 80018f4:	e000      	b.n	80018f8 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80018f6:	bf00      	nop
}
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd90      	pop	{r4, r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000002 	.word	0x20000002
 8001904:	20000000 	.word	0x20000000

08001908 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 800190e:	2310      	movs	r3, #16
 8001910:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8001916:	e019      	b.n	800194c <TP_Read+0x44>
    {
        value <<= 1;
 8001918:	88bb      	ldrh	r3, [r7, #4]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800191e:	2201      	movs	r2, #1
 8001920:	2108      	movs	r1, #8
 8001922:	480e      	ldr	r0, [pc, #56]	; (800195c <TP_Read+0x54>)
 8001924:	f001 fce8 	bl	80032f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	2108      	movs	r1, #8
 800192c:	480b      	ldr	r0, [pc, #44]	; (800195c <TP_Read+0x54>)
 800192e:	f001 fce3 	bl	80032f8 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8001932:	2110      	movs	r1, #16
 8001934:	4809      	ldr	r0, [pc, #36]	; (800195c <TP_Read+0x54>)
 8001936:	f001 fcc7 	bl	80032c8 <HAL_GPIO_ReadPin>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <TP_Read+0x3e>
        {
            value++;
 8001940:	88bb      	ldrh	r3, [r7, #4]
 8001942:	3301      	adds	r3, #1
 8001944:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	3b01      	subs	r3, #1
 800194a:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1e2      	bne.n	8001918 <TP_Read+0x10>
    };

    return value;
 8001952:	88bb      	ldrh	r3, [r7, #4]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000

08001960 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 800196a:	2308      	movs	r3, #8
 800196c:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 800196e:	2200      	movs	r2, #0
 8001970:	2108      	movs	r1, #8
 8001972:	4815      	ldr	r0, [pc, #84]	; (80019c8 <TP_Write+0x68>)
 8001974:	f001 fcc0 	bl	80032f8 <HAL_GPIO_WritePin>
	
    while(i > 0)
 8001978:	e01e      	b.n	80019b8 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	2b00      	cmp	r3, #0
 8001980:	da05      	bge.n	800198e <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8001982:	2201      	movs	r2, #1
 8001984:	2120      	movs	r1, #32
 8001986:	4810      	ldr	r0, [pc, #64]	; (80019c8 <TP_Write+0x68>)
 8001988:	f001 fcb6 	bl	80032f8 <HAL_GPIO_WritePin>
 800198c:	e004      	b.n	8001998 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 800198e:	2200      	movs	r2, #0
 8001990:	2120      	movs	r1, #32
 8001992:	480d      	ldr	r0, [pc, #52]	; (80019c8 <TP_Write+0x68>)
 8001994:	f001 fcb0 	bl	80032f8 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	2108      	movs	r1, #8
 80019a2:	4809      	ldr	r0, [pc, #36]	; (80019c8 <TP_Write+0x68>)
 80019a4:	f001 fca8 	bl	80032f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 80019a8:	2200      	movs	r2, #0
 80019aa:	2108      	movs	r1, #8
 80019ac:	4806      	ldr	r0, [pc, #24]	; (80019c8 <TP_Write+0x68>)
 80019ae:	f001 fca3 	bl	80032f8 <HAL_GPIO_WritePin>
        i--;
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1dd      	bne.n	800197a <TP_Write+0x1a>
    };
}
 80019be:	bf00      	nop
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	00000000 	.word	0x00000000

080019d0 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 80019d8:	2201      	movs	r2, #1
 80019da:	2108      	movs	r1, #8
 80019dc:	485a      	ldr	r0, [pc, #360]	; (8001b48 <TP_Read_Coordinates+0x178>)
 80019de:	f001 fc8b 	bl	80032f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 80019e2:	2201      	movs	r2, #1
 80019e4:	2120      	movs	r1, #32
 80019e6:	4858      	ldr	r0, [pc, #352]	; (8001b48 <TP_Read_Coordinates+0x178>)
 80019e8:	f001 fc86 	bl	80032f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 80019ec:	2201      	movs	r2, #1
 80019ee:	2140      	movs	r1, #64	; 0x40
 80019f0:	4855      	ldr	r0, [pc, #340]	; (8001b48 <TP_Read_Coordinates+0x178>)
 80019f2:	f001 fc81 	bl	80032f8 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 80019fa:	2300      	movs	r3, #0
 80019fc:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8001a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a06:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2140      	movs	r1, #64	; 0x40
 8001a10:	484d      	ldr	r0, [pc, #308]	; (8001b48 <TP_Read_Coordinates+0x178>)
 8001a12:	f001 fc71 	bl	80032f8 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001a16:	e023      	b.n	8001a60 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8001a18:	2090      	movs	r0, #144	; 0x90
 8001a1a:	f7ff ffa1 	bl	8001960 <TP_Write>

				rawy = TP_Read();	
 8001a1e:	f7ff ff73 	bl	8001908 <TP_Read>
 8001a22:	4603      	mov	r3, r0
 8001a24:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8001a26:	89fb      	ldrh	r3, [r7, #14]
 8001a28:	6a3a      	ldr	r2, [r7, #32]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 8001a2e:	89fb      	ldrh	r3, [r7, #14]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4413      	add	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 8001a36:	20d0      	movs	r0, #208	; 0xd0
 8001a38:	f7ff ff92 	bl	8001960 <TP_Write>
        rawx = TP_Read();
 8001a3c:	f7ff ff64 	bl	8001908 <TP_Read>
 8001a40:	4603      	mov	r3, r0
 8001a42:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 8001a44:	89bb      	ldrh	r3, [r7, #12]
 8001a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a48:	4413      	add	r3, r2
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 8001a4c:	89bb      	ldrh	r3, [r7, #12]
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	4413      	add	r3, r2
 8001a52:	61fb      	str	r3, [r7, #28]
        samples--;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
				counted_samples++;
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <TP_Read_Coordinates+0xa4>
 8001a66:	2104      	movs	r1, #4
 8001a68:	4837      	ldr	r0, [pc, #220]	; (8001b48 <TP_Read_Coordinates+0x178>)
 8001a6a:	f001 fc2d 	bl	80032c8 <HAL_GPIO_ReadPin>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0d1      	beq.n	8001a18 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8001a74:	2201      	movs	r2, #1
 8001a76:	2140      	movs	r1, #64	; 0x40
 8001a78:	4833      	ldr	r0, [pc, #204]	; (8001b48 <TP_Read_Coordinates+0x178>)
 8001a7a:	f001 fc3d 	bl	80032f8 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a84:	d14d      	bne.n	8001b22 <TP_Read_Coordinates+0x152>
 8001a86:	2104      	movs	r1, #4
 8001a88:	482f      	ldr	r0, [pc, #188]	; (8001b48 <TP_Read_Coordinates+0x178>)
 8001a8a:	f001 fc1d 	bl	80032c8 <HAL_GPIO_ReadPin>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d146      	bne.n	8001b22 <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9c:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8001ab0:	89bb      	ldrh	r3, [r7, #12]
 8001ab2:	425b      	negs	r3, r3
 8001ab4:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8001ab6:	89fb      	ldrh	r3, [r7, #14]
 8001ab8:	425b      	negs	r3, r3
 8001aba:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8001abc:	89ba      	ldrh	r2, [r7, #12]
 8001abe:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <TP_Read_Coordinates+0x17c>)
 8001ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ac4:	1ad2      	subs	r2, r2, r3
 8001ac6:	0852      	lsrs	r2, r2, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	0a1b      	lsrs	r3, r3, #8
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8001ad2:	ee07 3a90 	vmov	s15, r3
 8001ad6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ada:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001b40 <TP_Read_Coordinates+0x170>
 8001ade:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ae2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ae6:	ee17 3a90 	vmov	r3, s15
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8001af0:	89fb      	ldrh	r3, [r7, #14]
 8001af2:	4a17      	ldr	r2, [pc, #92]	; (8001b50 <TP_Read_Coordinates+0x180>)
 8001af4:	fba2 2303 	umull	r2, r3, r2, r3
 8001af8:	09db      	lsrs	r3, r3, #7
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3b0f      	subs	r3, #15
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b06:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001b40 <TP_Read_Coordinates+0x170>
 8001b0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3302      	adds	r3, #2
 8001b12:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b16:	ee17 2a90 	vmov	r2, s15
 8001b1a:	b292      	uxth	r2, r2
 8001b1c:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e007      	b.n	8001b32 <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8001b30:	2300      	movs	r3, #0
		}
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3728      	adds	r7, #40	; 0x28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	f3af 8000 	nop.w
 8001b40:	28f5c28f 	.word	0x28f5c28f
 8001b44:	3ff28f5c 	.word	0x3ff28f5c
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	e01e01e1 	.word	0xe01e01e1
 8001b50:	a0a0a0a1 	.word	0xa0a0a0a1

08001b54 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8001b58:	2104      	movs	r1, #4
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <TP_Touchpad_Pressed+0x1c>)
 8001b5c:	f001 fbb4 	bl	80032c8 <HAL_GPIO_ReadPin>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8001b6a:	2300      	movs	r3, #0
	}
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000

08001b74 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b8a:	4b5a      	ldr	r3, [pc, #360]	; (8001cf4 <MX_GPIO_Init+0x180>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a59      	ldr	r2, [pc, #356]	; (8001cf4 <MX_GPIO_Init+0x180>)
 8001b90:	f043 0310 	orr.w	r3, r3, #16
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b57      	ldr	r3, [pc, #348]	; (8001cf4 <MX_GPIO_Init+0x180>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	4b54      	ldr	r3, [pc, #336]	; (8001cf4 <MX_GPIO_Init+0x180>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a53      	ldr	r2, [pc, #332]	; (8001cf4 <MX_GPIO_Init+0x180>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b51      	ldr	r3, [pc, #324]	; (8001cf4 <MX_GPIO_Init+0x180>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bba:	4b4e      	ldr	r3, [pc, #312]	; (8001cf4 <MX_GPIO_Init+0x180>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a4d      	ldr	r2, [pc, #308]	; (8001cf4 <MX_GPIO_Init+0x180>)
 8001bc0:	f043 0320 	orr.w	r3, r3, #32
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <MX_GPIO_Init+0x180>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0320 	and.w	r3, r3, #32
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	4b48      	ldr	r3, [pc, #288]	; (8001cf4 <MX_GPIO_Init+0x180>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a47      	ldr	r2, [pc, #284]	; (8001cf4 <MX_GPIO_Init+0x180>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b45      	ldr	r3, [pc, #276]	; (8001cf4 <MX_GPIO_Init+0x180>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bea:	4b42      	ldr	r3, [pc, #264]	; (8001cf4 <MX_GPIO_Init+0x180>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a41      	ldr	r2, [pc, #260]	; (8001cf4 <MX_GPIO_Init+0x180>)
 8001bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b3f      	ldr	r3, [pc, #252]	; (8001cf4 <MX_GPIO_Init+0x180>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TCLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2168      	movs	r1, #104	; 0x68
 8001c06:	483c      	ldr	r0, [pc, #240]	; (8001cf8 <MX_GPIO_Init+0x184>)
 8001c08:	f001 fb76 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001c12:	483a      	ldr	r0, [pc, #232]	; (8001cfc <MX_GPIO_Init+0x188>)
 8001c14:	f001 fb70 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_Power_GPIO_Port, USB_Power_Pin, GPIO_PIN_RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2140      	movs	r1, #64	; 0x40
 8001c1c:	4838      	ldr	r0, [pc, #224]	; (8001d00 <MX_GPIO_Init+0x18c>)
 8001c1e:	f001 fb6b 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8001c22:	2200      	movs	r2, #0
 8001c24:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001c28:	4836      	ldr	r0, [pc, #216]	; (8001d04 <MX_GPIO_Init+0x190>)
 8001c2a:	f001 fb65 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = TIRQ_Pin|T_MISO_Pin;
 8001c2e:	2314      	movs	r3, #20
 8001c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4619      	mov	r1, r3
 8001c40:	482d      	ldr	r0, [pc, #180]	; (8001cf8 <MX_GPIO_Init+0x184>)
 8001c42:	f001 f995 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = TCLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8001c46:	2368      	movs	r3, #104	; 0x68
 8001c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4826      	ldr	r0, [pc, #152]	; (8001cf8 <MX_GPIO_Init+0x184>)
 8001c5e:	f001 f987 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Pin;
 8001c62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Blue_GPIO_Port, &GPIO_InitStruct);
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4619      	mov	r1, r3
 8001c76:	4823      	ldr	r0, [pc, #140]	; (8001d04 <MX_GPIO_Init+0x190>)
 8001c78:	f001 f97a 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001c7c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4819      	ldr	r0, [pc, #100]	; (8001cfc <MX_GPIO_Init+0x188>)
 8001c96:	f001 f96b 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_Power_Pin;
 8001c9a:	2340      	movs	r3, #64	; 0x40
 8001c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_Power_GPIO_Port, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4813      	ldr	r0, [pc, #76]	; (8001d00 <MX_GPIO_Init+0x18c>)
 8001cb2:	f001 f95d 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_Overc_Pin;
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_Overc_GPIO_Port, &GPIO_InitStruct);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480d      	ldr	r0, [pc, #52]	; (8001d00 <MX_GPIO_Init+0x18c>)
 8001cca:	f001 f951 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8001cce:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4807      	ldr	r0, [pc, #28]	; (8001d04 <MX_GPIO_Init+0x190>)
 8001ce8:	f001 f942 	bl	8002f70 <HAL_GPIO_Init>

}
 8001cec:	bf00      	nop
 8001cee:	3728      	adds	r7, #40	; 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40020400 	.word	0x40020400
 8001d00:	40021800 	.word	0x40021800
 8001d04:	40020800 	.word	0x40020800

08001d08 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <MX_I2C1_Init+0x74>)
 8001d0e:	4a1c      	ldr	r2, [pc, #112]	; (8001d80 <MX_I2C1_Init+0x78>)
 8001d10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <MX_I2C1_Init+0x74>)
 8001d14:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <MX_I2C1_Init+0x7c>)
 8001d16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d18:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <MX_I2C1_Init+0x74>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <MX_I2C1_Init+0x74>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d24:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <MX_I2C1_Init+0x74>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d2a:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <MX_I2C1_Init+0x74>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <MX_I2C1_Init+0x74>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <MX_I2C1_Init+0x74>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <MX_I2C1_Init+0x74>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d42:	480e      	ldr	r0, [pc, #56]	; (8001d7c <MX_I2C1_Init+0x74>)
 8001d44:	f001 faf2 	bl	800332c <HAL_I2C_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d4e:	f000 fd05 	bl	800275c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d52:	2100      	movs	r1, #0
 8001d54:	4809      	ldr	r0, [pc, #36]	; (8001d7c <MX_I2C1_Init+0x74>)
 8001d56:	f001 ffcf 	bl	8003cf8 <HAL_I2CEx_ConfigAnalogFilter>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d60:	f000 fcfc 	bl	800275c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d64:	2100      	movs	r1, #0
 8001d66:	4805      	ldr	r0, [pc, #20]	; (8001d7c <MX_I2C1_Init+0x74>)
 8001d68:	f002 f811 	bl	8003d8e <HAL_I2CEx_ConfigDigitalFilter>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d72:	f000 fcf3 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000208 	.word	0x20000208
 8001d80:	40005400 	.word	0x40005400
 8001d84:	00c0eaff 	.word	0x00c0eaff

08001d88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b0ae      	sub	sp, #184	; 0xb8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	2290      	movs	r2, #144	; 0x90
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 fff5 	bl	8005d98 <memset>
  if(i2cHandle->Instance==I2C1)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a22      	ldr	r2, [pc, #136]	; (8001e3c <HAL_I2C_MspInit+0xb4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d13c      	bne.n	8001e32 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001db8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dbc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f002 fcde 	bl	8004788 <HAL_RCCEx_PeriphCLKConfig>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001dd2:	f000 fcc3 	bl	800275c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_I2C_MspInit+0xb8>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <HAL_I2C_MspInit+0xb8>)
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_I2C_MspInit+0xb8>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df6:	2312      	movs	r3, #18
 8001df8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e02:	2303      	movs	r3, #3
 8001e04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e08:	2304      	movs	r3, #4
 8001e0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e12:	4619      	mov	r1, r3
 8001e14:	480b      	ldr	r0, [pc, #44]	; (8001e44 <HAL_I2C_MspInit+0xbc>)
 8001e16:	f001 f8ab 	bl	8002f70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_I2C_MspInit+0xb8>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	4a08      	ldr	r2, [pc, #32]	; (8001e40 <HAL_I2C_MspInit+0xb8>)
 8001e20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e24:	6413      	str	r3, [r2, #64]	; 0x40
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_I2C_MspInit+0xb8>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e32:	bf00      	nop
 8001e34:	37b8      	adds	r7, #184	; 0xb8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40005400 	.word	0x40005400
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40020400 	.word	0x40020400

08001e48 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e4c:	f3bf 8f4f 	dsb	sy
}
 8001e50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e52:	f3bf 8f6f 	isb	sy
}
 8001e56:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <SCB_EnableICache+0x48>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e60:	f3bf 8f4f 	dsb	sy
}
 8001e64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e66:	f3bf 8f6f 	isb	sy
}
 8001e6a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <SCB_EnableICache+0x48>)
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	4a07      	ldr	r2, [pc, #28]	; (8001e90 <SCB_EnableICache+0x48>)
 8001e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e76:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e78:	f3bf 8f4f 	dsb	sy
}
 8001e7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e7e:	f3bf 8f6f 	isb	sy
}
 8001e82:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <SCB_EnableDCache+0x84>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ea2:	f3bf 8f4f 	dsb	sy
}
 8001ea6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <SCB_EnableDCache+0x84>)
 8001eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eae:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	0b5b      	lsrs	r3, r3, #13
 8001eb4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001eb8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	08db      	lsrs	r3, r3, #3
 8001ebe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ec2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001ecc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ed2:	4911      	ldr	r1, [pc, #68]	; (8001f18 <SCB_EnableDCache+0x84>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1e5a      	subs	r2, r3, #1
 8001ede:	60ba      	str	r2, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1ef      	bne.n	8001ec4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1e5a      	subs	r2, r3, #1
 8001ee8:	60fa      	str	r2, [r7, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1e5      	bne.n	8001eba <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001eee:	f3bf 8f4f 	dsb	sy
}
 8001ef2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <SCB_EnableDCache+0x84>)
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <SCB_EnableDCache+0x84>)
 8001efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f00:	f3bf 8f4f 	dsb	sy
}
 8001f04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f06:	f3bf 8f6f 	isb	sy
}
 8001f0a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b0a4      	sub	sp, #144	; 0x90
 8001f20:	af02      	add	r7, sp, #8
  uint8_t cmdBuffer[3];
  uint8_t dataBuffer[8];
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001f22:	f7ff ff91 	bl	8001e48 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001f26:	f7ff ffb5 	bl	8001e94 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f2a:	f000 feab 	bl	8002c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f2e:	f000 fb6b 	bl	8002608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f32:	f7ff fe1f 	bl	8001b74 <MX_GPIO_Init>
  MX_RNG_Init();
 8001f36:	f000 fc17 	bl	8002768 <MX_RNG_Init>
  MX_SPI5_Init();
 8001f3a:	f000 fc5d 	bl	80027f8 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001f3e:	f000 fe03 	bl	8002b48 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001f42:	f7ff fee1 	bl	8001d08 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8001f46:	f7ff f9d7 	bl	80012f8 <ILI9341_Init>

  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001f4a:	2003      	movs	r0, #3
 8001f4c:	f7ff f976 	bl	800123c <ILI9341_Set_Rotation>

  ILI9341_Fill_Screen(WHITE);
 8001f50:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f54:	f7ff fb7c 	bl	8001650 <ILI9341_Fill_Screen>
  uint16_t red=0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  uint16_t green=0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
  uint16_t blue=0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
  uint16_t timeout=0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
  cmdBuffer[0]=0x03;
 8001f70:	2303      	movs	r3, #3
 8001f72:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  cmdBuffer[1]=0x00;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  cmdBuffer[2]=0x04;
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
		#define ILI9341_SCREEN_WIDTH 	320
     *  */



	  HAL_Delay(50);
 8001f82:	2032      	movs	r0, #50	; 0x32
 8001f84:	f000 feea 	bl	8002d5c <HAL_Delay>

	  HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 8001f88:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001f8c:	23c8      	movs	r3, #200	; 0xc8
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2303      	movs	r3, #3
 8001f92:	21b8      	movs	r1, #184	; 0xb8
 8001f94:	4831      	ldr	r0, [pc, #196]	; (800205c <main+0x140>)
 8001f96:	f001 fa59 	bl	800344c <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 8001f9a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001f9e:	23c8      	movs	r3, #200	; 0xc8
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	21b8      	movs	r1, #184	; 0xb8
 8001fa6:	482d      	ldr	r0, [pc, #180]	; (800205c <main+0x140>)
 8001fa8:	f001 fa50 	bl	800344c <HAL_I2C_Master_Transmit>
	  HAL_Delay(1);
 8001fac:	2001      	movs	r0, #1
 8001fae:	f000 fed5 	bl	8002d5c <HAL_Delay>
	  HAL_I2C_Master_Receive(&hi2c1, 0x5c<<1, dataBuffer, 8, 200);
 8001fb2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fb6:	23c8      	movs	r3, #200	; 0xc8
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2308      	movs	r3, #8
 8001fbc:	21b8      	movs	r1, #184	; 0xb8
 8001fbe:	4827      	ldr	r0, [pc, #156]	; (800205c <main+0x140>)
 8001fc0:	f001 fb38 	bl	8003634 <HAL_I2C_Master_Receive>
	  uint16_t Rcrc = dataBuffer[7]<<8;
 8001fc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	021b      	lsls	r3, r3, #8
 8001fcc:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	  Rcrc +=dataBuffer[6];
 8001fd0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001fda:	4413      	add	r3, r2
 8001fdc:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	  if (Rcrc == CRC16_2(dataBuffer,6))
 8001fe0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fe4:	2106      	movs	r1, #6
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fb7c 	bl	80026e4 <CRC16_2>
 8001fec:	4603      	mov	r3, r0
 8001fee:	461a      	mov	r2, r3
 8001ff0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d157      	bne.n	80020a8 <main+0x18c>
	  {
		  uint16_t temperature = ((dataBuffer[4]%0x7F)<<8)+dataBuffer[5];
 8001ff8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <main+0x144>)
 8001ffe:	fba3 1302 	umull	r1, r3, r3, r2
 8002002:	1ad1      	subs	r1, r2, r3
 8002004:	0849      	lsrs	r1, r1, #1
 8002006:	440b      	add	r3, r1
 8002008:	0999      	lsrs	r1, r3, #6
 800200a:	460b      	mov	r3, r1
 800200c:	01db      	lsls	r3, r3, #7
 800200e:	1a5b      	subs	r3, r3, r1
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	b29b      	uxth	r3, r3
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	b29a      	uxth	r2, r3
 800201a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800201e:	b29b      	uxth	r3, r3
 8002020:	4413      	add	r3, r2
 8002022:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
		  t = temperature/10.0;
 8002026:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002032:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002036:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800203a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <main+0x148>)
 8002040:	edc3 7a00 	vstr	s15, [r3]
		  t=(((dataBuffer[4]&0x80)>>7)==1)?(t*(-1)):t;
 8002044:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002048:	09db      	lsrs	r3, r3, #7
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d10b      	bne.n	8002068 <main+0x14c>
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <main+0x148>)
 8002052:	edd3 7a00 	vldr	s15, [r3]
 8002056:	eef1 7a67 	vneg.f32	s15, s15
 800205a:	e008      	b.n	800206e <main+0x152>
 800205c:	20000208 	.word	0x20000208
 8002060:	02040811 	.word	0x02040811
 8002064:	20000008 	.word	0x20000008
 8002068:	4bb7      	ldr	r3, [pc, #732]	; (8002348 <main+0x42c>)
 800206a:	edd3 7a00 	vldr	s15, [r3]
 800206e:	4bb6      	ldr	r3, [pc, #728]	; (8002348 <main+0x42c>)
 8002070:	edc3 7a00 	vstr	s15, [r3]
		  uint16_t humidity=(dataBuffer[2]<<8)+dataBuffer[3];
 8002074:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002078:	b29b      	uxth	r3, r3
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	b29a      	uxth	r2, r3
 800207e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002082:	b29b      	uxth	r3, r3
 8002084:	4413      	add	r3, r2
 8002086:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		  h= humidity/10.0;
 800208a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800208e:	ee07 3a90 	vmov	s15, r3
 8002092:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002096:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800209a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800209e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020a2:	4baa      	ldr	r3, [pc, #680]	; (800234c <main+0x430>)
 80020a4:	edc3 7a00 	vstr	s15, [r3]

	  }
	  char temperature[4];
	  char Humudity[10];

	  sprintf(temperature,"%4.1fC",t);
 80020a8:	4ba7      	ldr	r3, [pc, #668]	; (8002348 <main+0x42c>)
 80020aa:	edd3 7a00 	vldr	s15, [r3]
 80020ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020b2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80020b6:	ec53 2b17 	vmov	r2, r3, d7
 80020ba:	49a5      	ldr	r1, [pc, #660]	; (8002350 <main+0x434>)
 80020bc:	f004 fcc2 	bl	8006a44 <siprintf>
	  ILI9341_Draw_Text(temperature, 20, 25, BLACK, 2, WHITE);
 80020c0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80020c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	2302      	movs	r3, #2
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2300      	movs	r3, #0
 80020d0:	2219      	movs	r2, #25
 80020d2:	2114      	movs	r1, #20
 80020d4:	f7fe fe02 	bl	8000cdc <ILI9341_Draw_Text>


	  sprintf(Humudity,"%4.1f%%RH",h);
 80020d8:	4b9c      	ldr	r3, [pc, #624]	; (800234c <main+0x430>)
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020e2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80020e6:	ec53 2b17 	vmov	r2, r3, d7
 80020ea:	499a      	ldr	r1, [pc, #616]	; (8002354 <main+0x438>)
 80020ec:	f004 fcaa 	bl	8006a44 <siprintf>
	  ILI9341_Draw_Text(Humudity, 180, 25, BLACK, 2, WHITE);
 80020f0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80020f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	2302      	movs	r3, #2
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2300      	movs	r3, #0
 8002100:	2219      	movs	r2, #25
 8002102:	21b4      	movs	r1, #180	; 0xb4
 8002104:	f7fe fdea 	bl	8000cdc <ILI9341_Draw_Text>





	  rcolor=((red*25+5)>>3)<<11;
 8002108:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	009a      	lsls	r2, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	3305      	adds	r3, #5
 8002118:	10db      	asrs	r3, r3, #3
 800211a:	b29b      	uxth	r3, r3
 800211c:	02db      	lsls	r3, r3, #11
 800211e:	b29a      	uxth	r2, r3
 8002120:	4b8d      	ldr	r3, [pc, #564]	; (8002358 <main+0x43c>)
 8002122:	801a      	strh	r2, [r3, #0]
	  gcolor=((green*25+5)>>2)<<5;
 8002124:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	009a      	lsls	r2, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	3305      	adds	r3, #5
 8002134:	109b      	asrs	r3, r3, #2
 8002136:	b29b      	uxth	r3, r3
 8002138:	015b      	lsls	r3, r3, #5
 800213a:	b29a      	uxth	r2, r3
 800213c:	4b87      	ldr	r3, [pc, #540]	; (800235c <main+0x440>)
 800213e:	801a      	strh	r2, [r3, #0]
	  bcolor=(blue*25+5)>>3;
 8002140:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	009a      	lsls	r2, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	3305      	adds	r3, #5
 8002150:	10db      	asrs	r3, r3, #3
 8002152:	b29a      	uxth	r2, r3
 8002154:	4b82      	ldr	r3, [pc, #520]	; (8002360 <main+0x444>)
 8002156:	801a      	strh	r2, [r3, #0]
	  rgbcolor=rcolor|gcolor|bcolor;
 8002158:	4b7f      	ldr	r3, [pc, #508]	; (8002358 <main+0x43c>)
 800215a:	881a      	ldrh	r2, [r3, #0]
 800215c:	4b7f      	ldr	r3, [pc, #508]	; (800235c <main+0x440>)
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	4313      	orrs	r3, r2
 8002162:	b29a      	uxth	r2, r3
 8002164:	4b7e      	ldr	r3, [pc, #504]	; (8002360 <main+0x444>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	4313      	orrs	r3, r2
 800216a:	b29a      	uxth	r2, r3
 800216c:	4b7d      	ldr	r3, [pc, #500]	; (8002364 <main+0x448>)
 800216e:	801a      	strh	r2, [r3, #0]

	  if(TP_Touchpad_Pressed())
 8002170:	f7ff fcf0 	bl	8001b54 <TP_Touchpad_Pressed>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 816a 	beq.w	8002450 <main+0x534>
	  {
		  uint16_t x_pos=0;
 800217c:	2300      	movs	r3, #0
 800217e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		  uint16_t y_pos=0;
 8002182:	2300      	movs	r3, #0
 8002184:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
		  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 8002188:	2201      	movs	r2, #1
 800218a:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800218e:	4876      	ldr	r0, [pc, #472]	; (8002368 <main+0x44c>)
 8002190:	f001 f8b2 	bl	80032f8 <HAL_GPIO_WritePin>
		  uint16_t position_array[2];
		  if(TP_Read_Coordinates(position_array)==TOUCHPAD_DATA_OK)
 8002194:	f107 0320 	add.w	r3, r7, #32
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fc19 	bl	80019d0 <TP_Read_Coordinates>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	f040 8130 	bne.w	8002406 <main+0x4ea>
		  {
			  x_pos= position_array[0];
 80021a6:	8c3b      	ldrh	r3, [r7, #32]
 80021a8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
			  y_pos=position_array[1];
 80021ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80021ae:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
			  if(x_pos>100 && x_pos<125&&y_pos>285&&y_pos<305)
 80021b2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d919      	bls.n	80021ee <main+0x2d2>
 80021ba:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80021be:	2b7c      	cmp	r3, #124	; 0x7c
 80021c0:	d815      	bhi.n	80021ee <main+0x2d2>
 80021c2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80021c6:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 80021ca:	d310      	bcc.n	80021ee <main+0x2d2>
 80021cc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80021d0:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80021d4:	d80b      	bhi.n	80021ee <main+0x2d2>
			  {
				  red++;
 80021d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021da:	3301      	adds	r3, #1
 80021dc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			  	  if (red>10)
 80021e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021e4:	2b0a      	cmp	r3, #10
 80021e6:	d902      	bls.n	80021ee <main+0x2d2>
			  	  {

			  		  red=0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			  	  }
			  }
			  if(x_pos>150 && x_pos<180&&y_pos>285&&y_pos<305)
 80021ee:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80021f2:	2b96      	cmp	r3, #150	; 0x96
 80021f4:	d919      	bls.n	800222a <main+0x30e>
 80021f6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80021fa:	2bb3      	cmp	r3, #179	; 0xb3
 80021fc:	d815      	bhi.n	800222a <main+0x30e>
 80021fe:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002202:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8002206:	d310      	bcc.n	800222a <main+0x30e>
 8002208:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800220c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8002210:	d80b      	bhi.n	800222a <main+0x30e>
			  {

				  green++;
 8002212:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002216:	3301      	adds	r3, #1
 8002218:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			  	  if (green>10)
 800221c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002220:	2b0a      	cmp	r3, #10
 8002222:	d902      	bls.n	800222a <main+0x30e>
			  	  {
			  		green=0;
 8002224:	2300      	movs	r3, #0
 8002226:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			  	  }
			  }
			  if(x_pos>200 && x_pos<230&&y_pos>285&&y_pos<305)
 800222a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800222e:	2bc8      	cmp	r3, #200	; 0xc8
 8002230:	d919      	bls.n	8002266 <main+0x34a>
 8002232:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002236:	2be5      	cmp	r3, #229	; 0xe5
 8002238:	d815      	bhi.n	8002266 <main+0x34a>
 800223a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800223e:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8002242:	d310      	bcc.n	8002266 <main+0x34a>
 8002244:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002248:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800224c:	d80b      	bhi.n	8002266 <main+0x34a>
			  {

				  blue++;
 800224e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002252:	3301      	adds	r3, #1
 8002254:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
				  if (blue>10)
 8002258:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800225c:	2b0a      	cmp	r3, #10
 800225e:	d902      	bls.n	8002266 <main+0x34a>
				  {
					  blue=0;
 8002260:	2300      	movs	r3, #0
 8002262:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
				  }
			  }
			  if(x_pos>30 && x_pos<50&&y_pos>180&&y_pos<220)
 8002266:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800226a:	2b1e      	cmp	r3, #30
 800226c:	f240 80cb 	bls.w	8002406 <main+0x4ea>
 8002270:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002274:	2b31      	cmp	r3, #49	; 0x31
 8002276:	f200 80c6 	bhi.w	8002406 <main+0x4ea>
 800227a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800227e:	2bb4      	cmp	r3, #180	; 0xb4
 8002280:	f240 80c1 	bls.w	8002406 <main+0x4ea>
 8002284:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002288:	2bdb      	cmp	r3, #219	; 0xdb
 800228a:	f200 80bc 	bhi.w	8002406 <main+0x4ea>
			  {

			  	  ILI9341_Fill_Screen(WHITE);
 800228e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002292:	f7ff f9dd 	bl	8001650 <ILI9341_Fill_Screen>
			  	  ILI9341_Draw_Image((const char*)picture, SCREEN_HORIZONTAL_2);
 8002296:	2103      	movs	r1, #3
 8002298:	4834      	ldr	r0, [pc, #208]	; (800236c <main+0x450>)
 800229a:	f7fe fd4f 	bl	8000d3c <ILI9341_Draw_Image>
			  	  ILI9341_Draw_Text("Group No.15", 125, 45, rgbcolor, 2, WHITE);
 800229e:	4b31      	ldr	r3, [pc, #196]	; (8002364 <main+0x448>)
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a6:	9201      	str	r2, [sp, #4]
 80022a8:	2202      	movs	r2, #2
 80022aa:	9200      	str	r2, [sp, #0]
 80022ac:	222d      	movs	r2, #45	; 0x2d
 80022ae:	217d      	movs	r1, #125	; 0x7d
 80022b0:	482f      	ldr	r0, [pc, #188]	; (8002370 <main+0x454>)
 80022b2:	f7fe fd13 	bl	8000cdc <ILI9341_Draw_Text>
			  	  ILI9341_Draw_Text("Watanyu", 125, 65, rgbcolor, 2, WHITE);
 80022b6:	4b2b      	ldr	r3, [pc, #172]	; (8002364 <main+0x448>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022be:	9201      	str	r2, [sp, #4]
 80022c0:	2202      	movs	r2, #2
 80022c2:	9200      	str	r2, [sp, #0]
 80022c4:	2241      	movs	r2, #65	; 0x41
 80022c6:	217d      	movs	r1, #125	; 0x7d
 80022c8:	482a      	ldr	r0, [pc, #168]	; (8002374 <main+0x458>)
 80022ca:	f7fe fd07 	bl	8000cdc <ILI9341_Draw_Text>
			  	  ILI9341_Draw_Text("Wasusirikul", 125, 85, rgbcolor, 2, WHITE);
 80022ce:	4b25      	ldr	r3, [pc, #148]	; (8002364 <main+0x448>)
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022d6:	9201      	str	r2, [sp, #4]
 80022d8:	2202      	movs	r2, #2
 80022da:	9200      	str	r2, [sp, #0]
 80022dc:	2255      	movs	r2, #85	; 0x55
 80022de:	217d      	movs	r1, #125	; 0x7d
 80022e0:	4825      	ldr	r0, [pc, #148]	; (8002378 <main+0x45c>)
 80022e2:	f7fe fcfb 	bl	8000cdc <ILI9341_Draw_Text>
			  	  ILI9341_Draw_Text("640115125", 125, 105, rgbcolor, 2, WHITE);
 80022e6:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <main+0x448>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ee:	9201      	str	r2, [sp, #4]
 80022f0:	2202      	movs	r2, #2
 80022f2:	9200      	str	r2, [sp, #0]
 80022f4:	2269      	movs	r2, #105	; 0x69
 80022f6:	217d      	movs	r1, #125	; 0x7d
 80022f8:	4820      	ldr	r0, [pc, #128]	; (800237c <main+0x460>)
 80022fa:	f7fe fcef 	bl	8000cdc <ILI9341_Draw_Text>
			  	  ILI9341_Draw_Text("Kotcharat", 125, 125, rgbcolor, 2, WHITE);
 80022fe:	4b19      	ldr	r3, [pc, #100]	; (8002364 <main+0x448>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002306:	9201      	str	r2, [sp, #4]
 8002308:	2202      	movs	r2, #2
 800230a:	9200      	str	r2, [sp, #0]
 800230c:	227d      	movs	r2, #125	; 0x7d
 800230e:	217d      	movs	r1, #125	; 0x7d
 8002310:	481b      	ldr	r0, [pc, #108]	; (8002380 <main+0x464>)
 8002312:	f7fe fce3 	bl	8000cdc <ILI9341_Draw_Text>
			  	  ILI9341_Draw_Text("Phutatate", 125, 145, rgbcolor, 2, WHITE);
 8002316:	4b13      	ldr	r3, [pc, #76]	; (8002364 <main+0x448>)
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800231e:	9201      	str	r2, [sp, #4]
 8002320:	2202      	movs	r2, #2
 8002322:	9200      	str	r2, [sp, #0]
 8002324:	2291      	movs	r2, #145	; 0x91
 8002326:	217d      	movs	r1, #125	; 0x7d
 8002328:	4816      	ldr	r0, [pc, #88]	; (8002384 <main+0x468>)
 800232a:	f7fe fcd7 	bl	8000cdc <ILI9341_Draw_Text>
			  	  ILI9341_Draw_Text("64015018", 125, 165, rgbcolor, 2, WHITE);
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <main+0x448>)
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002336:	9201      	str	r2, [sp, #4]
 8002338:	2202      	movs	r2, #2
 800233a:	9200      	str	r2, [sp, #0]
 800233c:	22a5      	movs	r2, #165	; 0xa5
 800233e:	217d      	movs	r1, #125	; 0x7d
 8002340:	4811      	ldr	r0, [pc, #68]	; (8002388 <main+0x46c>)
 8002342:	f7fe fccb 	bl	8000cdc <ILI9341_Draw_Text>
			  	  while(timeout<5000)
 8002346:	e051      	b.n	80023ec <main+0x4d0>
 8002348:	20000008 	.word	0x20000008
 800234c:	20000004 	.word	0x20000004
 8002350:	0800a490 	.word	0x0800a490
 8002354:	0800a498 	.word	0x0800a498
 8002358:	2000025c 	.word	0x2000025c
 800235c:	2000025e 	.word	0x2000025e
 8002360:	20000260 	.word	0x20000260
 8002364:	20000262 	.word	0x20000262
 8002368:	40020400 	.word	0x40020400
 800236c:	0800a754 	.word	0x0800a754
 8002370:	0800a4a4 	.word	0x0800a4a4
 8002374:	0800a4b0 	.word	0x0800a4b0
 8002378:	0800a4b8 	.word	0x0800a4b8
 800237c:	0800a4c4 	.word	0x0800a4c4
 8002380:	0800a4d0 	.word	0x0800a4d0
 8002384:	0800a4dc 	.word	0x0800a4dc
 8002388:	0800a4e8 	.word	0x0800a4e8
				  	  {
				  	  HAL_Delay(100);
 800238c:	2064      	movs	r0, #100	; 0x64
 800238e:	f000 fce5 	bl	8002d5c <HAL_Delay>
				  	  timeout+=100;
 8002392:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002396:	3364      	adds	r3, #100	; 0x64
 8002398:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
				  	  if(TP_Touchpad_Pressed())
 800239c:	f7ff fbda 	bl	8001b54 <TP_Touchpad_Pressed>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d022      	beq.n	80023ec <main+0x4d0>
				  	  {
				  		 if(TP_Read_Coordinates(position_array)==TOUCHPAD_DATA_OK)
 80023a6:	f107 0320 	add.w	r3, r7, #32
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fb10 	bl	80019d0 <TP_Read_Coordinates>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d11a      	bne.n	80023ec <main+0x4d0>
				  				  {
				  					  x_pos= position_array[0];
 80023b6:	8c3b      	ldrh	r3, [r7, #32]
 80023b8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
				  					  y_pos=position_array[1];
 80023bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023be:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
				  					  if(x_pos>70 && x_pos<190&&y_pos>180&&y_pos<300)
 80023c2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80023c6:	2b46      	cmp	r3, #70	; 0x46
 80023c8:	d910      	bls.n	80023ec <main+0x4d0>
 80023ca:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80023ce:	2bbd      	cmp	r3, #189	; 0xbd
 80023d0:	d80c      	bhi.n	80023ec <main+0x4d0>
 80023d2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80023d6:	2bb4      	cmp	r3, #180	; 0xb4
 80023d8:	d908      	bls.n	80023ec <main+0x4d0>
 80023da:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80023de:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80023e2:	d203      	bcs.n	80023ec <main+0x4d0>
				  					  {
				  						  timeout=5000;
 80023e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80023e8:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
			  	  while(timeout<5000)
 80023ec:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80023f0:	f241 3287 	movw	r2, #4999	; 0x1387
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d9c9      	bls.n	800238c <main+0x470>
				  				  }

				  	  }

				  	  }
					timeout=0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
				  	ILI9341_Fill_Screen(WHITE);
 80023fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002402:	f7ff f925 	bl	8001650 <ILI9341_Fill_Screen>


		  }

		  char counter_buff[30];
		  		sprintf(counter_buff,"POS X: %.3d", x_pos);
 8002406:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800240a:	463b      	mov	r3, r7
 800240c:	4979      	ldr	r1, [pc, #484]	; (80025f4 <main+0x6d8>)
 800240e:	4618      	mov	r0, r3
 8002410:	f004 fb18 	bl	8006a44 <siprintf>
		  		ILI9341_Draw_Text(counter_buff, 10, 80, BLACK, 2, WHITE);
 8002414:	4638      	mov	r0, r7
 8002416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	2302      	movs	r3, #2
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2300      	movs	r3, #0
 8002422:	2250      	movs	r2, #80	; 0x50
 8002424:	210a      	movs	r1, #10
 8002426:	f7fe fc59 	bl	8000cdc <ILI9341_Draw_Text>
		  		sprintf(counter_buff,"POS Y: %.3d", y_pos);
 800242a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800242e:	463b      	mov	r3, r7
 8002430:	4971      	ldr	r1, [pc, #452]	; (80025f8 <main+0x6dc>)
 8002432:	4618      	mov	r0, r3
 8002434:	f004 fb06 	bl	8006a44 <siprintf>
		  		ILI9341_Draw_Text(counter_buff, 10, 120, BLACK, 2, WHITE);
 8002438:	4638      	mov	r0, r7
 800243a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	2302      	movs	r3, #2
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2300      	movs	r3, #0
 8002446:	2278      	movs	r2, #120	; 0x78
 8002448:	210a      	movs	r1, #10
 800244a:	f7fe fc47 	bl	8000cdc <ILI9341_Draw_Text>
 800244e:	e005      	b.n	800245c <main+0x540>

	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002450:	2200      	movs	r2, #0
 8002452:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002456:	4869      	ldr	r0, [pc, #420]	; (80025fc <main+0x6e0>)
 8002458:	f000 ff4e 	bl	80032f8 <HAL_GPIO_WritePin>

	  }
	  ILI9341_Draw_Filled_Circle(130,40, 30,rgbcolor);
 800245c:	4b68      	ldr	r3, [pc, #416]	; (8002600 <main+0x6e4>)
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	221e      	movs	r2, #30
 8002462:	2128      	movs	r1, #40	; 0x28
 8002464:	2082      	movs	r0, #130	; 0x82
 8002466:	f7fe fab9 	bl	80009dc <ILI9341_Draw_Filled_Circle>

	  char counter_buff[4];
	  ILI9341_Draw_Filled_Circle(30,110, 20, RED);
 800246a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800246e:	2214      	movs	r2, #20
 8002470:	216e      	movs	r1, #110	; 0x6e
 8002472:	201e      	movs	r0, #30
 8002474:	f7fe fab2 	bl	80009dc <ILI9341_Draw_Filled_Circle>
	  ILI9341_Draw_Filled_Rectangle_Coord(60, 95, 190, 125, 0xF5F5);
 8002478:	f24f 53f5 	movw	r3, #62965	; 0xf5f5
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	237d      	movs	r3, #125	; 0x7d
 8002480:	22be      	movs	r2, #190	; 0xbe
 8002482:	215f      	movs	r1, #95	; 0x5f
 8002484:	203c      	movs	r0, #60	; 0x3c
 8002486:	f7fe fb31 	bl	8000aec <ILI9341_Draw_Filled_Rectangle_Coord>
	  ILI9341_Draw_Filled_Rectangle_Coord(60, 95, (60+(red*13)), 125, RED);
 800248a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800248e:	461a      	mov	r2, r3
 8002490:	0052      	lsls	r2, r2, #1
 8002492:	441a      	add	r2, r3
 8002494:	0092      	lsls	r2, r2, #2
 8002496:	4413      	add	r3, r2
 8002498:	b29b      	uxth	r3, r3
 800249a:	333c      	adds	r3, #60	; 0x3c
 800249c:	b29a      	uxth	r2, r3
 800249e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	237d      	movs	r3, #125	; 0x7d
 80024a6:	215f      	movs	r1, #95	; 0x5f
 80024a8:	203c      	movs	r0, #60	; 0x3c
 80024aa:	f7fe fb1f 	bl	8000aec <ILI9341_Draw_Filled_Rectangle_Coord>
	  memset(counter_buff,0,sizeof(counter_buff));
 80024ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b2:	2204      	movs	r2, #4
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 fc6e 	bl	8005d98 <memset>
	  sprintf(counter_buff, "%d%%", red*10);
 80024bc:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	461a      	mov	r2, r3
 80024ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ce:	494d      	ldr	r1, [pc, #308]	; (8002604 <main+0x6e8>)
 80024d0:	4618      	mov	r0, r3
 80024d2:	f004 fab7 	bl	8006a44 <siprintf>
	  //ILI9341_Draw_Filled_Rectangle_Coord(200, 100, 20, 20, WHITE);
	  ILI9341_Draw_Text(counter_buff, 200, 100, BLACK, 3, WHITE);
 80024d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80024da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	2303      	movs	r3, #3
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2300      	movs	r3, #0
 80024e6:	2264      	movs	r2, #100	; 0x64
 80024e8:	21c8      	movs	r1, #200	; 0xc8
 80024ea:	f7fe fbf7 	bl	8000cdc <ILI9341_Draw_Text>


	  ILI9341_Draw_Filled_Circle(30,160, 20, GREEN);
 80024ee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80024f2:	2214      	movs	r2, #20
 80024f4:	21a0      	movs	r1, #160	; 0xa0
 80024f6:	201e      	movs	r0, #30
 80024f8:	f7fe fa70 	bl	80009dc <ILI9341_Draw_Filled_Circle>
	  ILI9341_Draw_Filled_Rectangle_Coord(60, 145, 190, 175,0xB7B7);
 80024fc:	f24b 73b7 	movw	r3, #47031	; 0xb7b7
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	23af      	movs	r3, #175	; 0xaf
 8002504:	22be      	movs	r2, #190	; 0xbe
 8002506:	2191      	movs	r1, #145	; 0x91
 8002508:	203c      	movs	r0, #60	; 0x3c
 800250a:	f7fe faef 	bl	8000aec <ILI9341_Draw_Filled_Rectangle_Coord>
	  ILI9341_Draw_Filled_Rectangle_Coord(60, 145, (60+(green*13)), 175,GREEN);
 800250e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002512:	461a      	mov	r2, r3
 8002514:	0052      	lsls	r2, r2, #1
 8002516:	441a      	add	r2, r3
 8002518:	0092      	lsls	r2, r2, #2
 800251a:	4413      	add	r3, r2
 800251c:	b29b      	uxth	r3, r3
 800251e:	333c      	adds	r3, #60	; 0x3c
 8002520:	b29a      	uxth	r2, r3
 8002522:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	23af      	movs	r3, #175	; 0xaf
 800252a:	2191      	movs	r1, #145	; 0x91
 800252c:	203c      	movs	r0, #60	; 0x3c
 800252e:	f7fe fadd 	bl	8000aec <ILI9341_Draw_Filled_Rectangle_Coord>
	  memset(counter_buff,0,sizeof(counter_buff));
 8002532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002536:	2204      	movs	r2, #4
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f003 fc2c 	bl	8005d98 <memset>
	  sprintf(counter_buff, "%d%%", green*10);
 8002540:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	461a      	mov	r2, r3
 800254e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002552:	492c      	ldr	r1, [pc, #176]	; (8002604 <main+0x6e8>)
 8002554:	4618      	mov	r0, r3
 8002556:	f004 fa75 	bl	8006a44 <siprintf>
	  //ILI9341_Draw_Filled_Rectangle_Coord(200, 150, 20, 20, WHITE);
	  ILI9341_Draw_Text(counter_buff, 200, 150, BLACK, 3, WHITE);
 800255a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800255e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	2303      	movs	r3, #3
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2300      	movs	r3, #0
 800256a:	2296      	movs	r2, #150	; 0x96
 800256c:	21c8      	movs	r1, #200	; 0xc8
 800256e:	f7fe fbb5 	bl	8000cdc <ILI9341_Draw_Text>



	  ILI9341_Draw_Filled_Circle(30,210, 20, BLUE);
 8002572:	231f      	movs	r3, #31
 8002574:	2214      	movs	r2, #20
 8002576:	21d2      	movs	r1, #210	; 0xd2
 8002578:	201e      	movs	r0, #30
 800257a:	f7fe fa2f 	bl	80009dc <ILI9341_Draw_Filled_Circle>
	  ILI9341_Draw_Filled_Rectangle_Coord(60, 195, 190, 225,0x7E7E);
 800257e:	f647 637e 	movw	r3, #32382	; 0x7e7e
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	23e1      	movs	r3, #225	; 0xe1
 8002586:	22be      	movs	r2, #190	; 0xbe
 8002588:	21c3      	movs	r1, #195	; 0xc3
 800258a:	203c      	movs	r0, #60	; 0x3c
 800258c:	f7fe faae 	bl	8000aec <ILI9341_Draw_Filled_Rectangle_Coord>
	  ILI9341_Draw_Filled_Rectangle_Coord(60, 195, (60+(blue*13)), 225,BLUE);
 8002590:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002594:	461a      	mov	r2, r3
 8002596:	0052      	lsls	r2, r2, #1
 8002598:	441a      	add	r2, r3
 800259a:	0092      	lsls	r2, r2, #2
 800259c:	4413      	add	r3, r2
 800259e:	b29b      	uxth	r3, r3
 80025a0:	333c      	adds	r3, #60	; 0x3c
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	231f      	movs	r3, #31
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	23e1      	movs	r3, #225	; 0xe1
 80025aa:	21c3      	movs	r1, #195	; 0xc3
 80025ac:	203c      	movs	r0, #60	; 0x3c
 80025ae:	f7fe fa9d 	bl	8000aec <ILI9341_Draw_Filled_Rectangle_Coord>
	  memset(counter_buff,0,sizeof(counter_buff));
 80025b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b6:	2204      	movs	r2, #4
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f003 fbec 	bl	8005d98 <memset>
	  sprintf(counter_buff, "%d%%", blue*10);
 80025c0:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	461a      	mov	r2, r3
 80025ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d2:	490c      	ldr	r1, [pc, #48]	; (8002604 <main+0x6e8>)
 80025d4:	4618      	mov	r0, r3
 80025d6:	f004 fa35 	bl	8006a44 <siprintf>
	  //ILI9341_Draw_Filled_Rectangle_Coord(200, 150, 20, 20, WHITE);
	  ILI9341_Draw_Text(counter_buff, 200, 200, BLACK, 3, WHITE);
 80025da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80025de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025e2:	9301      	str	r3, [sp, #4]
 80025e4:	2303      	movs	r3, #3
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2300      	movs	r3, #0
 80025ea:	22c8      	movs	r2, #200	; 0xc8
 80025ec:	21c8      	movs	r1, #200	; 0xc8
 80025ee:	f7fe fb75 	bl	8000cdc <ILI9341_Draw_Text>
  {
 80025f2:	e4c6      	b.n	8001f82 <main+0x66>
 80025f4:	0800a4f4 	.word	0x0800a4f4
 80025f8:	0800a500 	.word	0x0800a500
 80025fc:	40020400 	.word	0x40020400
 8002600:	20000262 	.word	0x20000262
 8002604:	0800a50c 	.word	0x0800a50c

08002608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b094      	sub	sp, #80	; 0x50
 800260c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800260e:	f107 031c 	add.w	r3, r7, #28
 8002612:	2234      	movs	r2, #52	; 0x34
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f003 fbbe 	bl	8005d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800261c:	f107 0308 	add.w	r3, r7, #8
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <SystemClock_Config+0xd4>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	4a2a      	ldr	r2, [pc, #168]	; (80026dc <SystemClock_Config+0xd4>)
 8002632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002636:	6413      	str	r3, [r2, #64]	; 0x40
 8002638:	4b28      	ldr	r3, [pc, #160]	; (80026dc <SystemClock_Config+0xd4>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002644:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <SystemClock_Config+0xd8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a25      	ldr	r2, [pc, #148]	; (80026e0 <SystemClock_Config+0xd8>)
 800264a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <SystemClock_Config+0xd8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800265c:	2302      	movs	r3, #2
 800265e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002660:	2301      	movs	r3, #1
 8002662:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002664:	2310      	movs	r3, #16
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002668:	2302      	movs	r3, #2
 800266a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800266c:	2300      	movs	r3, #0
 800266e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002670:	2308      	movs	r3, #8
 8002672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 200;
 8002674:	23c8      	movs	r3, #200	; 0xc8
 8002676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002678:	2302      	movs	r3, #2
 800267a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800267c:	2309      	movs	r3, #9
 800267e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002680:	2302      	movs	r3, #2
 8002682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002684:	f107 031c 	add.w	r3, r7, #28
 8002688:	4618      	mov	r0, r3
 800268a:	f001 fc1d 	bl	8003ec8 <HAL_RCC_OscConfig>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002694:	f000 f862 	bl	800275c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002698:	f001 fbc6 	bl	8003e28 <HAL_PWREx_EnableOverDrive>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80026a2:	f000 f85b 	bl	800275c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026a6:	230f      	movs	r3, #15
 80026a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026aa:	2302      	movs	r3, #2
 80026ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80026be:	f107 0308 	add.w	r3, r7, #8
 80026c2:	2106      	movs	r1, #6
 80026c4:	4618      	mov	r0, r3
 80026c6:	f001 fead 	bl	8004424 <HAL_RCC_ClockConfig>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80026d0:	f000 f844 	bl	800275c <Error_Handler>
  }
}
 80026d4:	bf00      	nop
 80026d6:	3750      	adds	r7, #80	; 0x50
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40007000 	.word	0x40007000

080026e4 <CRC16_2>:

/* USER CODE BEGIN 4 */
uint16_t CRC16_2 (uint8_t *ptr, uint8_t length)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	70fb      	strb	r3, [r7, #3]
       uint16_t crc = 0xFFFF;
 80026f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026f4:	81fb      	strh	r3, [r7, #14]
       uint8_t s = 0x00;
 80026f6:	2300      	movs	r3, #0
 80026f8:	737b      	strb	r3, [r7, #13]
       while (length--)
 80026fa:	e023      	b.n	8002744 <CRC16_2+0x60>
       {
         crc ^= *ptr++;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	b29a      	uxth	r2, r3
 8002706:	89fb      	ldrh	r3, [r7, #14]
 8002708:	4053      	eors	r3, r2
 800270a:	81fb      	strh	r3, [r7, #14]
         for (s =0 ;s< 8; s++)
 800270c:	2300      	movs	r3, #0
 800270e:	737b      	strb	r3, [r7, #13]
 8002710:	e015      	b.n	800273e <CRC16_2+0x5a>
         {
           if ((crc & 0x01) != 0)
 8002712:	89fb      	ldrh	r3, [r7, #14]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <CRC16_2+0x4e>
           {
             crc >>= 1;
 800271c:	89fb      	ldrh	r3, [r7, #14]
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	81fb      	strh	r3, [r7, #14]
             crc ^= 0xA001;
 8002722:	89fb      	ldrh	r3, [r7, #14]
 8002724:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8002728:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 800272c:	43db      	mvns	r3, r3
 800272e:	81fb      	strh	r3, [r7, #14]
 8002730:	e002      	b.n	8002738 <CRC16_2+0x54>
           }
           else crc >>= 1;
 8002732:	89fb      	ldrh	r3, [r7, #14]
 8002734:	085b      	lsrs	r3, r3, #1
 8002736:	81fb      	strh	r3, [r7, #14]
         for (s =0 ;s< 8; s++)
 8002738:	7b7b      	ldrb	r3, [r7, #13]
 800273a:	3301      	adds	r3, #1
 800273c:	737b      	strb	r3, [r7, #13]
 800273e:	7b7b      	ldrb	r3, [r7, #13]
 8002740:	2b07      	cmp	r3, #7
 8002742:	d9e6      	bls.n	8002712 <CRC16_2+0x2e>
       while (length--)
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	1e5a      	subs	r2, r3, #1
 8002748:	70fa      	strb	r2, [r7, #3]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1d6      	bne.n	80026fc <CRC16_2+0x18>
         }

       }
       return crc;
 800274e:	89fb      	ldrh	r3, [r7, #14]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002760:	b672      	cpsid	i
}
 8002762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002764:	e7fe      	b.n	8002764 <Error_Handler+0x8>
	...

08002768 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <MX_RNG_Init+0x20>)
 800276e:	4a07      	ldr	r2, [pc, #28]	; (800278c <MX_RNG_Init+0x24>)
 8002770:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002772:	4805      	ldr	r0, [pc, #20]	; (8002788 <MX_RNG_Init+0x20>)
 8002774:	f002 fc30 	bl	8004fd8 <HAL_RNG_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800277e:	f7ff ffed 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000264 	.word	0x20000264
 800278c:	50060800 	.word	0x50060800

08002790 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b0a8      	sub	sp, #160	; 0xa0
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002798:	f107 0310 	add.w	r3, r7, #16
 800279c:	2290      	movs	r2, #144	; 0x90
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f003 faf9 	bl	8005d98 <memset>
  if(rngHandle->Instance==RNG)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a11      	ldr	r2, [pc, #68]	; (80027f0 <HAL_RNG_MspInit+0x60>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d11b      	bne.n	80027e8 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80027b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027bc:	f107 0310 	add.w	r3, r7, #16
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 ffe1 	bl	8004788 <HAL_RCCEx_PeriphCLKConfig>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80027cc:	f7ff ffc6 	bl	800275c <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80027d0:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <HAL_RNG_MspInit+0x64>)
 80027d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d4:	4a07      	ldr	r2, [pc, #28]	; (80027f4 <HAL_RNG_MspInit+0x64>)
 80027d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027da:	6353      	str	r3, [r2, #52]	; 0x34
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_RNG_MspInit+0x64>)
 80027de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80027e8:	bf00      	nop
 80027ea:	37a0      	adds	r7, #160	; 0xa0
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	50060800 	.word	0x50060800
 80027f4:	40023800 	.word	0x40023800

080027f8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <MX_SPI5_Init+0x74>)
 80027fe:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <MX_SPI5_Init+0x78>)
 8002800:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002802:	4b1a      	ldr	r3, [pc, #104]	; (800286c <MX_SPI5_Init+0x74>)
 8002804:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002808:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800280a:	4b18      	ldr	r3, [pc, #96]	; (800286c <MX_SPI5_Init+0x74>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002810:	4b16      	ldr	r3, [pc, #88]	; (800286c <MX_SPI5_Init+0x74>)
 8002812:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002816:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002818:	4b14      	ldr	r3, [pc, #80]	; (800286c <MX_SPI5_Init+0x74>)
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800281e:	4b13      	ldr	r3, [pc, #76]	; (800286c <MX_SPI5_Init+0x74>)
 8002820:	2200      	movs	r2, #0
 8002822:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <MX_SPI5_Init+0x74>)
 8002826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800282a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <MX_SPI5_Init+0x74>)
 800282e:	2200      	movs	r2, #0
 8002830:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002832:	4b0e      	ldr	r3, [pc, #56]	; (800286c <MX_SPI5_Init+0x74>)
 8002834:	2200      	movs	r2, #0
 8002836:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <MX_SPI5_Init+0x74>)
 800283a:	2200      	movs	r2, #0
 800283c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800283e:	4b0b      	ldr	r3, [pc, #44]	; (800286c <MX_SPI5_Init+0x74>)
 8002840:	2200      	movs	r2, #0
 8002842:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <MX_SPI5_Init+0x74>)
 8002846:	2207      	movs	r2, #7
 8002848:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <MX_SPI5_Init+0x74>)
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <MX_SPI5_Init+0x74>)
 8002852:	2200      	movs	r2, #0
 8002854:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002856:	4805      	ldr	r0, [pc, #20]	; (800286c <MX_SPI5_Init+0x74>)
 8002858:	f002 fbe8 	bl	800502c <HAL_SPI_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8002862:	f7ff ff7b 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000274 	.word	0x20000274
 8002870:	40015000 	.word	0x40015000

08002874 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a17      	ldr	r2, [pc, #92]	; (80028f0 <HAL_SPI_MspInit+0x7c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d128      	bne.n	80028e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002896:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <HAL_SPI_MspInit+0x80>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	4a16      	ldr	r2, [pc, #88]	; (80028f4 <HAL_SPI_MspInit+0x80>)
 800289c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028a0:	6453      	str	r3, [r2, #68]	; 0x44
 80028a2:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <HAL_SPI_MspInit+0x80>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <HAL_SPI_MspInit+0x80>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a10      	ldr	r2, [pc, #64]	; (80028f4 <HAL_SPI_MspInit+0x80>)
 80028b4:	f043 0320 	orr.w	r3, r3, #32
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <HAL_SPI_MspInit+0x80>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0320 	and.w	r3, r3, #32
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80028c6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80028ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d4:	2303      	movs	r3, #3
 80028d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80028d8:	2305      	movs	r3, #5
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	4619      	mov	r1, r3
 80028e2:	4805      	ldr	r0, [pc, #20]	; (80028f8 <HAL_SPI_MspInit+0x84>)
 80028e4:	f000 fb44 	bl	8002f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80028e8:	bf00      	nop
 80028ea:	3728      	adds	r7, #40	; 0x28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40015000 	.word	0x40015000
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40021400 	.word	0x40021400

080028fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <HAL_MspInit+0x44>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <HAL_MspInit+0x44>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290c:	6413      	str	r3, [r2, #64]	; 0x40
 800290e:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <HAL_MspInit+0x44>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_MspInit+0x44>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	4a08      	ldr	r2, [pc, #32]	; (8002940 <HAL_MspInit+0x44>)
 8002920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002924:	6453      	str	r3, [r2, #68]	; 0x44
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_MspInit+0x44>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800

08002944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002948:	e7fe      	b.n	8002948 <NMI_Handler+0x4>

0800294a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800294e:	e7fe      	b.n	800294e <HardFault_Handler+0x4>

08002950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <MemManage_Handler+0x4>

08002956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800295a:	e7fe      	b.n	800295a <BusFault_Handler+0x4>

0800295c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002960:	e7fe      	b.n	8002960 <UsageFault_Handler+0x4>

08002962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002990:	f000 f9c4 	bl	8002d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}

08002998 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return 1;
 800299c:	2301      	movs	r3, #1
}
 800299e:	4618      	mov	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <_kill>:

int _kill(int pid, int sig)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029b2:	f003 f9c7 	bl	8005d44 <__errno>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2216      	movs	r2, #22
 80029ba:	601a      	str	r2, [r3, #0]
  return -1;
 80029bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <_exit>:

void _exit (int status)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029d0:	f04f 31ff 	mov.w	r1, #4294967295
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff ffe7 	bl	80029a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029da:	e7fe      	b.n	80029da <_exit+0x12>

080029dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	e00a      	b.n	8002a04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029ee:	f3af 8000 	nop.w
 80029f2:	4601      	mov	r1, r0
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	60ba      	str	r2, [r7, #8]
 80029fa:	b2ca      	uxtb	r2, r1
 80029fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3301      	adds	r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	dbf0      	blt.n	80029ee <_read+0x12>
  }

  return len;
 8002a0c:	687b      	ldr	r3, [r7, #4]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	e009      	b.n	8002a3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	60ba      	str	r2, [r7, #8]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	dbf1      	blt.n	8002a28 <_write+0x12>
  }
  return len;
 8002a44:	687b      	ldr	r3, [r7, #4]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <_close>:

int _close(int file)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a76:	605a      	str	r2, [r3, #4]
  return 0;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <_isatty>:

int _isatty(int file)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a8e:	2301      	movs	r3, #1
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ac0:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <_sbrk+0x5c>)
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <_sbrk+0x60>)
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002acc:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <_sbrk+0x64>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <_sbrk+0x64>)
 8002ad6:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <_sbrk+0x68>)
 8002ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <_sbrk+0x64>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d207      	bcs.n	8002af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ae8:	f003 f92c 	bl	8005d44 <__errno>
 8002aec:	4603      	mov	r3, r0
 8002aee:	220c      	movs	r2, #12
 8002af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002af2:	f04f 33ff 	mov.w	r3, #4294967295
 8002af6:	e009      	b.n	8002b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <_sbrk+0x64>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002afe:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <_sbrk+0x64>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	4a05      	ldr	r2, [pc, #20]	; (8002b1c <_sbrk+0x64>)
 8002b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20080000 	.word	0x20080000
 8002b18:	00000400 	.word	0x00000400
 8002b1c:	200002d8 	.word	0x200002d8
 8002b20:	20000340 	.word	0x20000340

08002b24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <SystemInit+0x20>)
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2e:	4a05      	ldr	r2, [pc, #20]	; (8002b44 <SystemInit+0x20>)
 8002b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b4e:	f107 0310 	add.w	r3, r7, #16
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	605a      	str	r2, [r3, #4]
 8002b58:	609a      	str	r2, [r3, #8]
 8002b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <MX_TIM1_Init+0xa0>)
 8002b68:	4a20      	ldr	r2, [pc, #128]	; (8002bec <MX_TIM1_Init+0xa4>)
 8002b6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 8002b6c:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <MX_TIM1_Init+0xa0>)
 8002b6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b74:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <MX_TIM1_Init+0xa0>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8002b7a:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <MX_TIM1_Init+0xa0>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002b80:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <MX_TIM1_Init+0xa0>)
 8002b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b88:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <MX_TIM1_Init+0xa0>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b8e:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <MX_TIM1_Init+0xa0>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b94:	4814      	ldr	r0, [pc, #80]	; (8002be8 <MX_TIM1_Init+0xa0>)
 8002b96:	f002 fdeb 	bl	8005770 <HAL_TIM_Base_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002ba0:	f7ff fddc 	bl	800275c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002baa:	f107 0310 	add.w	r3, r7, #16
 8002bae:	4619      	mov	r1, r3
 8002bb0:	480d      	ldr	r0, [pc, #52]	; (8002be8 <MX_TIM1_Init+0xa0>)
 8002bb2:	f002 fe35 	bl	8005820 <HAL_TIM_ConfigClockSource>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002bbc:	f7ff fdce 	bl	800275c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4805      	ldr	r0, [pc, #20]	; (8002be8 <MX_TIM1_Init+0xa0>)
 8002bd2:	f003 f829 	bl	8005c28 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002bdc:	f7ff fdbe 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002be0:	bf00      	nop
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	200002dc 	.word	0x200002dc
 8002bec:	40010000 	.word	0x40010000

08002bf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <HAL_TIM_Base_MspInit+0x38>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d10b      	bne.n	8002c1a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c02:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <HAL_TIM_Base_MspInit+0x3c>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <HAL_TIM_Base_MspInit+0x3c>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c0e:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <HAL_TIM_Base_MspInit+0x3c>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40010000 	.word	0x40010000
 8002c2c:	40023800 	.word	0x40023800

08002c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c34:	480d      	ldr	r0, [pc, #52]	; (8002c6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c36:	490e      	ldr	r1, [pc, #56]	; (8002c70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c38:	4a0e      	ldr	r2, [pc, #56]	; (8002c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c3c:	e002      	b.n	8002c44 <LoopCopyDataInit>

08002c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c42:	3304      	adds	r3, #4

08002c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c48:	d3f9      	bcc.n	8002c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c4a:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c4c:	4c0b      	ldr	r4, [pc, #44]	; (8002c7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c50:	e001      	b.n	8002c56 <LoopFillZerobss>

08002c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c54:	3204      	adds	r2, #4

08002c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c58:	d3fb      	bcc.n	8002c52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c5a:	f7ff ff63 	bl	8002b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c5e:	f003 f877 	bl	8005d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c62:	f7ff f95b 	bl	8001f1c <main>
  bx  lr    
 8002c66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c68:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c70:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002c74:	0803041c 	.word	0x0803041c
  ldr r2, =_sbss
 8002c78:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002c7c:	2000033c 	.word	0x2000033c

08002c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c80:	e7fe      	b.n	8002c80 <ADC_IRQHandler>
	...

08002c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_Init+0x34>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <HAL_Init+0x34>)
 8002c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c92:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_Init+0x34>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <HAL_Init+0x34>)
 8002c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca0:	2003      	movs	r0, #3
 8002ca2:	f000 f931 	bl	8002f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ca6:	200f      	movs	r0, #15
 8002ca8:	f000 f808 	bl	8002cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cac:	f7ff fe26 	bl	80028fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023c00 	.word	0x40023c00

08002cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_InitTick+0x54>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_InitTick+0x58>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f93b 	bl	8002f56 <HAL_SYSTICK_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00e      	b.n	8002d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b0f      	cmp	r3, #15
 8002cee:	d80a      	bhi.n	8002d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf8:	f000 f911 	bl	8002f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cfc:	4a06      	ldr	r2, [pc, #24]	; (8002d18 <HAL_InitTick+0x5c>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	2000000c 	.word	0x2000000c
 8002d14:	20000014 	.word	0x20000014
 8002d18:	20000010 	.word	0x20000010

08002d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_IncTick+0x20>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_IncTick+0x24>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <HAL_IncTick+0x24>)
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20000014 	.word	0x20000014
 8002d40:	20000328 	.word	0x20000328

08002d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return uwTick;
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <HAL_GetTick+0x14>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20000328 	.word	0x20000328

08002d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d64:	f7ff ffee 	bl	8002d44 <HAL_GetTick>
 8002d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d005      	beq.n	8002d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_Delay+0x44>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4413      	add	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d82:	bf00      	nop
 8002d84:	f7ff ffde 	bl	8002d44 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d8f7      	bhi.n	8002d84 <HAL_Delay+0x28>
  {
  }
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000014 	.word	0x20000014

08002da4 <__NVIC_SetPriorityGrouping>:
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <__NVIC_SetPriorityGrouping+0x40>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dd2:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <__NVIC_SetPriorityGrouping+0x40>)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	60d3      	str	r3, [r2, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000ed00 	.word	0xe000ed00
 8002de8:	05fa0000 	.word	0x05fa0000

08002dec <__NVIC_GetPriorityGrouping>:
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <__NVIC_GetPriorityGrouping+0x18>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	f003 0307 	and.w	r3, r3, #7
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_SetPriority>:
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	6039      	str	r1, [r7, #0]
 8002e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	db0a      	blt.n	8002e32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	490c      	ldr	r1, [pc, #48]	; (8002e54 <__NVIC_SetPriority+0x4c>)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	0112      	lsls	r2, r2, #4
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e30:	e00a      	b.n	8002e48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4908      	ldr	r1, [pc, #32]	; (8002e58 <__NVIC_SetPriority+0x50>)
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	3b04      	subs	r3, #4
 8002e40:	0112      	lsls	r2, r2, #4
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	440b      	add	r3, r1
 8002e46:	761a      	strb	r2, [r3, #24]
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000e100 	.word	0xe000e100
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <NVIC_EncodePriority>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b089      	sub	sp, #36	; 0x24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f1c3 0307 	rsb	r3, r3, #7
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	bf28      	it	cs
 8002e7a:	2304      	movcs	r3, #4
 8002e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3304      	adds	r3, #4
 8002e82:	2b06      	cmp	r3, #6
 8002e84:	d902      	bls.n	8002e8c <NVIC_EncodePriority+0x30>
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3b03      	subs	r3, #3
 8002e8a:	e000      	b.n	8002e8e <NVIC_EncodePriority+0x32>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	f04f 32ff 	mov.w	r2, #4294967295
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	43d9      	mvns	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb4:	4313      	orrs	r3, r2
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3724      	adds	r7, #36	; 0x24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ed4:	d301      	bcc.n	8002eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e00f      	b.n	8002efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eda:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <SysTick_Config+0x40>)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ee2:	210f      	movs	r1, #15
 8002ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee8:	f7ff ff8e 	bl	8002e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <SysTick_Config+0x40>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ef2:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <SysTick_Config+0x40>)
 8002ef4:	2207      	movs	r2, #7
 8002ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	e000e010 	.word	0xe000e010

08002f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff ff47 	bl	8002da4 <__NVIC_SetPriorityGrouping>
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b086      	sub	sp, #24
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	4603      	mov	r3, r0
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f30:	f7ff ff5c 	bl	8002dec <__NVIC_GetPriorityGrouping>
 8002f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68b9      	ldr	r1, [r7, #8]
 8002f3a:	6978      	ldr	r0, [r7, #20]
 8002f3c:	f7ff ff8e 	bl	8002e5c <NVIC_EncodePriority>
 8002f40:	4602      	mov	r2, r0
 8002f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff ff5d 	bl	8002e08 <__NVIC_SetPriority>
}
 8002f4e:	bf00      	nop
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff ffb0 	bl	8002ec4 <SysTick_Config>
 8002f64:	4603      	mov	r3, r0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	; 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	e175      	b.n	800327c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f90:	2201      	movs	r2, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	f040 8164 	bne.w	8003276 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d005      	beq.n	8002fc6 <HAL_GPIO_Init+0x56>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d130      	bne.n	8003028 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 0201 	and.w	r2, r3, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b03      	cmp	r3, #3
 8003032:	d017      	beq.n	8003064 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d123      	bne.n	80030b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	08da      	lsrs	r2, r3, #3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3208      	adds	r2, #8
 8003078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	220f      	movs	r2, #15
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	08da      	lsrs	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3208      	adds	r2, #8
 80030b2:	69b9      	ldr	r1, [r7, #24]
 80030b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	2203      	movs	r2, #3
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0203 	and.w	r2, r3, #3
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80be 	beq.w	8003276 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fa:	4b66      	ldr	r3, [pc, #408]	; (8003294 <HAL_GPIO_Init+0x324>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	4a65      	ldr	r2, [pc, #404]	; (8003294 <HAL_GPIO_Init+0x324>)
 8003100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003104:	6453      	str	r3, [r2, #68]	; 0x44
 8003106:	4b63      	ldr	r3, [pc, #396]	; (8003294 <HAL_GPIO_Init+0x324>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003112:	4a61      	ldr	r2, [pc, #388]	; (8003298 <HAL_GPIO_Init+0x328>)
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	3302      	adds	r3, #2
 800311a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	220f      	movs	r2, #15
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a58      	ldr	r2, [pc, #352]	; (800329c <HAL_GPIO_Init+0x32c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d037      	beq.n	80031ae <HAL_GPIO_Init+0x23e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a57      	ldr	r2, [pc, #348]	; (80032a0 <HAL_GPIO_Init+0x330>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d031      	beq.n	80031aa <HAL_GPIO_Init+0x23a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a56      	ldr	r2, [pc, #344]	; (80032a4 <HAL_GPIO_Init+0x334>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d02b      	beq.n	80031a6 <HAL_GPIO_Init+0x236>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a55      	ldr	r2, [pc, #340]	; (80032a8 <HAL_GPIO_Init+0x338>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d025      	beq.n	80031a2 <HAL_GPIO_Init+0x232>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a54      	ldr	r2, [pc, #336]	; (80032ac <HAL_GPIO_Init+0x33c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d01f      	beq.n	800319e <HAL_GPIO_Init+0x22e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a53      	ldr	r2, [pc, #332]	; (80032b0 <HAL_GPIO_Init+0x340>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d019      	beq.n	800319a <HAL_GPIO_Init+0x22a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a52      	ldr	r2, [pc, #328]	; (80032b4 <HAL_GPIO_Init+0x344>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <HAL_GPIO_Init+0x226>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a51      	ldr	r2, [pc, #324]	; (80032b8 <HAL_GPIO_Init+0x348>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00d      	beq.n	8003192 <HAL_GPIO_Init+0x222>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a50      	ldr	r2, [pc, #320]	; (80032bc <HAL_GPIO_Init+0x34c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d007      	beq.n	800318e <HAL_GPIO_Init+0x21e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a4f      	ldr	r2, [pc, #316]	; (80032c0 <HAL_GPIO_Init+0x350>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d101      	bne.n	800318a <HAL_GPIO_Init+0x21a>
 8003186:	2309      	movs	r3, #9
 8003188:	e012      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 800318a:	230a      	movs	r3, #10
 800318c:	e010      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 800318e:	2308      	movs	r3, #8
 8003190:	e00e      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 8003192:	2307      	movs	r3, #7
 8003194:	e00c      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 8003196:	2306      	movs	r3, #6
 8003198:	e00a      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 800319a:	2305      	movs	r3, #5
 800319c:	e008      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 800319e:	2304      	movs	r3, #4
 80031a0:	e006      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 80031a2:	2303      	movs	r3, #3
 80031a4:	e004      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e002      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 80031ae:	2300      	movs	r3, #0
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	f002 0203 	and.w	r2, r2, #3
 80031b6:	0092      	lsls	r2, r2, #2
 80031b8:	4093      	lsls	r3, r2
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031c0:	4935      	ldr	r1, [pc, #212]	; (8003298 <HAL_GPIO_Init+0x328>)
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	089b      	lsrs	r3, r3, #2
 80031c6:	3302      	adds	r3, #2
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ce:	4b3d      	ldr	r3, [pc, #244]	; (80032c4 <HAL_GPIO_Init+0x354>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031f2:	4a34      	ldr	r2, [pc, #208]	; (80032c4 <HAL_GPIO_Init+0x354>)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f8:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <HAL_GPIO_Init+0x354>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800321c:	4a29      	ldr	r2, [pc, #164]	; (80032c4 <HAL_GPIO_Init+0x354>)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003222:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <HAL_GPIO_Init+0x354>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003246:	4a1f      	ldr	r2, [pc, #124]	; (80032c4 <HAL_GPIO_Init+0x354>)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800324c:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <HAL_GPIO_Init+0x354>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003270:	4a14      	ldr	r2, [pc, #80]	; (80032c4 <HAL_GPIO_Init+0x354>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	3301      	adds	r3, #1
 800327a:	61fb      	str	r3, [r7, #28]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	2b0f      	cmp	r3, #15
 8003280:	f67f ae86 	bls.w	8002f90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003284:	bf00      	nop
 8003286:	bf00      	nop
 8003288:	3724      	adds	r7, #36	; 0x24
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800
 8003298:	40013800 	.word	0x40013800
 800329c:	40020000 	.word	0x40020000
 80032a0:	40020400 	.word	0x40020400
 80032a4:	40020800 	.word	0x40020800
 80032a8:	40020c00 	.word	0x40020c00
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40021400 	.word	0x40021400
 80032b4:	40021800 	.word	0x40021800
 80032b8:	40021c00 	.word	0x40021c00
 80032bc:	40022000 	.word	0x40022000
 80032c0:	40022400 	.word	0x40022400
 80032c4:	40013c00 	.word	0x40013c00

080032c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	887b      	ldrh	r3, [r7, #2]
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	e001      	b.n	80032ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	807b      	strh	r3, [r7, #2]
 8003304:	4613      	mov	r3, r2
 8003306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003308:	787b      	ldrb	r3, [r7, #1]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800330e:	887a      	ldrh	r2, [r7, #2]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003314:	e003      	b.n	800331e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003316:	887b      	ldrh	r3, [r7, #2]
 8003318:	041a      	lsls	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	619a      	str	r2, [r3, #24]
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e07f      	b.n	800343e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fe fd18 	bl	8001d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2224      	movs	r2, #36	; 0x24
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0201 	bic.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800337c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800338c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d107      	bne.n	80033a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	e006      	b.n	80033b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d104      	bne.n	80033c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6859      	ldr	r1, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_I2C_Init+0x11c>)
 80033d2:	430b      	orrs	r3, r1
 80033d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69d9      	ldr	r1, [r3, #28]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1a      	ldr	r2, [r3, #32]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	02008000 	.word	0x02008000

0800344c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af02      	add	r7, sp, #8
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	461a      	mov	r2, r3
 8003458:	460b      	mov	r3, r1
 800345a:	817b      	strh	r3, [r7, #10]
 800345c:	4613      	mov	r3, r2
 800345e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b20      	cmp	r3, #32
 800346a:	f040 80da 	bne.w	8003622 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_I2C_Master_Transmit+0x30>
 8003478:	2302      	movs	r3, #2
 800347a:	e0d3      	b.n	8003624 <HAL_I2C_Master_Transmit+0x1d8>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003484:	f7ff fc5e 	bl	8002d44 <HAL_GetTick>
 8003488:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	2319      	movs	r3, #25
 8003490:	2201      	movs	r2, #1
 8003492:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f9e6 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e0be      	b.n	8003624 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2221      	movs	r2, #33	; 0x21
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2210      	movs	r2, #16
 80034b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	893a      	ldrh	r2, [r7, #8]
 80034c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2bff      	cmp	r3, #255	; 0xff
 80034d6:	d90e      	bls.n	80034f6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	22ff      	movs	r2, #255	; 0xff
 80034dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	8979      	ldrh	r1, [r7, #10]
 80034e6:	4b51      	ldr	r3, [pc, #324]	; (800362c <HAL_I2C_Master_Transmit+0x1e0>)
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 fbd0 	bl	8003c94 <I2C_TransferConfig>
 80034f4:	e06c      	b.n	80035d0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003504:	b2da      	uxtb	r2, r3
 8003506:	8979      	ldrh	r1, [r7, #10]
 8003508:	4b48      	ldr	r3, [pc, #288]	; (800362c <HAL_I2C_Master_Transmit+0x1e0>)
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 fbbf 	bl	8003c94 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003516:	e05b      	b.n	80035d0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	6a39      	ldr	r1, [r7, #32]
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f9e3 	bl	80038e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e07b      	b.n	8003624 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	781a      	ldrb	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d034      	beq.n	80035d0 <HAL_I2C_Master_Transmit+0x184>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356a:	2b00      	cmp	r3, #0
 800356c:	d130      	bne.n	80035d0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	2200      	movs	r2, #0
 8003576:	2180      	movs	r1, #128	; 0x80
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f975 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e04d      	b.n	8003624 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358c:	b29b      	uxth	r3, r3
 800358e:	2bff      	cmp	r3, #255	; 0xff
 8003590:	d90e      	bls.n	80035b0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	22ff      	movs	r2, #255	; 0xff
 8003596:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359c:	b2da      	uxtb	r2, r3
 800359e:	8979      	ldrh	r1, [r7, #10]
 80035a0:	2300      	movs	r3, #0
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 fb73 	bl	8003c94 <I2C_TransferConfig>
 80035ae:	e00f      	b.n	80035d0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	8979      	ldrh	r1, [r7, #10]
 80035c2:	2300      	movs	r3, #0
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 fb62 	bl	8003c94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d19e      	bne.n	8003518 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	6a39      	ldr	r1, [r7, #32]
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f9c2 	bl	8003968 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e01a      	b.n	8003624 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2220      	movs	r2, #32
 80035f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_I2C_Master_Transmit+0x1e4>)
 8003602:	400b      	ands	r3, r1
 8003604:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e000      	b.n	8003624 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003622:	2302      	movs	r3, #2
  }
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	80002000 	.word	0x80002000
 8003630:	fe00e800 	.word	0xfe00e800

08003634 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af02      	add	r7, sp, #8
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	461a      	mov	r2, r3
 8003640:	460b      	mov	r3, r1
 8003642:	817b      	strh	r3, [r7, #10]
 8003644:	4613      	mov	r3, r2
 8003646:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b20      	cmp	r3, #32
 8003652:	f040 80db 	bne.w	800380c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_I2C_Master_Receive+0x30>
 8003660:	2302      	movs	r3, #2
 8003662:	e0d4      	b.n	800380e <HAL_I2C_Master_Receive+0x1da>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800366c:	f7ff fb6a 	bl	8002d44 <HAL_GetTick>
 8003670:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	2319      	movs	r3, #25
 8003678:	2201      	movs	r2, #1
 800367a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f8f2 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e0bf      	b.n	800380e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2222      	movs	r2, #34	; 0x22
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2210      	movs	r2, #16
 800369a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	893a      	ldrh	r2, [r7, #8]
 80036ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2bff      	cmp	r3, #255	; 0xff
 80036be:	d90e      	bls.n	80036de <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	22ff      	movs	r2, #255	; 0xff
 80036c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	8979      	ldrh	r1, [r7, #10]
 80036ce:	4b52      	ldr	r3, [pc, #328]	; (8003818 <HAL_I2C_Master_Receive+0x1e4>)
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fadc 	bl	8003c94 <I2C_TransferConfig>
 80036dc:	e06d      	b.n	80037ba <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	8979      	ldrh	r1, [r7, #10]
 80036f0:	4b49      	ldr	r3, [pc, #292]	; (8003818 <HAL_I2C_Master_Receive+0x1e4>)
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 facb 	bl	8003c94 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80036fe:	e05c      	b.n	80037ba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	6a39      	ldr	r1, [r7, #32]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f96b 	bl	80039e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e07c      	b.n	800380e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d034      	beq.n	80037ba <HAL_I2C_Master_Receive+0x186>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003754:	2b00      	cmp	r3, #0
 8003756:	d130      	bne.n	80037ba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	2200      	movs	r2, #0
 8003760:	2180      	movs	r1, #128	; 0x80
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f880 	bl	8003868 <I2C_WaitOnFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e04d      	b.n	800380e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	2bff      	cmp	r3, #255	; 0xff
 800377a:	d90e      	bls.n	800379a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	22ff      	movs	r2, #255	; 0xff
 8003780:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	b2da      	uxtb	r2, r3
 8003788:	8979      	ldrh	r1, [r7, #10]
 800378a:	2300      	movs	r3, #0
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 fa7e 	bl	8003c94 <I2C_TransferConfig>
 8003798:	e00f      	b.n	80037ba <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	8979      	ldrh	r1, [r7, #10]
 80037ac:	2300      	movs	r3, #0
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 fa6d 	bl	8003c94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d19d      	bne.n	8003700 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	6a39      	ldr	r1, [r7, #32]
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f8cd 	bl	8003968 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e01a      	b.n	800380e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2220      	movs	r2, #32
 80037de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	4b0c      	ldr	r3, [pc, #48]	; (800381c <HAL_I2C_Master_Receive+0x1e8>)
 80037ec:	400b      	ands	r3, r1
 80037ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	e000      	b.n	800380e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
  }
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	80002400 	.word	0x80002400
 800381c:	fe00e800 	.word	0xfe00e800

08003820 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b02      	cmp	r3, #2
 8003834:	d103      	bne.n	800383e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2200      	movs	r2, #0
 800383c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b01      	cmp	r3, #1
 800384a:	d007      	beq.n	800385c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	619a      	str	r2, [r3, #24]
  }
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	4613      	mov	r3, r2
 8003876:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003878:	e022      	b.n	80038c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d01e      	beq.n	80038c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003882:	f7ff fa5f 	bl	8002d44 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d302      	bcc.n	8003898 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d113      	bne.n	80038c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	f043 0220 	orr.w	r2, r3, #32
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e00f      	b.n	80038e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4013      	ands	r3, r2
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	bf0c      	ite	eq
 80038d0:	2301      	moveq	r3, #1
 80038d2:	2300      	movne	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d0cd      	beq.n	800387a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038f4:	e02c      	b.n	8003950 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f8ea 	bl	8003ad4 <I2C_IsErrorOccurred>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e02a      	b.n	8003960 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d01e      	beq.n	8003950 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003912:	f7ff fa17 	bl	8002d44 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	429a      	cmp	r2, r3
 8003920:	d302      	bcc.n	8003928 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d113      	bne.n	8003950 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392c:	f043 0220 	orr.w	r2, r3, #32
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e007      	b.n	8003960 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b02      	cmp	r3, #2
 800395c:	d1cb      	bne.n	80038f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003974:	e028      	b.n	80039c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f8aa 	bl	8003ad4 <I2C_IsErrorOccurred>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e026      	b.n	80039d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398a:	f7ff f9db 	bl	8002d44 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	429a      	cmp	r2, r3
 8003998:	d302      	bcc.n	80039a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d113      	bne.n	80039c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a4:	f043 0220 	orr.w	r2, r3, #32
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e007      	b.n	80039d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d1cf      	bne.n	8003976 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039ec:	e064      	b.n	8003ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f86e 	bl	8003ad4 <I2C_IsErrorOccurred>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e062      	b.n	8003ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d138      	bne.n	8003a82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d105      	bne.n	8003a2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e04e      	b.n	8003ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b10      	cmp	r3, #16
 8003a36:	d107      	bne.n	8003a48 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2204      	movs	r2, #4
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
 8003a46:	e002      	b.n	8003a4e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2220      	movs	r2, #32
 8003a54:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6859      	ldr	r1, [r3, #4]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003a62:	400b      	ands	r3, r1
 8003a64:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e022      	b.n	8003ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a82:	f7ff f95f 	bl	8002d44 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d302      	bcc.n	8003a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10f      	bne.n	8003ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9c:	f043 0220 	orr.w	r2, r3, #32
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e007      	b.n	8003ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d193      	bne.n	80039ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	fe00e800 	.word	0xfe00e800

08003ad4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	; 0x28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d068      	beq.n	8003bd2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2210      	movs	r2, #16
 8003b06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b08:	e049      	b.n	8003b9e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b10:	d045      	beq.n	8003b9e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b12:	f7ff f917 	bl	8002d44 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d302      	bcc.n	8003b28 <I2C_IsErrorOccurred+0x54>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d13a      	bne.n	8003b9e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b4a:	d121      	bne.n	8003b90 <I2C_IsErrorOccurred+0xbc>
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b52:	d01d      	beq.n	8003b90 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
 8003b56:	2b20      	cmp	r3, #32
 8003b58:	d01a      	beq.n	8003b90 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b6a:	f7ff f8eb 	bl	8002d44 <HAL_GetTick>
 8003b6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b70:	e00e      	b.n	8003b90 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003b72:	f7ff f8e7 	bl	8002d44 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b19      	cmp	r3, #25
 8003b7e:	d907      	bls.n	8003b90 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	f043 0320 	orr.w	r3, r3, #32
 8003b86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003b8e:	e006      	b.n	8003b9e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d1e9      	bne.n	8003b72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d003      	beq.n	8003bb4 <I2C_IsErrorOccurred+0xe0>
 8003bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0aa      	beq.n	8003b0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d103      	bne.n	8003bc4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	f043 0304 	orr.w	r3, r3, #4
 8003bca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00b      	beq.n	8003bfc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00b      	beq.n	8003c1e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	f043 0308 	orr.w	r3, r3, #8
 8003c0c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00b      	beq.n	8003c40 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	f043 0302 	orr.w	r3, r3, #2
 8003c2e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01c      	beq.n	8003c82 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f7ff fde9 	bl	8003820 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b0d      	ldr	r3, [pc, #52]	; (8003c90 <I2C_IsErrorOccurred+0x1bc>)
 8003c5a:	400b      	ands	r3, r1
 8003c5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	431a      	orrs	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3728      	adds	r7, #40	; 0x28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	fe00e800 	.word	0xfe00e800

08003c94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	607b      	str	r3, [r7, #4]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	817b      	strh	r3, [r7, #10]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ca6:	897b      	ldrh	r3, [r7, #10]
 8003ca8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cac:	7a7b      	ldrb	r3, [r7, #9]
 8003cae:	041b      	lsls	r3, r3, #16
 8003cb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cb4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cc2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	0d5b      	lsrs	r3, r3, #21
 8003cce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003cd2:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <I2C_TransferConfig+0x60>)
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	ea02 0103 	and.w	r1, r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	03ff63ff 	.word	0x03ff63ff

08003cf8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d138      	bne.n	8003d80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e032      	b.n	8003d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2224      	movs	r2, #36	; 0x24
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0201 	bic.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6819      	ldr	r1, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e000      	b.n	8003d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d80:	2302      	movs	r3, #2
  }
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b085      	sub	sp, #20
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d139      	bne.n	8003e18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e033      	b.n	8003e1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2224      	movs	r2, #36	; 0x24
 8003dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0201 	bic.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003de0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	021b      	lsls	r3, r3, #8
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	e000      	b.n	8003e1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e18:	2302      	movs	r3, #2
  }
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
	...

08003e28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e32:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	4a22      	ldr	r2, [pc, #136]	; (8003ec0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e3e:	4b20      	ldr	r3, [pc, #128]	; (8003ec0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1d      	ldr	r2, [pc, #116]	; (8003ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e54:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e56:	f7fe ff75 	bl	8002d44 <HAL_GetTick>
 8003e5a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e5c:	e009      	b.n	8003e72 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e5e:	f7fe ff71 	bl	8002d44 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e6c:	d901      	bls.n	8003e72 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e022      	b.n	8003eb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e72:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e7e:	d1ee      	bne.n	8003e5e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e80:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a0f      	ldr	r2, [pc, #60]	; (8003ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e8c:	f7fe ff5a 	bl	8002d44 <HAL_GetTick>
 8003e90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e92:	e009      	b.n	8003ea8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e94:	f7fe ff56 	bl	8002d44 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ea2:	d901      	bls.n	8003ea8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e007      	b.n	8003eb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ea8:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eb4:	d1ee      	bne.n	8003e94 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	40007000 	.word	0x40007000

08003ec8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e29b      	b.n	8004416 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 8087 	beq.w	8003ffa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003eec:	4b96      	ldr	r3, [pc, #600]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 030c 	and.w	r3, r3, #12
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d00c      	beq.n	8003f12 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ef8:	4b93      	ldr	r3, [pc, #588]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 030c 	and.w	r3, r3, #12
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d112      	bne.n	8003f2a <HAL_RCC_OscConfig+0x62>
 8003f04:	4b90      	ldr	r3, [pc, #576]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f10:	d10b      	bne.n	8003f2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f12:	4b8d      	ldr	r3, [pc, #564]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d06c      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x130>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d168      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e275      	b.n	8004416 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f32:	d106      	bne.n	8003f42 <HAL_RCC_OscConfig+0x7a>
 8003f34:	4b84      	ldr	r3, [pc, #528]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a83      	ldr	r2, [pc, #524]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	e02e      	b.n	8003fa0 <HAL_RCC_OscConfig+0xd8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCC_OscConfig+0x9c>
 8003f4a:	4b7f      	ldr	r3, [pc, #508]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a7e      	ldr	r2, [pc, #504]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	4b7c      	ldr	r3, [pc, #496]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a7b      	ldr	r2, [pc, #492]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003f5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e01d      	b.n	8003fa0 <HAL_RCC_OscConfig+0xd8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f6c:	d10c      	bne.n	8003f88 <HAL_RCC_OscConfig+0xc0>
 8003f6e:	4b76      	ldr	r3, [pc, #472]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a75      	ldr	r2, [pc, #468]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	4b73      	ldr	r3, [pc, #460]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a72      	ldr	r2, [pc, #456]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e00b      	b.n	8003fa0 <HAL_RCC_OscConfig+0xd8>
 8003f88:	4b6f      	ldr	r3, [pc, #444]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a6e      	ldr	r2, [pc, #440]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	4b6c      	ldr	r3, [pc, #432]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a6b      	ldr	r2, [pc, #428]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d013      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fe fecc 	bl	8002d44 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7fe fec8 	bl	8002d44 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	; 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e229      	b.n	8004416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	4b61      	ldr	r3, [pc, #388]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0xe8>
 8003fce:	e014      	b.n	8003ffa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fe feb8 	bl	8002d44 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd8:	f7fe feb4 	bl	8002d44 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b64      	cmp	r3, #100	; 0x64
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e215      	b.n	8004416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fea:	4b57      	ldr	r3, [pc, #348]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x110>
 8003ff6:	e000      	b.n	8003ffa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d069      	beq.n	80040da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004006:	4b50      	ldr	r3, [pc, #320]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 030c 	and.w	r3, r3, #12
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00b      	beq.n	800402a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004012:	4b4d      	ldr	r3, [pc, #308]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b08      	cmp	r3, #8
 800401c:	d11c      	bne.n	8004058 <HAL_RCC_OscConfig+0x190>
 800401e:	4b4a      	ldr	r3, [pc, #296]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d116      	bne.n	8004058 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402a:	4b47      	ldr	r3, [pc, #284]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <HAL_RCC_OscConfig+0x17a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d001      	beq.n	8004042 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e1e9      	b.n	8004416 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004042:	4b41      	ldr	r3, [pc, #260]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	493d      	ldr	r1, [pc, #244]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8004052:	4313      	orrs	r3, r2
 8004054:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004056:	e040      	b.n	80040da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d023      	beq.n	80040a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004060:	4b39      	ldr	r3, [pc, #228]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a38      	ldr	r2, [pc, #224]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fe fe6a 	bl	8002d44 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004074:	f7fe fe66 	bl	8002d44 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e1c7      	b.n	8004416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004086:	4b30      	ldr	r3, [pc, #192]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004092:	4b2d      	ldr	r3, [pc, #180]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	4929      	ldr	r1, [pc, #164]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]
 80040a6:	e018      	b.n	80040da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a8:	4b27      	ldr	r3, [pc, #156]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a26      	ldr	r2, [pc, #152]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 80040ae:	f023 0301 	bic.w	r3, r3, #1
 80040b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b4:	f7fe fe46 	bl	8002d44 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040bc:	f7fe fe42 	bl	8002d44 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e1a3      	b.n	8004416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ce:	4b1e      	ldr	r3, [pc, #120]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d038      	beq.n	8004158 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d019      	beq.n	8004122 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ee:	4b16      	ldr	r3, [pc, #88]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 80040f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f2:	4a15      	ldr	r2, [pc, #84]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fa:	f7fe fe23 	bl	8002d44 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004102:	f7fe fe1f 	bl	8002d44 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e180      	b.n	8004416 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004114:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8004116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x23a>
 8004120:	e01a      	b.n	8004158 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004122:	4b09      	ldr	r3, [pc, #36]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8004124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004126:	4a08      	ldr	r2, [pc, #32]	; (8004148 <HAL_RCC_OscConfig+0x280>)
 8004128:	f023 0301 	bic.w	r3, r3, #1
 800412c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412e:	f7fe fe09 	bl	8002d44 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004134:	e00a      	b.n	800414c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004136:	f7fe fe05 	bl	8002d44 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d903      	bls.n	800414c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e166      	b.n	8004416 <HAL_RCC_OscConfig+0x54e>
 8004148:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800414c:	4b92      	ldr	r3, [pc, #584]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 800414e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1ee      	bne.n	8004136 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 80a4 	beq.w	80042ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004166:	4b8c      	ldr	r3, [pc, #560]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10d      	bne.n	800418e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004172:	4b89      	ldr	r3, [pc, #548]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	4a88      	ldr	r2, [pc, #544]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 8004178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417c:	6413      	str	r3, [r2, #64]	; 0x40
 800417e:	4b86      	ldr	r3, [pc, #536]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004186:	60bb      	str	r3, [r7, #8]
 8004188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800418a:	2301      	movs	r3, #1
 800418c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800418e:	4b83      	ldr	r3, [pc, #524]	; (800439c <HAL_RCC_OscConfig+0x4d4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004196:	2b00      	cmp	r3, #0
 8004198:	d118      	bne.n	80041cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800419a:	4b80      	ldr	r3, [pc, #512]	; (800439c <HAL_RCC_OscConfig+0x4d4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a7f      	ldr	r2, [pc, #508]	; (800439c <HAL_RCC_OscConfig+0x4d4>)
 80041a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041a6:	f7fe fdcd 	bl	8002d44 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ae:	f7fe fdc9 	bl	8002d44 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b64      	cmp	r3, #100	; 0x64
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e12a      	b.n	8004416 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041c0:	4b76      	ldr	r3, [pc, #472]	; (800439c <HAL_RCC_OscConfig+0x4d4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0f0      	beq.n	80041ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d106      	bne.n	80041e2 <HAL_RCC_OscConfig+0x31a>
 80041d4:	4b70      	ldr	r3, [pc, #448]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 80041d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d8:	4a6f      	ldr	r2, [pc, #444]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	6713      	str	r3, [r2, #112]	; 0x70
 80041e0:	e02d      	b.n	800423e <HAL_RCC_OscConfig+0x376>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10c      	bne.n	8004204 <HAL_RCC_OscConfig+0x33c>
 80041ea:	4b6b      	ldr	r3, [pc, #428]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	4a6a      	ldr	r2, [pc, #424]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 80041f0:	f023 0301 	bic.w	r3, r3, #1
 80041f4:	6713      	str	r3, [r2, #112]	; 0x70
 80041f6:	4b68      	ldr	r3, [pc, #416]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	4a67      	ldr	r2, [pc, #412]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 80041fc:	f023 0304 	bic.w	r3, r3, #4
 8004200:	6713      	str	r3, [r2, #112]	; 0x70
 8004202:	e01c      	b.n	800423e <HAL_RCC_OscConfig+0x376>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b05      	cmp	r3, #5
 800420a:	d10c      	bne.n	8004226 <HAL_RCC_OscConfig+0x35e>
 800420c:	4b62      	ldr	r3, [pc, #392]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 800420e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004210:	4a61      	ldr	r2, [pc, #388]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 8004212:	f043 0304 	orr.w	r3, r3, #4
 8004216:	6713      	str	r3, [r2, #112]	; 0x70
 8004218:	4b5f      	ldr	r3, [pc, #380]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 800421a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421c:	4a5e      	ldr	r2, [pc, #376]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	6713      	str	r3, [r2, #112]	; 0x70
 8004224:	e00b      	b.n	800423e <HAL_RCC_OscConfig+0x376>
 8004226:	4b5c      	ldr	r3, [pc, #368]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	4a5b      	ldr	r2, [pc, #364]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	6713      	str	r3, [r2, #112]	; 0x70
 8004232:	4b59      	ldr	r3, [pc, #356]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	4a58      	ldr	r2, [pc, #352]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 8004238:	f023 0304 	bic.w	r3, r3, #4
 800423c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d015      	beq.n	8004272 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004246:	f7fe fd7d 	bl	8002d44 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424c:	e00a      	b.n	8004264 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424e:	f7fe fd79 	bl	8002d44 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f241 3288 	movw	r2, #5000	; 0x1388
 800425c:	4293      	cmp	r3, r2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e0d8      	b.n	8004416 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004264:	4b4c      	ldr	r3, [pc, #304]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0ee      	beq.n	800424e <HAL_RCC_OscConfig+0x386>
 8004270:	e014      	b.n	800429c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004272:	f7fe fd67 	bl	8002d44 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004278:	e00a      	b.n	8004290 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427a:	f7fe fd63 	bl	8002d44 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	f241 3288 	movw	r2, #5000	; 0x1388
 8004288:	4293      	cmp	r3, r2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e0c2      	b.n	8004416 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004290:	4b41      	ldr	r3, [pc, #260]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1ee      	bne.n	800427a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d105      	bne.n	80042ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a2:	4b3d      	ldr	r3, [pc, #244]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	4a3c      	ldr	r2, [pc, #240]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 80042a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80ae 	beq.w	8004414 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042b8:	4b37      	ldr	r3, [pc, #220]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 030c 	and.w	r3, r3, #12
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d06d      	beq.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d14b      	bne.n	8004364 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042cc:	4b32      	ldr	r3, [pc, #200]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a31      	ldr	r2, [pc, #196]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 80042d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d8:	f7fe fd34 	bl	8002d44 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e0:	f7fe fd30 	bl	8002d44 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e091      	b.n	8004416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f2:	4b29      	ldr	r3, [pc, #164]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f0      	bne.n	80042e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69da      	ldr	r2, [r3, #28]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	019b      	lsls	r3, r3, #6
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	085b      	lsrs	r3, r3, #1
 8004316:	3b01      	subs	r3, #1
 8004318:	041b      	lsls	r3, r3, #16
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	061b      	lsls	r3, r3, #24
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	071b      	lsls	r3, r3, #28
 800432a:	491b      	ldr	r1, [pc, #108]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 800432c:	4313      	orrs	r3, r2
 800432e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004330:	4b19      	ldr	r3, [pc, #100]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a18      	ldr	r2, [pc, #96]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 8004336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800433a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fe fd02 	bl	8002d44 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004344:	f7fe fcfe 	bl	8002d44 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e05f      	b.n	8004416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0x47c>
 8004362:	e057      	b.n	8004414 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004364:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a0b      	ldr	r2, [pc, #44]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 800436a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800436e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004370:	f7fe fce8 	bl	8002d44 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004378:	f7fe fce4 	bl	8002d44 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e045      	b.n	8004416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438a:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_RCC_OscConfig+0x4d0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x4b0>
 8004396:	e03d      	b.n	8004414 <HAL_RCC_OscConfig+0x54c>
 8004398:	40023800 	.word	0x40023800
 800439c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80043a0:	4b1f      	ldr	r3, [pc, #124]	; (8004420 <HAL_RCC_OscConfig+0x558>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d030      	beq.n	8004410 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d129      	bne.n	8004410 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d122      	bne.n	8004410 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043d0:	4013      	ands	r3, r2
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043d8:	4293      	cmp	r3, r2
 80043da:	d119      	bne.n	8004410 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	085b      	lsrs	r3, r3, #1
 80043e8:	3b01      	subs	r3, #1
 80043ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d10f      	bne.n	8004410 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d107      	bne.n	8004410 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800440c:	429a      	cmp	r2, r3
 800440e:	d001      	beq.n	8004414 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40023800 	.word	0x40023800

08004424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0d0      	b.n	80045de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800443c:	4b6a      	ldr	r3, [pc, #424]	; (80045e8 <HAL_RCC_ClockConfig+0x1c4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d910      	bls.n	800446c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444a:	4b67      	ldr	r3, [pc, #412]	; (80045e8 <HAL_RCC_ClockConfig+0x1c4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f023 020f 	bic.w	r2, r3, #15
 8004452:	4965      	ldr	r1, [pc, #404]	; (80045e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	4313      	orrs	r3, r2
 8004458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800445a:	4b63      	ldr	r3, [pc, #396]	; (80045e8 <HAL_RCC_ClockConfig+0x1c4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d001      	beq.n	800446c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0b8      	b.n	80045de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d020      	beq.n	80044ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004484:	4b59      	ldr	r3, [pc, #356]	; (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	4a58      	ldr	r2, [pc, #352]	; (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 800448a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800448e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800449c:	4b53      	ldr	r3, [pc, #332]	; (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4a52      	ldr	r2, [pc, #328]	; (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 80044a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a8:	4b50      	ldr	r3, [pc, #320]	; (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	494d      	ldr	r1, [pc, #308]	; (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d040      	beq.n	8004548 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d107      	bne.n	80044de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ce:	4b47      	ldr	r3, [pc, #284]	; (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d115      	bne.n	8004506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e07f      	b.n	80045de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d107      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e6:	4b41      	ldr	r3, [pc, #260]	; (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d109      	bne.n	8004506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e073      	b.n	80045de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f6:	4b3d      	ldr	r3, [pc, #244]	; (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e06b      	b.n	80045de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004506:	4b39      	ldr	r3, [pc, #228]	; (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f023 0203 	bic.w	r2, r3, #3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	4936      	ldr	r1, [pc, #216]	; (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 8004514:	4313      	orrs	r3, r2
 8004516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004518:	f7fe fc14 	bl	8002d44 <HAL_GetTick>
 800451c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451e:	e00a      	b.n	8004536 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004520:	f7fe fc10 	bl	8002d44 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f241 3288 	movw	r2, #5000	; 0x1388
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e053      	b.n	80045de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004536:	4b2d      	ldr	r3, [pc, #180]	; (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 020c 	and.w	r2, r3, #12
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	429a      	cmp	r2, r3
 8004546:	d1eb      	bne.n	8004520 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004548:	4b27      	ldr	r3, [pc, #156]	; (80045e8 <HAL_RCC_ClockConfig+0x1c4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d210      	bcs.n	8004578 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004556:	4b24      	ldr	r3, [pc, #144]	; (80045e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f023 020f 	bic.w	r2, r3, #15
 800455e:	4922      	ldr	r1, [pc, #136]	; (80045e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	4313      	orrs	r3, r2
 8004564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004566:	4b20      	ldr	r3, [pc, #128]	; (80045e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d001      	beq.n	8004578 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e032      	b.n	80045de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004584:	4b19      	ldr	r3, [pc, #100]	; (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	4916      	ldr	r1, [pc, #88]	; (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 8004592:	4313      	orrs	r3, r2
 8004594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d009      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045a2:	4b12      	ldr	r3, [pc, #72]	; (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	490e      	ldr	r1, [pc, #56]	; (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045b6:	f000 f821 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 80045ba:	4602      	mov	r2, r0
 80045bc:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	490a      	ldr	r1, [pc, #40]	; (80045f0 <HAL_RCC_ClockConfig+0x1cc>)
 80045c8:	5ccb      	ldrb	r3, [r1, r3]
 80045ca:	fa22 f303 	lsr.w	r3, r2, r3
 80045ce:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <HAL_RCC_ClockConfig+0x1d0>)
 80045d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045d2:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <HAL_RCC_ClockConfig+0x1d4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fe fb70 	bl	8002cbc <HAL_InitTick>

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40023c00 	.word	0x40023c00
 80045ec:	40023800 	.word	0x40023800
 80045f0:	0802ff54 	.word	0x0802ff54
 80045f4:	2000000c 	.word	0x2000000c
 80045f8:	20000010 	.word	0x20000010

080045fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004600:	b090      	sub	sp, #64	; 0x40
 8004602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	637b      	str	r3, [r7, #52]	; 0x34
 8004608:	2300      	movs	r3, #0
 800460a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800460c:	2300      	movs	r3, #0
 800460e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004610:	2300      	movs	r3, #0
 8004612:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004614:	4b59      	ldr	r3, [pc, #356]	; (800477c <HAL_RCC_GetSysClockFreq+0x180>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 030c 	and.w	r3, r3, #12
 800461c:	2b08      	cmp	r3, #8
 800461e:	d00d      	beq.n	800463c <HAL_RCC_GetSysClockFreq+0x40>
 8004620:	2b08      	cmp	r3, #8
 8004622:	f200 80a1 	bhi.w	8004768 <HAL_RCC_GetSysClockFreq+0x16c>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <HAL_RCC_GetSysClockFreq+0x34>
 800462a:	2b04      	cmp	r3, #4
 800462c:	d003      	beq.n	8004636 <HAL_RCC_GetSysClockFreq+0x3a>
 800462e:	e09b      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004630:	4b53      	ldr	r3, [pc, #332]	; (8004780 <HAL_RCC_GetSysClockFreq+0x184>)
 8004632:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004634:	e09b      	b.n	800476e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004636:	4b53      	ldr	r3, [pc, #332]	; (8004784 <HAL_RCC_GetSysClockFreq+0x188>)
 8004638:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800463a:	e098      	b.n	800476e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800463c:	4b4f      	ldr	r3, [pc, #316]	; (800477c <HAL_RCC_GetSysClockFreq+0x180>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004644:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004646:	4b4d      	ldr	r3, [pc, #308]	; (800477c <HAL_RCC_GetSysClockFreq+0x180>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d028      	beq.n	80046a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004652:	4b4a      	ldr	r3, [pc, #296]	; (800477c <HAL_RCC_GetSysClockFreq+0x180>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	099b      	lsrs	r3, r3, #6
 8004658:	2200      	movs	r2, #0
 800465a:	623b      	str	r3, [r7, #32]
 800465c:	627a      	str	r2, [r7, #36]	; 0x24
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004664:	2100      	movs	r1, #0
 8004666:	4b47      	ldr	r3, [pc, #284]	; (8004784 <HAL_RCC_GetSysClockFreq+0x188>)
 8004668:	fb03 f201 	mul.w	r2, r3, r1
 800466c:	2300      	movs	r3, #0
 800466e:	fb00 f303 	mul.w	r3, r0, r3
 8004672:	4413      	add	r3, r2
 8004674:	4a43      	ldr	r2, [pc, #268]	; (8004784 <HAL_RCC_GetSysClockFreq+0x188>)
 8004676:	fba0 1202 	umull	r1, r2, r0, r2
 800467a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800467c:	460a      	mov	r2, r1
 800467e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004682:	4413      	add	r3, r2
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004688:	2200      	movs	r2, #0
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	61fa      	str	r2, [r7, #28]
 800468e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004692:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004696:	f7fb ffe7 	bl	8000668 <__aeabi_uldivmod>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4613      	mov	r3, r2
 80046a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046a2:	e053      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046a4:	4b35      	ldr	r3, [pc, #212]	; (800477c <HAL_RCC_GetSysClockFreq+0x180>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	099b      	lsrs	r3, r3, #6
 80046aa:	2200      	movs	r2, #0
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	617a      	str	r2, [r7, #20]
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046b6:	f04f 0b00 	mov.w	fp, #0
 80046ba:	4652      	mov	r2, sl
 80046bc:	465b      	mov	r3, fp
 80046be:	f04f 0000 	mov.w	r0, #0
 80046c2:	f04f 0100 	mov.w	r1, #0
 80046c6:	0159      	lsls	r1, r3, #5
 80046c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046cc:	0150      	lsls	r0, r2, #5
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	ebb2 080a 	subs.w	r8, r2, sl
 80046d6:	eb63 090b 	sbc.w	r9, r3, fp
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046ee:	ebb2 0408 	subs.w	r4, r2, r8
 80046f2:	eb63 0509 	sbc.w	r5, r3, r9
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	00eb      	lsls	r3, r5, #3
 8004700:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004704:	00e2      	lsls	r2, r4, #3
 8004706:	4614      	mov	r4, r2
 8004708:	461d      	mov	r5, r3
 800470a:	eb14 030a 	adds.w	r3, r4, sl
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	eb45 030b 	adc.w	r3, r5, fp
 8004714:	607b      	str	r3, [r7, #4]
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004722:	4629      	mov	r1, r5
 8004724:	028b      	lsls	r3, r1, #10
 8004726:	4621      	mov	r1, r4
 8004728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800472c:	4621      	mov	r1, r4
 800472e:	028a      	lsls	r2, r1, #10
 8004730:	4610      	mov	r0, r2
 8004732:	4619      	mov	r1, r3
 8004734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004736:	2200      	movs	r2, #0
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	60fa      	str	r2, [r7, #12]
 800473c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004740:	f7fb ff92 	bl	8000668 <__aeabi_uldivmod>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4613      	mov	r3, r2
 800474a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <HAL_RCC_GetSysClockFreq+0x180>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	3301      	adds	r3, #1
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800475c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	fbb2 f3f3 	udiv	r3, r2, r3
 8004764:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004766:	e002      	b.n	800476e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <HAL_RCC_GetSysClockFreq+0x184>)
 800476a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800476c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004770:	4618      	mov	r0, r3
 8004772:	3740      	adds	r7, #64	; 0x40
 8004774:	46bd      	mov	sp, r7
 8004776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800477a:	bf00      	nop
 800477c:	40023800 	.word	0x40023800
 8004780:	00f42400 	.word	0x00f42400
 8004784:	017d7840 	.word	0x017d7840

08004788 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800479c:	2300      	movs	r3, #0
 800479e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d012      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047b0:	4b69      	ldr	r3, [pc, #420]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	4a68      	ldr	r2, [pc, #416]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80047ba:	6093      	str	r3, [r2, #8]
 80047bc:	4b66      	ldr	r3, [pc, #408]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c4:	4964      	ldr	r1, [pc, #400]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80047d2:	2301      	movs	r3, #1
 80047d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d017      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047e2:	4b5d      	ldr	r3, [pc, #372]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f0:	4959      	ldr	r1, [pc, #356]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004800:	d101      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004802:	2301      	movs	r3, #1
 8004804:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800480e:	2301      	movs	r3, #1
 8004810:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d017      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800481e:	4b4e      	ldr	r3, [pc, #312]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004824:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	494a      	ldr	r1, [pc, #296]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800483c:	d101      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800483e:	2301      	movs	r3, #1
 8004840:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800484a:	2301      	movs	r3, #1
 800484c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800485a:	2301      	movs	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 808b 	beq.w	8004982 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800486c:	4b3a      	ldr	r3, [pc, #232]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	4a39      	ldr	r2, [pc, #228]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004876:	6413      	str	r3, [r2, #64]	; 0x40
 8004878:	4b37      	ldr	r3, [pc, #220]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004884:	4b35      	ldr	r3, [pc, #212]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a34      	ldr	r2, [pc, #208]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800488a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004890:	f7fe fa58 	bl	8002d44 <HAL_GetTick>
 8004894:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004898:	f7fe fa54 	bl	8002d44 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b64      	cmp	r3, #100	; 0x64
 80048a4:	d901      	bls.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e38f      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048aa:	4b2c      	ldr	r3, [pc, #176]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048b6:	4b28      	ldr	r3, [pc, #160]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d035      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d02e      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048d4:	4b20      	ldr	r3, [pc, #128]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048de:	4b1e      	ldr	r3, [pc, #120]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e2:	4a1d      	ldr	r2, [pc, #116]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048ea:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	4a1a      	ldr	r2, [pc, #104]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80048f6:	4a18      	ldr	r2, [pc, #96]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048fc:	4b16      	ldr	r3, [pc, #88]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b01      	cmp	r3, #1
 8004906:	d114      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004908:	f7fe fa1c 	bl	8002d44 <HAL_GetTick>
 800490c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800490e:	e00a      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004910:	f7fe fa18 	bl	8002d44 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f241 3288 	movw	r2, #5000	; 0x1388
 800491e:	4293      	cmp	r3, r2
 8004920:	d901      	bls.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e351      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004926:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0ee      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800493e:	d111      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004940:	4b05      	ldr	r3, [pc, #20]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800494c:	4b04      	ldr	r3, [pc, #16]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800494e:	400b      	ands	r3, r1
 8004950:	4901      	ldr	r1, [pc, #4]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004952:	4313      	orrs	r3, r2
 8004954:	608b      	str	r3, [r1, #8]
 8004956:	e00b      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004958:	40023800 	.word	0x40023800
 800495c:	40007000 	.word	0x40007000
 8004960:	0ffffcff 	.word	0x0ffffcff
 8004964:	4bac      	ldr	r3, [pc, #688]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	4aab      	ldr	r2, [pc, #684]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800496e:	6093      	str	r3, [r2, #8]
 8004970:	4ba9      	ldr	r3, [pc, #676]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004972:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800497c:	49a6      	ldr	r1, [pc, #664]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800497e:	4313      	orrs	r3, r2
 8004980:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0310 	and.w	r3, r3, #16
 800498a:	2b00      	cmp	r3, #0
 800498c:	d010      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800498e:	4ba2      	ldr	r3, [pc, #648]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004994:	4aa0      	ldr	r2, [pc, #640]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800499a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800499e:	4b9e      	ldr	r3, [pc, #632]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a8:	499b      	ldr	r1, [pc, #620]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049bc:	4b96      	ldr	r3, [pc, #600]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ca:	4993      	ldr	r1, [pc, #588]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049de:	4b8e      	ldr	r3, [pc, #568]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049ec:	498a      	ldr	r1, [pc, #552]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a00:	4b85      	ldr	r3, [pc, #532]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a0e:	4982      	ldr	r1, [pc, #520]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a22:	4b7d      	ldr	r3, [pc, #500]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a30:	4979      	ldr	r1, [pc, #484]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00a      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a44:	4b74      	ldr	r3, [pc, #464]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4a:	f023 0203 	bic.w	r2, r3, #3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a52:	4971      	ldr	r1, [pc, #452]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a66:	4b6c      	ldr	r3, [pc, #432]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6c:	f023 020c 	bic.w	r2, r3, #12
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a74:	4968      	ldr	r1, [pc, #416]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a88:	4b63      	ldr	r3, [pc, #396]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a96:	4960      	ldr	r1, [pc, #384]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004aaa:	4b5b      	ldr	r3, [pc, #364]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab8:	4957      	ldr	r1, [pc, #348]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004acc:	4b52      	ldr	r3, [pc, #328]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ada:	494f      	ldr	r1, [pc, #316]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004aee:	4b4a      	ldr	r3, [pc, #296]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afc:	4946      	ldr	r1, [pc, #280]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b10:	4b41      	ldr	r3, [pc, #260]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1e:	493e      	ldr	r1, [pc, #248]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b32:	4b39      	ldr	r3, [pc, #228]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b40:	4935      	ldr	r1, [pc, #212]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b54:	4b30      	ldr	r3, [pc, #192]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b62:	492d      	ldr	r1, [pc, #180]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d011      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b76:	4b28      	ldr	r3, [pc, #160]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b84:	4924      	ldr	r1, [pc, #144]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b94:	d101      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b96:	2301      	movs	r3, #1
 8004b98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bb6:	4b18      	ldr	r3, [pc, #96]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc4:	4914      	ldr	r1, [pc, #80]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00b      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bd8:	4b0f      	ldr	r3, [pc, #60]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bde:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004be8:	490b      	ldr	r1, [pc, #44]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00f      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c02:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c0c:	4902      	ldr	r1, [pc, #8]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c14:	e002      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00b      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c28:	4b8a      	ldr	r3, [pc, #552]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c38:	4986      	ldr	r1, [pc, #536]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00b      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c4c:	4b81      	ldr	r3, [pc, #516]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c5c:	497d      	ldr	r1, [pc, #500]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d006      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 80d6 	beq.w	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c78:	4b76      	ldr	r3, [pc, #472]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a75      	ldr	r2, [pc, #468]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c84:	f7fe f85e 	bl	8002d44 <HAL_GetTick>
 8004c88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c8c:	f7fe f85a 	bl	8002d44 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b64      	cmp	r3, #100	; 0x64
 8004c98:	d901      	bls.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e195      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c9e:	4b6d      	ldr	r3, [pc, #436]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d021      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d11d      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cbe:	4b65      	ldr	r3, [pc, #404]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ccc:	4b61      	ldr	r3, [pc, #388]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd2:	0e1b      	lsrs	r3, r3, #24
 8004cd4:	f003 030f 	and.w	r3, r3, #15
 8004cd8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	019a      	lsls	r2, r3, #6
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	041b      	lsls	r3, r3, #16
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	061b      	lsls	r3, r3, #24
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	071b      	lsls	r3, r3, #28
 8004cf2:	4958      	ldr	r1, [pc, #352]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d004      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d0e:	d00a      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d02e      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d24:	d129      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d26:	4b4b      	ldr	r3, [pc, #300]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d2c:	0c1b      	lsrs	r3, r3, #16
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d34:	4b47      	ldr	r3, [pc, #284]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d3a:	0f1b      	lsrs	r3, r3, #28
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	019a      	lsls	r2, r3, #6
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	041b      	lsls	r3, r3, #16
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	061b      	lsls	r3, r3, #24
 8004d54:	431a      	orrs	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	071b      	lsls	r3, r3, #28
 8004d5a:	493e      	ldr	r1, [pc, #248]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d62:	4b3c      	ldr	r3, [pc, #240]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d68:	f023 021f 	bic.w	r2, r3, #31
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	3b01      	subs	r3, #1
 8004d72:	4938      	ldr	r1, [pc, #224]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d01d      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d86:	4b33      	ldr	r3, [pc, #204]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d8c:	0e1b      	lsrs	r3, r3, #24
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d94:	4b2f      	ldr	r3, [pc, #188]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d9a:	0f1b      	lsrs	r3, r3, #28
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	019a      	lsls	r2, r3, #6
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	041b      	lsls	r3, r3, #16
 8004dae:	431a      	orrs	r2, r3
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	061b      	lsls	r3, r3, #24
 8004db4:	431a      	orrs	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	071b      	lsls	r3, r3, #28
 8004dba:	4926      	ldr	r1, [pc, #152]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d011      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	019a      	lsls	r2, r3, #6
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	041b      	lsls	r3, r3, #16
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	061b      	lsls	r3, r3, #24
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	071b      	lsls	r3, r3, #28
 8004dea:	491a      	ldr	r1, [pc, #104]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004df2:	4b18      	ldr	r3, [pc, #96]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a17      	ldr	r2, [pc, #92]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004df8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dfe:	f7fd ffa1 	bl	8002d44 <HAL_GetTick>
 8004e02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e04:	e008      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e06:	f7fd ff9d 	bl	8002d44 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b64      	cmp	r3, #100	; 0x64
 8004e12:	d901      	bls.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e0d8      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e18:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	f040 80ce 	bne.w	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e2c:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a08      	ldr	r2, [pc, #32]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e38:	f7fd ff84 	bl	8002d44 <HAL_GetTick>
 8004e3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e3e:	e00b      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e40:	f7fd ff80 	bl	8002d44 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b64      	cmp	r3, #100	; 0x64
 8004e4c:	d904      	bls.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e0bb      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e52:	bf00      	nop
 8004e54:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e58:	4b5e      	ldr	r3, [pc, #376]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e64:	d0ec      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d009      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d02e      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d12a      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e8e:	4b51      	ldr	r3, [pc, #324]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e94:	0c1b      	lsrs	r3, r3, #16
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e9c:	4b4d      	ldr	r3, [pc, #308]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea2:	0f1b      	lsrs	r3, r3, #28
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	019a      	lsls	r2, r3, #6
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	041b      	lsls	r3, r3, #16
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	061b      	lsls	r3, r3, #24
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	071b      	lsls	r3, r3, #28
 8004ec2:	4944      	ldr	r1, [pc, #272]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004eca:	4b42      	ldr	r3, [pc, #264]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ed0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	493d      	ldr	r1, [pc, #244]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d022      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ef8:	d11d      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004efa:	4b36      	ldr	r3, [pc, #216]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f00:	0e1b      	lsrs	r3, r3, #24
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f08:	4b32      	ldr	r3, [pc, #200]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0e:	0f1b      	lsrs	r3, r3, #28
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	019a      	lsls	r2, r3, #6
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	041b      	lsls	r3, r3, #16
 8004f22:	431a      	orrs	r2, r3
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	061b      	lsls	r3, r3, #24
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	071b      	lsls	r3, r3, #28
 8004f2e:	4929      	ldr	r1, [pc, #164]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d028      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f42:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f48:	0e1b      	lsrs	r3, r3, #24
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f50:	4b20      	ldr	r3, [pc, #128]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f56:	0c1b      	lsrs	r3, r3, #16
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	019a      	lsls	r2, r3, #6
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	041b      	lsls	r3, r3, #16
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	061b      	lsls	r3, r3, #24
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	071b      	lsls	r3, r3, #28
 8004f76:	4917      	ldr	r1, [pc, #92]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f7e:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	4911      	ldr	r1, [pc, #68]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f94:	4b0f      	ldr	r3, [pc, #60]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a0e      	ldr	r2, [pc, #56]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa0:	f7fd fed0 	bl	8002d44 <HAL_GetTick>
 8004fa4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fa8:	f7fd fecc 	bl	8002d44 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b64      	cmp	r3, #100	; 0x64
 8004fb4:	d901      	bls.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e007      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fba:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fc6:	d1ef      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3720      	adds	r7, #32
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40023800 	.word	0x40023800

08004fd8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e01c      	b.n	8005024 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	795b      	ldrb	r3, [r3, #5]
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d105      	bne.n	8005000 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fd fbc8 	bl	8002790 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0204 	orr.w	r2, r2, #4
 8005014:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e09d      	b.n	800517a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	2b00      	cmp	r3, #0
 8005044:	d108      	bne.n	8005058 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800504e:	d009      	beq.n	8005064 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	61da      	str	r2, [r3, #28]
 8005056:	e005      	b.n	8005064 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d106      	bne.n	8005084 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fd fbf8 	bl	8002874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800509a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050a4:	d902      	bls.n	80050ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	e002      	b.n	80050b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050ba:	d007      	beq.n	80050cc <HAL_SPI_Init+0xa0>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050c4:	d002      	beq.n	80050cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510e:	ea42 0103 	orr.w	r1, r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	0c1b      	lsrs	r3, r3, #16
 8005128:	f003 0204 	and.w	r2, r3, #4
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005148:	ea42 0103 	orr.w	r1, r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005168:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b088      	sub	sp, #32
 8005186:	af00      	add	r7, sp, #0
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	603b      	str	r3, [r7, #0]
 800518e:	4613      	mov	r3, r2
 8005190:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_SPI_Transmit+0x22>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e158      	b.n	8005456 <HAL_SPI_Transmit+0x2d4>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051ac:	f7fd fdca 	bl	8002d44 <HAL_GetTick>
 80051b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051b2:	88fb      	ldrh	r3, [r7, #6]
 80051b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d002      	beq.n	80051c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80051c2:	2302      	movs	r3, #2
 80051c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051c6:	e13d      	b.n	8005444 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_SPI_Transmit+0x52>
 80051ce:	88fb      	ldrh	r3, [r7, #6]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d102      	bne.n	80051da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051d8:	e134      	b.n	8005444 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2203      	movs	r2, #3
 80051de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	88fa      	ldrh	r2, [r7, #6]
 80051f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	88fa      	ldrh	r2, [r7, #6]
 80051f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005224:	d10f      	bne.n	8005246 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005234:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005244:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b40      	cmp	r3, #64	; 0x40
 8005252:	d007      	beq.n	8005264 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005262:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800526c:	d94b      	bls.n	8005306 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_SPI_Transmit+0xfa>
 8005276:	8afb      	ldrh	r3, [r7, #22]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d13e      	bne.n	80052fa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	881a      	ldrh	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	1c9a      	adds	r2, r3, #2
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052a0:	e02b      	b.n	80052fa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d112      	bne.n	80052d6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	881a      	ldrh	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	1c9a      	adds	r2, r3, #2
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052d4:	e011      	b.n	80052fa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052d6:	f7fd fd35 	bl	8002d44 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d803      	bhi.n	80052ee <HAL_SPI_Transmit+0x16c>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d102      	bne.n	80052f4 <HAL_SPI_Transmit+0x172>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d102      	bne.n	80052fa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052f8:	e0a4      	b.n	8005444 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1ce      	bne.n	80052a2 <HAL_SPI_Transmit+0x120>
 8005304:	e07c      	b.n	8005400 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <HAL_SPI_Transmit+0x192>
 800530e:	8afb      	ldrh	r3, [r7, #22]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d170      	bne.n	80053f6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b01      	cmp	r3, #1
 800531c:	d912      	bls.n	8005344 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	881a      	ldrh	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532e:	1c9a      	adds	r2, r3, #2
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b02      	subs	r3, #2
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005342:	e058      	b.n	80053f6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	7812      	ldrb	r2, [r2, #0]
 8005350:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800536a:	e044      	b.n	80053f6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b02      	cmp	r3, #2
 8005378:	d12b      	bne.n	80053d2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b01      	cmp	r3, #1
 8005382:	d912      	bls.n	80053aa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005388:	881a      	ldrh	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	1c9a      	adds	r2, r3, #2
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b02      	subs	r3, #2
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053a8:	e025      	b.n	80053f6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	330c      	adds	r3, #12
 80053b4:	7812      	ldrb	r2, [r2, #0]
 80053b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053d0:	e011      	b.n	80053f6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053d2:	f7fd fcb7 	bl	8002d44 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d803      	bhi.n	80053ea <HAL_SPI_Transmit+0x268>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e8:	d102      	bne.n	80053f0 <HAL_SPI_Transmit+0x26e>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d102      	bne.n	80053f6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053f4:	e026      	b.n	8005444 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1b5      	bne.n	800536c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	6839      	ldr	r1, [r7, #0]
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f949 	bl	800569c <SPI_EndRxTxTransaction>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10a      	bne.n	8005434 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800541e:	2300      	movs	r3, #0
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	77fb      	strb	r3, [r7, #31]
 8005440:	e000      	b.n	8005444 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005442:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005454:	7ffb      	ldrb	r3, [r7, #31]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3720      	adds	r7, #32
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	4613      	mov	r3, r2
 800546e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005470:	f7fd fc68 	bl	8002d44 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	4413      	add	r3, r2
 800547e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005480:	f7fd fc60 	bl	8002d44 <HAL_GetTick>
 8005484:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005486:	4b39      	ldr	r3, [pc, #228]	; (800556c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	015b      	lsls	r3, r3, #5
 800548c:	0d1b      	lsrs	r3, r3, #20
 800548e:	69fa      	ldr	r2, [r7, #28]
 8005490:	fb02 f303 	mul.w	r3, r2, r3
 8005494:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005496:	e054      	b.n	8005542 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d050      	beq.n	8005542 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054a0:	f7fd fc50 	bl	8002d44 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d902      	bls.n	80054b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d13d      	bne.n	8005532 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ce:	d111      	bne.n	80054f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d8:	d004      	beq.n	80054e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e2:	d107      	bne.n	80054f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054fc:	d10f      	bne.n	800551e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800551c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e017      	b.n	8005562 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	3b01      	subs	r3, #1
 8005540:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4013      	ands	r3, r2
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	429a      	cmp	r2, r3
 8005550:	bf0c      	ite	eq
 8005552:	2301      	moveq	r3, #1
 8005554:	2300      	movne	r3, #0
 8005556:	b2db      	uxtb	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	429a      	cmp	r2, r3
 800555e:	d19b      	bne.n	8005498 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3720      	adds	r7, #32
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	2000000c 	.word	0x2000000c

08005570 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08a      	sub	sp, #40	; 0x28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800557e:	2300      	movs	r3, #0
 8005580:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005582:	f7fd fbdf 	bl	8002d44 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	4413      	add	r3, r2
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005592:	f7fd fbd7 	bl	8002d44 <HAL_GetTick>
 8005596:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	330c      	adds	r3, #12
 800559e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80055a0:	4b3d      	ldr	r3, [pc, #244]	; (8005698 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	00da      	lsls	r2, r3, #3
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	0d1b      	lsrs	r3, r3, #20
 80055b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b2:	fb02 f303 	mul.w	r3, r2, r3
 80055b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80055b8:	e060      	b.n	800567c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80055c0:	d107      	bne.n	80055d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d104      	bne.n	80055d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80055d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d8:	d050      	beq.n	800567c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055da:	f7fd fbb3 	bl	8002d44 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d902      	bls.n	80055f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d13d      	bne.n	800566c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005608:	d111      	bne.n	800562e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005612:	d004      	beq.n	800561e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561c:	d107      	bne.n	800562e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800562c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005636:	d10f      	bne.n	8005658 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005656:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e010      	b.n	800568e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	3b01      	subs	r3, #1
 800567a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	4013      	ands	r3, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	429a      	cmp	r2, r3
 800568a:	d196      	bne.n	80055ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3728      	adds	r7, #40	; 0x28
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	2000000c 	.word	0x2000000c

0800569c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af02      	add	r7, sp, #8
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f7ff ff5b 	bl	8005570 <SPI_WaitFifoStateUntilTimeout>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d007      	beq.n	80056d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c4:	f043 0220 	orr.w	r2, r3, #32
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e046      	b.n	800575e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80056d0:	4b25      	ldr	r3, [pc, #148]	; (8005768 <SPI_EndRxTxTransaction+0xcc>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a25      	ldr	r2, [pc, #148]	; (800576c <SPI_EndRxTxTransaction+0xd0>)
 80056d6:	fba2 2303 	umull	r2, r3, r2, r3
 80056da:	0d5b      	lsrs	r3, r3, #21
 80056dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056e0:	fb02 f303 	mul.w	r3, r2, r3
 80056e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056ee:	d112      	bne.n	8005716 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2200      	movs	r2, #0
 80056f8:	2180      	movs	r1, #128	; 0x80
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff feb0 	bl	8005460 <SPI_WaitFlagStateUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d016      	beq.n	8005734 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570a:	f043 0220 	orr.w	r2, r3, #32
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e023      	b.n	800575e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	3b01      	subs	r3, #1
 8005720:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572c:	2b80      	cmp	r3, #128	; 0x80
 800572e:	d0f2      	beq.n	8005716 <SPI_EndRxTxTransaction+0x7a>
 8005730:	e000      	b.n	8005734 <SPI_EndRxTxTransaction+0x98>
        break;
 8005732:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2200      	movs	r2, #0
 800573c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f7ff ff15 	bl	8005570 <SPI_WaitFifoStateUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d007      	beq.n	800575c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005750:	f043 0220 	orr.w	r2, r3, #32
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e000      	b.n	800575e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	2000000c 	.word	0x2000000c
 800576c:	165e9f81 	.word	0x165e9f81

08005770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e049      	b.n	8005816 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fd fa2a 	bl	8002bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3304      	adds	r3, #4
 80057ac:	4619      	mov	r1, r3
 80057ae:	4610      	mov	r0, r2
 80057b0:	f000 f900 	bl	80059b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_TIM_ConfigClockSource+0x1c>
 8005838:	2302      	movs	r3, #2
 800583a:	e0b4      	b.n	80059a6 <HAL_TIM_ConfigClockSource+0x186>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	4b56      	ldr	r3, [pc, #344]	; (80059b0 <HAL_TIM_ConfigClockSource+0x190>)
 8005858:	4013      	ands	r3, r2
 800585a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005862:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005874:	d03e      	beq.n	80058f4 <HAL_TIM_ConfigClockSource+0xd4>
 8005876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800587a:	f200 8087 	bhi.w	800598c <HAL_TIM_ConfigClockSource+0x16c>
 800587e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005882:	f000 8086 	beq.w	8005992 <HAL_TIM_ConfigClockSource+0x172>
 8005886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588a:	d87f      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 800588c:	2b70      	cmp	r3, #112	; 0x70
 800588e:	d01a      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0xa6>
 8005890:	2b70      	cmp	r3, #112	; 0x70
 8005892:	d87b      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	2b60      	cmp	r3, #96	; 0x60
 8005896:	d050      	beq.n	800593a <HAL_TIM_ConfigClockSource+0x11a>
 8005898:	2b60      	cmp	r3, #96	; 0x60
 800589a:	d877      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 800589c:	2b50      	cmp	r3, #80	; 0x50
 800589e:	d03c      	beq.n	800591a <HAL_TIM_ConfigClockSource+0xfa>
 80058a0:	2b50      	cmp	r3, #80	; 0x50
 80058a2:	d873      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 80058a4:	2b40      	cmp	r3, #64	; 0x40
 80058a6:	d058      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x13a>
 80058a8:	2b40      	cmp	r3, #64	; 0x40
 80058aa:	d86f      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 80058ac:	2b30      	cmp	r3, #48	; 0x30
 80058ae:	d064      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x15a>
 80058b0:	2b30      	cmp	r3, #48	; 0x30
 80058b2:	d86b      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d060      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x15a>
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d867      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d05c      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x15a>
 80058c0:	2b10      	cmp	r3, #16
 80058c2:	d05a      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x15a>
 80058c4:	e062      	b.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6899      	ldr	r1, [r3, #8]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f000 f987 	bl	8005be8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	609a      	str	r2, [r3, #8]
      break;
 80058f2:	e04f      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	6899      	ldr	r1, [r3, #8]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f000 f970 	bl	8005be8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005916:	609a      	str	r2, [r3, #8]
      break;
 8005918:	e03c      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6818      	ldr	r0, [r3, #0]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	6859      	ldr	r1, [r3, #4]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	461a      	mov	r2, r3
 8005928:	f000 f8e4 	bl	8005af4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2150      	movs	r1, #80	; 0x50
 8005932:	4618      	mov	r0, r3
 8005934:	f000 f93d 	bl	8005bb2 <TIM_ITRx_SetConfig>
      break;
 8005938:	e02c      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	6859      	ldr	r1, [r3, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	461a      	mov	r2, r3
 8005948:	f000 f903 	bl	8005b52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2160      	movs	r1, #96	; 0x60
 8005952:	4618      	mov	r0, r3
 8005954:	f000 f92d 	bl	8005bb2 <TIM_ITRx_SetConfig>
      break;
 8005958:	e01c      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6859      	ldr	r1, [r3, #4]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	461a      	mov	r2, r3
 8005968:	f000 f8c4 	bl	8005af4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2140      	movs	r1, #64	; 0x40
 8005972:	4618      	mov	r0, r3
 8005974:	f000 f91d 	bl	8005bb2 <TIM_ITRx_SetConfig>
      break;
 8005978:	e00c      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4619      	mov	r1, r3
 8005984:	4610      	mov	r0, r2
 8005986:	f000 f914 	bl	8005bb2 <TIM_ITRx_SetConfig>
      break;
 800598a:	e003      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	73fb      	strb	r3, [r7, #15]
      break;
 8005990:	e000      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005992:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	fffeff88 	.word	0xfffeff88

080059b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a40      	ldr	r2, [pc, #256]	; (8005ac8 <TIM_Base_SetConfig+0x114>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d013      	beq.n	80059f4 <TIM_Base_SetConfig+0x40>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d2:	d00f      	beq.n	80059f4 <TIM_Base_SetConfig+0x40>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a3d      	ldr	r2, [pc, #244]	; (8005acc <TIM_Base_SetConfig+0x118>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00b      	beq.n	80059f4 <TIM_Base_SetConfig+0x40>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a3c      	ldr	r2, [pc, #240]	; (8005ad0 <TIM_Base_SetConfig+0x11c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d007      	beq.n	80059f4 <TIM_Base_SetConfig+0x40>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a3b      	ldr	r2, [pc, #236]	; (8005ad4 <TIM_Base_SetConfig+0x120>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d003      	beq.n	80059f4 <TIM_Base_SetConfig+0x40>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a3a      	ldr	r2, [pc, #232]	; (8005ad8 <TIM_Base_SetConfig+0x124>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d108      	bne.n	8005a06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a2f      	ldr	r2, [pc, #188]	; (8005ac8 <TIM_Base_SetConfig+0x114>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d02b      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a14:	d027      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a2c      	ldr	r2, [pc, #176]	; (8005acc <TIM_Base_SetConfig+0x118>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d023      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a2b      	ldr	r2, [pc, #172]	; (8005ad0 <TIM_Base_SetConfig+0x11c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d01f      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a2a      	ldr	r2, [pc, #168]	; (8005ad4 <TIM_Base_SetConfig+0x120>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d01b      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a29      	ldr	r2, [pc, #164]	; (8005ad8 <TIM_Base_SetConfig+0x124>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d017      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a28      	ldr	r2, [pc, #160]	; (8005adc <TIM_Base_SetConfig+0x128>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d013      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a27      	ldr	r2, [pc, #156]	; (8005ae0 <TIM_Base_SetConfig+0x12c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00f      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a26      	ldr	r2, [pc, #152]	; (8005ae4 <TIM_Base_SetConfig+0x130>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00b      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a25      	ldr	r2, [pc, #148]	; (8005ae8 <TIM_Base_SetConfig+0x134>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d007      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a24      	ldr	r2, [pc, #144]	; (8005aec <TIM_Base_SetConfig+0x138>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d003      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a23      	ldr	r2, [pc, #140]	; (8005af0 <TIM_Base_SetConfig+0x13c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d108      	bne.n	8005a78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a0a      	ldr	r2, [pc, #40]	; (8005ac8 <TIM_Base_SetConfig+0x114>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d003      	beq.n	8005aac <TIM_Base_SetConfig+0xf8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a0c      	ldr	r2, [pc, #48]	; (8005ad8 <TIM_Base_SetConfig+0x124>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d103      	bne.n	8005ab4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	615a      	str	r2, [r3, #20]
}
 8005aba:	bf00      	nop
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40010000 	.word	0x40010000
 8005acc:	40000400 	.word	0x40000400
 8005ad0:	40000800 	.word	0x40000800
 8005ad4:	40000c00 	.word	0x40000c00
 8005ad8:	40010400 	.word	0x40010400
 8005adc:	40014000 	.word	0x40014000
 8005ae0:	40014400 	.word	0x40014400
 8005ae4:	40014800 	.word	0x40014800
 8005ae8:	40001800 	.word	0x40001800
 8005aec:	40001c00 	.word	0x40001c00
 8005af0:	40002000 	.word	0x40002000

08005af4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f023 0201 	bic.w	r2, r3, #1
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f023 030a 	bic.w	r3, r3, #10
 8005b30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b087      	sub	sp, #28
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	f023 0210 	bic.w	r2, r3, #16
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	031b      	lsls	r3, r3, #12
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	621a      	str	r2, [r3, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f043 0307 	orr.w	r3, r3, #7
 8005bd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	609a      	str	r2, [r3, #8]
}
 8005bdc:	bf00      	nop
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	021a      	lsls	r2, r3, #8
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	609a      	str	r2, [r3, #8]
}
 8005c1c:	bf00      	nop
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d101      	bne.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e06d      	b.n	8005d1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a30      	ldr	r2, [pc, #192]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d004      	beq.n	8005c74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a2f      	ldr	r2, [pc, #188]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d108      	bne.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a20      	ldr	r2, [pc, #128]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d022      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb2:	d01d      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1d      	ldr	r2, [pc, #116]	; (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d018      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1c      	ldr	r2, [pc, #112]	; (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d013      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1a      	ldr	r2, [pc, #104]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00e      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a15      	ldr	r2, [pc, #84]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d009      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a16      	ldr	r2, [pc, #88]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d004      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a15      	ldr	r2, [pc, #84]	; (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d10c      	bne.n	8005d0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	40010000 	.word	0x40010000
 8005d2c:	40010400 	.word	0x40010400
 8005d30:	40000400 	.word	0x40000400
 8005d34:	40000800 	.word	0x40000800
 8005d38:	40000c00 	.word	0x40000c00
 8005d3c:	40014000 	.word	0x40014000
 8005d40:	40001800 	.word	0x40001800

08005d44 <__errno>:
 8005d44:	4b01      	ldr	r3, [pc, #4]	; (8005d4c <__errno+0x8>)
 8005d46:	6818      	ldr	r0, [r3, #0]
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	20000018 	.word	0x20000018

08005d50 <__libc_init_array>:
 8005d50:	b570      	push	{r4, r5, r6, lr}
 8005d52:	4d0d      	ldr	r5, [pc, #52]	; (8005d88 <__libc_init_array+0x38>)
 8005d54:	4c0d      	ldr	r4, [pc, #52]	; (8005d8c <__libc_init_array+0x3c>)
 8005d56:	1b64      	subs	r4, r4, r5
 8005d58:	10a4      	asrs	r4, r4, #2
 8005d5a:	2600      	movs	r6, #0
 8005d5c:	42a6      	cmp	r6, r4
 8005d5e:	d109      	bne.n	8005d74 <__libc_init_array+0x24>
 8005d60:	4d0b      	ldr	r5, [pc, #44]	; (8005d90 <__libc_init_array+0x40>)
 8005d62:	4c0c      	ldr	r4, [pc, #48]	; (8005d94 <__libc_init_array+0x44>)
 8005d64:	f004 fb88 	bl	800a478 <_init>
 8005d68:	1b64      	subs	r4, r4, r5
 8005d6a:	10a4      	asrs	r4, r4, #2
 8005d6c:	2600      	movs	r6, #0
 8005d6e:	42a6      	cmp	r6, r4
 8005d70:	d105      	bne.n	8005d7e <__libc_init_array+0x2e>
 8005d72:	bd70      	pop	{r4, r5, r6, pc}
 8005d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d78:	4798      	blx	r3
 8005d7a:	3601      	adds	r6, #1
 8005d7c:	e7ee      	b.n	8005d5c <__libc_init_array+0xc>
 8005d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d82:	4798      	blx	r3
 8005d84:	3601      	adds	r6, #1
 8005d86:	e7f2      	b.n	8005d6e <__libc_init_array+0x1e>
 8005d88:	08030414 	.word	0x08030414
 8005d8c:	08030414 	.word	0x08030414
 8005d90:	08030414 	.word	0x08030414
 8005d94:	08030418 	.word	0x08030418

08005d98 <memset>:
 8005d98:	4402      	add	r2, r0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d100      	bne.n	8005da2 <memset+0xa>
 8005da0:	4770      	bx	lr
 8005da2:	f803 1b01 	strb.w	r1, [r3], #1
 8005da6:	e7f9      	b.n	8005d9c <memset+0x4>

08005da8 <__cvt>:
 8005da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005daa:	ed2d 8b02 	vpush	{d8}
 8005dae:	eeb0 8b40 	vmov.f64	d8, d0
 8005db2:	b085      	sub	sp, #20
 8005db4:	4617      	mov	r7, r2
 8005db6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005db8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005dba:	ee18 2a90 	vmov	r2, s17
 8005dbe:	f025 0520 	bic.w	r5, r5, #32
 8005dc2:	2a00      	cmp	r2, #0
 8005dc4:	bfb6      	itet	lt
 8005dc6:	222d      	movlt	r2, #45	; 0x2d
 8005dc8:	2200      	movge	r2, #0
 8005dca:	eeb1 8b40 	vneglt.f64	d8, d0
 8005dce:	2d46      	cmp	r5, #70	; 0x46
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	701a      	strb	r2, [r3, #0]
 8005dd4:	d004      	beq.n	8005de0 <__cvt+0x38>
 8005dd6:	2d45      	cmp	r5, #69	; 0x45
 8005dd8:	d100      	bne.n	8005ddc <__cvt+0x34>
 8005dda:	3401      	adds	r4, #1
 8005ddc:	2102      	movs	r1, #2
 8005dde:	e000      	b.n	8005de2 <__cvt+0x3a>
 8005de0:	2103      	movs	r1, #3
 8005de2:	ab03      	add	r3, sp, #12
 8005de4:	9301      	str	r3, [sp, #4]
 8005de6:	ab02      	add	r3, sp, #8
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	4622      	mov	r2, r4
 8005dec:	4633      	mov	r3, r6
 8005dee:	eeb0 0b48 	vmov.f64	d0, d8
 8005df2:	f001 fd2d 	bl	8007850 <_dtoa_r>
 8005df6:	2d47      	cmp	r5, #71	; 0x47
 8005df8:	d101      	bne.n	8005dfe <__cvt+0x56>
 8005dfa:	07fb      	lsls	r3, r7, #31
 8005dfc:	d51a      	bpl.n	8005e34 <__cvt+0x8c>
 8005dfe:	2d46      	cmp	r5, #70	; 0x46
 8005e00:	eb00 0204 	add.w	r2, r0, r4
 8005e04:	d10c      	bne.n	8005e20 <__cvt+0x78>
 8005e06:	7803      	ldrb	r3, [r0, #0]
 8005e08:	2b30      	cmp	r3, #48	; 0x30
 8005e0a:	d107      	bne.n	8005e1c <__cvt+0x74>
 8005e0c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e14:	bf1c      	itt	ne
 8005e16:	f1c4 0401 	rsbne	r4, r4, #1
 8005e1a:	6034      	strne	r4, [r6, #0]
 8005e1c:	6833      	ldr	r3, [r6, #0]
 8005e1e:	441a      	add	r2, r3
 8005e20:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e28:	bf08      	it	eq
 8005e2a:	9203      	streq	r2, [sp, #12]
 8005e2c:	2130      	movs	r1, #48	; 0x30
 8005e2e:	9b03      	ldr	r3, [sp, #12]
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d307      	bcc.n	8005e44 <__cvt+0x9c>
 8005e34:	9b03      	ldr	r3, [sp, #12]
 8005e36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e38:	1a1b      	subs	r3, r3, r0
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	b005      	add	sp, #20
 8005e3e:	ecbd 8b02 	vpop	{d8}
 8005e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e44:	1c5c      	adds	r4, r3, #1
 8005e46:	9403      	str	r4, [sp, #12]
 8005e48:	7019      	strb	r1, [r3, #0]
 8005e4a:	e7f0      	b.n	8005e2e <__cvt+0x86>

08005e4c <__exponent>:
 8005e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2900      	cmp	r1, #0
 8005e52:	bfb8      	it	lt
 8005e54:	4249      	neglt	r1, r1
 8005e56:	f803 2b02 	strb.w	r2, [r3], #2
 8005e5a:	bfb4      	ite	lt
 8005e5c:	222d      	movlt	r2, #45	; 0x2d
 8005e5e:	222b      	movge	r2, #43	; 0x2b
 8005e60:	2909      	cmp	r1, #9
 8005e62:	7042      	strb	r2, [r0, #1]
 8005e64:	dd2a      	ble.n	8005ebc <__exponent+0x70>
 8005e66:	f10d 0407 	add.w	r4, sp, #7
 8005e6a:	46a4      	mov	ip, r4
 8005e6c:	270a      	movs	r7, #10
 8005e6e:	46a6      	mov	lr, r4
 8005e70:	460a      	mov	r2, r1
 8005e72:	fb91 f6f7 	sdiv	r6, r1, r7
 8005e76:	fb07 1516 	mls	r5, r7, r6, r1
 8005e7a:	3530      	adds	r5, #48	; 0x30
 8005e7c:	2a63      	cmp	r2, #99	; 0x63
 8005e7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005e82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005e86:	4631      	mov	r1, r6
 8005e88:	dcf1      	bgt.n	8005e6e <__exponent+0x22>
 8005e8a:	3130      	adds	r1, #48	; 0x30
 8005e8c:	f1ae 0502 	sub.w	r5, lr, #2
 8005e90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005e94:	1c44      	adds	r4, r0, #1
 8005e96:	4629      	mov	r1, r5
 8005e98:	4561      	cmp	r1, ip
 8005e9a:	d30a      	bcc.n	8005eb2 <__exponent+0x66>
 8005e9c:	f10d 0209 	add.w	r2, sp, #9
 8005ea0:	eba2 020e 	sub.w	r2, r2, lr
 8005ea4:	4565      	cmp	r5, ip
 8005ea6:	bf88      	it	hi
 8005ea8:	2200      	movhi	r2, #0
 8005eaa:	4413      	add	r3, r2
 8005eac:	1a18      	subs	r0, r3, r0
 8005eae:	b003      	add	sp, #12
 8005eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005eb6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005eba:	e7ed      	b.n	8005e98 <__exponent+0x4c>
 8005ebc:	2330      	movs	r3, #48	; 0x30
 8005ebe:	3130      	adds	r1, #48	; 0x30
 8005ec0:	7083      	strb	r3, [r0, #2]
 8005ec2:	70c1      	strb	r1, [r0, #3]
 8005ec4:	1d03      	adds	r3, r0, #4
 8005ec6:	e7f1      	b.n	8005eac <__exponent+0x60>

08005ec8 <_printf_float>:
 8005ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ecc:	b08b      	sub	sp, #44	; 0x2c
 8005ece:	460c      	mov	r4, r1
 8005ed0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005ed4:	4616      	mov	r6, r2
 8005ed6:	461f      	mov	r7, r3
 8005ed8:	4605      	mov	r5, r0
 8005eda:	f002 fd97 	bl	8008a0c <_localeconv_r>
 8005ede:	f8d0 b000 	ldr.w	fp, [r0]
 8005ee2:	4658      	mov	r0, fp
 8005ee4:	f7fa f9ac 	bl	8000240 <strlen>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	9308      	str	r3, [sp, #32]
 8005eec:	f8d8 3000 	ldr.w	r3, [r8]
 8005ef0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005ef4:	6822      	ldr	r2, [r4, #0]
 8005ef6:	3307      	adds	r3, #7
 8005ef8:	f023 0307 	bic.w	r3, r3, #7
 8005efc:	f103 0108 	add.w	r1, r3, #8
 8005f00:	f8c8 1000 	str.w	r1, [r8]
 8005f04:	4682      	mov	sl, r0
 8005f06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f0a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8005f0e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006170 <_printf_float+0x2a8>
 8005f12:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005f16:	eeb0 6bc0 	vabs.f64	d6, d0
 8005f1a:	eeb4 6b47 	vcmp.f64	d6, d7
 8005f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f22:	dd24      	ble.n	8005f6e <_printf_float+0xa6>
 8005f24:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f2c:	d502      	bpl.n	8005f34 <_printf_float+0x6c>
 8005f2e:	232d      	movs	r3, #45	; 0x2d
 8005f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f34:	4b90      	ldr	r3, [pc, #576]	; (8006178 <_printf_float+0x2b0>)
 8005f36:	4891      	ldr	r0, [pc, #580]	; (800617c <_printf_float+0x2b4>)
 8005f38:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005f3c:	bf94      	ite	ls
 8005f3e:	4698      	movls	r8, r3
 8005f40:	4680      	movhi	r8, r0
 8005f42:	2303      	movs	r3, #3
 8005f44:	6123      	str	r3, [r4, #16]
 8005f46:	f022 0204 	bic.w	r2, r2, #4
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	6022      	str	r2, [r4, #0]
 8005f4e:	9304      	str	r3, [sp, #16]
 8005f50:	9700      	str	r7, [sp, #0]
 8005f52:	4633      	mov	r3, r6
 8005f54:	aa09      	add	r2, sp, #36	; 0x24
 8005f56:	4621      	mov	r1, r4
 8005f58:	4628      	mov	r0, r5
 8005f5a:	f000 f9d3 	bl	8006304 <_printf_common>
 8005f5e:	3001      	adds	r0, #1
 8005f60:	f040 808a 	bne.w	8006078 <_printf_float+0x1b0>
 8005f64:	f04f 30ff 	mov.w	r0, #4294967295
 8005f68:	b00b      	add	sp, #44	; 0x2c
 8005f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f6e:	eeb4 0b40 	vcmp.f64	d0, d0
 8005f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f76:	d709      	bvc.n	8005f8c <_printf_float+0xc4>
 8005f78:	ee10 3a90 	vmov	r3, s1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	bfbc      	itt	lt
 8005f80:	232d      	movlt	r3, #45	; 0x2d
 8005f82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f86:	487e      	ldr	r0, [pc, #504]	; (8006180 <_printf_float+0x2b8>)
 8005f88:	4b7e      	ldr	r3, [pc, #504]	; (8006184 <_printf_float+0x2bc>)
 8005f8a:	e7d5      	b.n	8005f38 <_printf_float+0x70>
 8005f8c:	6863      	ldr	r3, [r4, #4]
 8005f8e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005f92:	9104      	str	r1, [sp, #16]
 8005f94:	1c59      	adds	r1, r3, #1
 8005f96:	d13c      	bne.n	8006012 <_printf_float+0x14a>
 8005f98:	2306      	movs	r3, #6
 8005f9a:	6063      	str	r3, [r4, #4]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	9303      	str	r3, [sp, #12]
 8005fa0:	ab08      	add	r3, sp, #32
 8005fa2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005fa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005faa:	ab07      	add	r3, sp, #28
 8005fac:	6861      	ldr	r1, [r4, #4]
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	6022      	str	r2, [r4, #0]
 8005fb2:	f10d 031b 	add.w	r3, sp, #27
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f7ff fef6 	bl	8005da8 <__cvt>
 8005fbc:	9b04      	ldr	r3, [sp, #16]
 8005fbe:	9907      	ldr	r1, [sp, #28]
 8005fc0:	2b47      	cmp	r3, #71	; 0x47
 8005fc2:	4680      	mov	r8, r0
 8005fc4:	d108      	bne.n	8005fd8 <_printf_float+0x110>
 8005fc6:	1cc8      	adds	r0, r1, #3
 8005fc8:	db02      	blt.n	8005fd0 <_printf_float+0x108>
 8005fca:	6863      	ldr	r3, [r4, #4]
 8005fcc:	4299      	cmp	r1, r3
 8005fce:	dd41      	ble.n	8006054 <_printf_float+0x18c>
 8005fd0:	f1a9 0902 	sub.w	r9, r9, #2
 8005fd4:	fa5f f989 	uxtb.w	r9, r9
 8005fd8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005fdc:	d820      	bhi.n	8006020 <_printf_float+0x158>
 8005fde:	3901      	subs	r1, #1
 8005fe0:	464a      	mov	r2, r9
 8005fe2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005fe6:	9107      	str	r1, [sp, #28]
 8005fe8:	f7ff ff30 	bl	8005e4c <__exponent>
 8005fec:	9a08      	ldr	r2, [sp, #32]
 8005fee:	9004      	str	r0, [sp, #16]
 8005ff0:	1813      	adds	r3, r2, r0
 8005ff2:	2a01      	cmp	r2, #1
 8005ff4:	6123      	str	r3, [r4, #16]
 8005ff6:	dc02      	bgt.n	8005ffe <_printf_float+0x136>
 8005ff8:	6822      	ldr	r2, [r4, #0]
 8005ffa:	07d2      	lsls	r2, r2, #31
 8005ffc:	d501      	bpl.n	8006002 <_printf_float+0x13a>
 8005ffe:	3301      	adds	r3, #1
 8006000:	6123      	str	r3, [r4, #16]
 8006002:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d0a2      	beq.n	8005f50 <_printf_float+0x88>
 800600a:	232d      	movs	r3, #45	; 0x2d
 800600c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006010:	e79e      	b.n	8005f50 <_printf_float+0x88>
 8006012:	9904      	ldr	r1, [sp, #16]
 8006014:	2947      	cmp	r1, #71	; 0x47
 8006016:	d1c1      	bne.n	8005f9c <_printf_float+0xd4>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1bf      	bne.n	8005f9c <_printf_float+0xd4>
 800601c:	2301      	movs	r3, #1
 800601e:	e7bc      	b.n	8005f9a <_printf_float+0xd2>
 8006020:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006024:	d118      	bne.n	8006058 <_printf_float+0x190>
 8006026:	2900      	cmp	r1, #0
 8006028:	6863      	ldr	r3, [r4, #4]
 800602a:	dd0b      	ble.n	8006044 <_printf_float+0x17c>
 800602c:	6121      	str	r1, [r4, #16]
 800602e:	b913      	cbnz	r3, 8006036 <_printf_float+0x16e>
 8006030:	6822      	ldr	r2, [r4, #0]
 8006032:	07d0      	lsls	r0, r2, #31
 8006034:	d502      	bpl.n	800603c <_printf_float+0x174>
 8006036:	3301      	adds	r3, #1
 8006038:	440b      	add	r3, r1
 800603a:	6123      	str	r3, [r4, #16]
 800603c:	2300      	movs	r3, #0
 800603e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006040:	9304      	str	r3, [sp, #16]
 8006042:	e7de      	b.n	8006002 <_printf_float+0x13a>
 8006044:	b913      	cbnz	r3, 800604c <_printf_float+0x184>
 8006046:	6822      	ldr	r2, [r4, #0]
 8006048:	07d2      	lsls	r2, r2, #31
 800604a:	d501      	bpl.n	8006050 <_printf_float+0x188>
 800604c:	3302      	adds	r3, #2
 800604e:	e7f4      	b.n	800603a <_printf_float+0x172>
 8006050:	2301      	movs	r3, #1
 8006052:	e7f2      	b.n	800603a <_printf_float+0x172>
 8006054:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006058:	9b08      	ldr	r3, [sp, #32]
 800605a:	4299      	cmp	r1, r3
 800605c:	db05      	blt.n	800606a <_printf_float+0x1a2>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	6121      	str	r1, [r4, #16]
 8006062:	07d8      	lsls	r0, r3, #31
 8006064:	d5ea      	bpl.n	800603c <_printf_float+0x174>
 8006066:	1c4b      	adds	r3, r1, #1
 8006068:	e7e7      	b.n	800603a <_printf_float+0x172>
 800606a:	2900      	cmp	r1, #0
 800606c:	bfd4      	ite	le
 800606e:	f1c1 0202 	rsble	r2, r1, #2
 8006072:	2201      	movgt	r2, #1
 8006074:	4413      	add	r3, r2
 8006076:	e7e0      	b.n	800603a <_printf_float+0x172>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	055a      	lsls	r2, r3, #21
 800607c:	d407      	bmi.n	800608e <_printf_float+0x1c6>
 800607e:	6923      	ldr	r3, [r4, #16]
 8006080:	4642      	mov	r2, r8
 8006082:	4631      	mov	r1, r6
 8006084:	4628      	mov	r0, r5
 8006086:	47b8      	blx	r7
 8006088:	3001      	adds	r0, #1
 800608a:	d12a      	bne.n	80060e2 <_printf_float+0x21a>
 800608c:	e76a      	b.n	8005f64 <_printf_float+0x9c>
 800608e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006092:	f240 80e2 	bls.w	800625a <_printf_float+0x392>
 8006096:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800609a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800609e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a2:	d133      	bne.n	800610c <_printf_float+0x244>
 80060a4:	4a38      	ldr	r2, [pc, #224]	; (8006188 <_printf_float+0x2c0>)
 80060a6:	2301      	movs	r3, #1
 80060a8:	4631      	mov	r1, r6
 80060aa:	4628      	mov	r0, r5
 80060ac:	47b8      	blx	r7
 80060ae:	3001      	adds	r0, #1
 80060b0:	f43f af58 	beq.w	8005f64 <_printf_float+0x9c>
 80060b4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	db02      	blt.n	80060c2 <_printf_float+0x1fa>
 80060bc:	6823      	ldr	r3, [r4, #0]
 80060be:	07d8      	lsls	r0, r3, #31
 80060c0:	d50f      	bpl.n	80060e2 <_printf_float+0x21a>
 80060c2:	4653      	mov	r3, sl
 80060c4:	465a      	mov	r2, fp
 80060c6:	4631      	mov	r1, r6
 80060c8:	4628      	mov	r0, r5
 80060ca:	47b8      	blx	r7
 80060cc:	3001      	adds	r0, #1
 80060ce:	f43f af49 	beq.w	8005f64 <_printf_float+0x9c>
 80060d2:	f04f 0800 	mov.w	r8, #0
 80060d6:	f104 091a 	add.w	r9, r4, #26
 80060da:	9b08      	ldr	r3, [sp, #32]
 80060dc:	3b01      	subs	r3, #1
 80060de:	4543      	cmp	r3, r8
 80060e0:	dc09      	bgt.n	80060f6 <_printf_float+0x22e>
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	079b      	lsls	r3, r3, #30
 80060e6:	f100 8108 	bmi.w	80062fa <_printf_float+0x432>
 80060ea:	68e0      	ldr	r0, [r4, #12]
 80060ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ee:	4298      	cmp	r0, r3
 80060f0:	bfb8      	it	lt
 80060f2:	4618      	movlt	r0, r3
 80060f4:	e738      	b.n	8005f68 <_printf_float+0xa0>
 80060f6:	2301      	movs	r3, #1
 80060f8:	464a      	mov	r2, r9
 80060fa:	4631      	mov	r1, r6
 80060fc:	4628      	mov	r0, r5
 80060fe:	47b8      	blx	r7
 8006100:	3001      	adds	r0, #1
 8006102:	f43f af2f 	beq.w	8005f64 <_printf_float+0x9c>
 8006106:	f108 0801 	add.w	r8, r8, #1
 800610a:	e7e6      	b.n	80060da <_printf_float+0x212>
 800610c:	9b07      	ldr	r3, [sp, #28]
 800610e:	2b00      	cmp	r3, #0
 8006110:	dc3c      	bgt.n	800618c <_printf_float+0x2c4>
 8006112:	4a1d      	ldr	r2, [pc, #116]	; (8006188 <_printf_float+0x2c0>)
 8006114:	2301      	movs	r3, #1
 8006116:	4631      	mov	r1, r6
 8006118:	4628      	mov	r0, r5
 800611a:	47b8      	blx	r7
 800611c:	3001      	adds	r0, #1
 800611e:	f43f af21 	beq.w	8005f64 <_printf_float+0x9c>
 8006122:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006126:	4313      	orrs	r3, r2
 8006128:	d102      	bne.n	8006130 <_printf_float+0x268>
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	07d9      	lsls	r1, r3, #31
 800612e:	d5d8      	bpl.n	80060e2 <_printf_float+0x21a>
 8006130:	4653      	mov	r3, sl
 8006132:	465a      	mov	r2, fp
 8006134:	4631      	mov	r1, r6
 8006136:	4628      	mov	r0, r5
 8006138:	47b8      	blx	r7
 800613a:	3001      	adds	r0, #1
 800613c:	f43f af12 	beq.w	8005f64 <_printf_float+0x9c>
 8006140:	f04f 0900 	mov.w	r9, #0
 8006144:	f104 0a1a 	add.w	sl, r4, #26
 8006148:	9b07      	ldr	r3, [sp, #28]
 800614a:	425b      	negs	r3, r3
 800614c:	454b      	cmp	r3, r9
 800614e:	dc01      	bgt.n	8006154 <_printf_float+0x28c>
 8006150:	9b08      	ldr	r3, [sp, #32]
 8006152:	e795      	b.n	8006080 <_printf_float+0x1b8>
 8006154:	2301      	movs	r3, #1
 8006156:	4652      	mov	r2, sl
 8006158:	4631      	mov	r1, r6
 800615a:	4628      	mov	r0, r5
 800615c:	47b8      	blx	r7
 800615e:	3001      	adds	r0, #1
 8006160:	f43f af00 	beq.w	8005f64 <_printf_float+0x9c>
 8006164:	f109 0901 	add.w	r9, r9, #1
 8006168:	e7ee      	b.n	8006148 <_printf_float+0x280>
 800616a:	bf00      	nop
 800616c:	f3af 8000 	nop.w
 8006170:	ffffffff 	.word	0xffffffff
 8006174:	7fefffff 	.word	0x7fefffff
 8006178:	0802ff68 	.word	0x0802ff68
 800617c:	0802ff6c 	.word	0x0802ff6c
 8006180:	0802ff74 	.word	0x0802ff74
 8006184:	0802ff70 	.word	0x0802ff70
 8006188:	0802ff78 	.word	0x0802ff78
 800618c:	9a08      	ldr	r2, [sp, #32]
 800618e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006190:	429a      	cmp	r2, r3
 8006192:	bfa8      	it	ge
 8006194:	461a      	movge	r2, r3
 8006196:	2a00      	cmp	r2, #0
 8006198:	4691      	mov	r9, r2
 800619a:	dc38      	bgt.n	800620e <_printf_float+0x346>
 800619c:	2300      	movs	r3, #0
 800619e:	9305      	str	r3, [sp, #20]
 80061a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061a4:	f104 021a 	add.w	r2, r4, #26
 80061a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061aa:	9905      	ldr	r1, [sp, #20]
 80061ac:	9304      	str	r3, [sp, #16]
 80061ae:	eba3 0309 	sub.w	r3, r3, r9
 80061b2:	428b      	cmp	r3, r1
 80061b4:	dc33      	bgt.n	800621e <_printf_float+0x356>
 80061b6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	db3c      	blt.n	8006238 <_printf_float+0x370>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	07da      	lsls	r2, r3, #31
 80061c2:	d439      	bmi.n	8006238 <_printf_float+0x370>
 80061c4:	9b08      	ldr	r3, [sp, #32]
 80061c6:	9a04      	ldr	r2, [sp, #16]
 80061c8:	9907      	ldr	r1, [sp, #28]
 80061ca:	1a9a      	subs	r2, r3, r2
 80061cc:	eba3 0901 	sub.w	r9, r3, r1
 80061d0:	4591      	cmp	r9, r2
 80061d2:	bfa8      	it	ge
 80061d4:	4691      	movge	r9, r2
 80061d6:	f1b9 0f00 	cmp.w	r9, #0
 80061da:	dc35      	bgt.n	8006248 <_printf_float+0x380>
 80061dc:	f04f 0800 	mov.w	r8, #0
 80061e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061e4:	f104 0a1a 	add.w	sl, r4, #26
 80061e8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80061ec:	1a9b      	subs	r3, r3, r2
 80061ee:	eba3 0309 	sub.w	r3, r3, r9
 80061f2:	4543      	cmp	r3, r8
 80061f4:	f77f af75 	ble.w	80060e2 <_printf_float+0x21a>
 80061f8:	2301      	movs	r3, #1
 80061fa:	4652      	mov	r2, sl
 80061fc:	4631      	mov	r1, r6
 80061fe:	4628      	mov	r0, r5
 8006200:	47b8      	blx	r7
 8006202:	3001      	adds	r0, #1
 8006204:	f43f aeae 	beq.w	8005f64 <_printf_float+0x9c>
 8006208:	f108 0801 	add.w	r8, r8, #1
 800620c:	e7ec      	b.n	80061e8 <_printf_float+0x320>
 800620e:	4613      	mov	r3, r2
 8006210:	4631      	mov	r1, r6
 8006212:	4642      	mov	r2, r8
 8006214:	4628      	mov	r0, r5
 8006216:	47b8      	blx	r7
 8006218:	3001      	adds	r0, #1
 800621a:	d1bf      	bne.n	800619c <_printf_float+0x2d4>
 800621c:	e6a2      	b.n	8005f64 <_printf_float+0x9c>
 800621e:	2301      	movs	r3, #1
 8006220:	4631      	mov	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	9204      	str	r2, [sp, #16]
 8006226:	47b8      	blx	r7
 8006228:	3001      	adds	r0, #1
 800622a:	f43f ae9b 	beq.w	8005f64 <_printf_float+0x9c>
 800622e:	9b05      	ldr	r3, [sp, #20]
 8006230:	9a04      	ldr	r2, [sp, #16]
 8006232:	3301      	adds	r3, #1
 8006234:	9305      	str	r3, [sp, #20]
 8006236:	e7b7      	b.n	80061a8 <_printf_float+0x2e0>
 8006238:	4653      	mov	r3, sl
 800623a:	465a      	mov	r2, fp
 800623c:	4631      	mov	r1, r6
 800623e:	4628      	mov	r0, r5
 8006240:	47b8      	blx	r7
 8006242:	3001      	adds	r0, #1
 8006244:	d1be      	bne.n	80061c4 <_printf_float+0x2fc>
 8006246:	e68d      	b.n	8005f64 <_printf_float+0x9c>
 8006248:	9a04      	ldr	r2, [sp, #16]
 800624a:	464b      	mov	r3, r9
 800624c:	4442      	add	r2, r8
 800624e:	4631      	mov	r1, r6
 8006250:	4628      	mov	r0, r5
 8006252:	47b8      	blx	r7
 8006254:	3001      	adds	r0, #1
 8006256:	d1c1      	bne.n	80061dc <_printf_float+0x314>
 8006258:	e684      	b.n	8005f64 <_printf_float+0x9c>
 800625a:	9a08      	ldr	r2, [sp, #32]
 800625c:	2a01      	cmp	r2, #1
 800625e:	dc01      	bgt.n	8006264 <_printf_float+0x39c>
 8006260:	07db      	lsls	r3, r3, #31
 8006262:	d537      	bpl.n	80062d4 <_printf_float+0x40c>
 8006264:	2301      	movs	r3, #1
 8006266:	4642      	mov	r2, r8
 8006268:	4631      	mov	r1, r6
 800626a:	4628      	mov	r0, r5
 800626c:	47b8      	blx	r7
 800626e:	3001      	adds	r0, #1
 8006270:	f43f ae78 	beq.w	8005f64 <_printf_float+0x9c>
 8006274:	4653      	mov	r3, sl
 8006276:	465a      	mov	r2, fp
 8006278:	4631      	mov	r1, r6
 800627a:	4628      	mov	r0, r5
 800627c:	47b8      	blx	r7
 800627e:	3001      	adds	r0, #1
 8006280:	f43f ae70 	beq.w	8005f64 <_printf_float+0x9c>
 8006284:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006288:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800628c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006290:	d01b      	beq.n	80062ca <_printf_float+0x402>
 8006292:	9b08      	ldr	r3, [sp, #32]
 8006294:	f108 0201 	add.w	r2, r8, #1
 8006298:	3b01      	subs	r3, #1
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	d10e      	bne.n	80062c2 <_printf_float+0x3fa>
 80062a4:	e65e      	b.n	8005f64 <_printf_float+0x9c>
 80062a6:	2301      	movs	r3, #1
 80062a8:	464a      	mov	r2, r9
 80062aa:	4631      	mov	r1, r6
 80062ac:	4628      	mov	r0, r5
 80062ae:	47b8      	blx	r7
 80062b0:	3001      	adds	r0, #1
 80062b2:	f43f ae57 	beq.w	8005f64 <_printf_float+0x9c>
 80062b6:	f108 0801 	add.w	r8, r8, #1
 80062ba:	9b08      	ldr	r3, [sp, #32]
 80062bc:	3b01      	subs	r3, #1
 80062be:	4543      	cmp	r3, r8
 80062c0:	dcf1      	bgt.n	80062a6 <_printf_float+0x3de>
 80062c2:	9b04      	ldr	r3, [sp, #16]
 80062c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80062c8:	e6db      	b.n	8006082 <_printf_float+0x1ba>
 80062ca:	f04f 0800 	mov.w	r8, #0
 80062ce:	f104 091a 	add.w	r9, r4, #26
 80062d2:	e7f2      	b.n	80062ba <_printf_float+0x3f2>
 80062d4:	2301      	movs	r3, #1
 80062d6:	4642      	mov	r2, r8
 80062d8:	e7df      	b.n	800629a <_printf_float+0x3d2>
 80062da:	2301      	movs	r3, #1
 80062dc:	464a      	mov	r2, r9
 80062de:	4631      	mov	r1, r6
 80062e0:	4628      	mov	r0, r5
 80062e2:	47b8      	blx	r7
 80062e4:	3001      	adds	r0, #1
 80062e6:	f43f ae3d 	beq.w	8005f64 <_printf_float+0x9c>
 80062ea:	f108 0801 	add.w	r8, r8, #1
 80062ee:	68e3      	ldr	r3, [r4, #12]
 80062f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062f2:	1a5b      	subs	r3, r3, r1
 80062f4:	4543      	cmp	r3, r8
 80062f6:	dcf0      	bgt.n	80062da <_printf_float+0x412>
 80062f8:	e6f7      	b.n	80060ea <_printf_float+0x222>
 80062fa:	f04f 0800 	mov.w	r8, #0
 80062fe:	f104 0919 	add.w	r9, r4, #25
 8006302:	e7f4      	b.n	80062ee <_printf_float+0x426>

08006304 <_printf_common>:
 8006304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006308:	4616      	mov	r6, r2
 800630a:	4699      	mov	r9, r3
 800630c:	688a      	ldr	r2, [r1, #8]
 800630e:	690b      	ldr	r3, [r1, #16]
 8006310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006314:	4293      	cmp	r3, r2
 8006316:	bfb8      	it	lt
 8006318:	4613      	movlt	r3, r2
 800631a:	6033      	str	r3, [r6, #0]
 800631c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006320:	4607      	mov	r7, r0
 8006322:	460c      	mov	r4, r1
 8006324:	b10a      	cbz	r2, 800632a <_printf_common+0x26>
 8006326:	3301      	adds	r3, #1
 8006328:	6033      	str	r3, [r6, #0]
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	0699      	lsls	r1, r3, #26
 800632e:	bf42      	ittt	mi
 8006330:	6833      	ldrmi	r3, [r6, #0]
 8006332:	3302      	addmi	r3, #2
 8006334:	6033      	strmi	r3, [r6, #0]
 8006336:	6825      	ldr	r5, [r4, #0]
 8006338:	f015 0506 	ands.w	r5, r5, #6
 800633c:	d106      	bne.n	800634c <_printf_common+0x48>
 800633e:	f104 0a19 	add.w	sl, r4, #25
 8006342:	68e3      	ldr	r3, [r4, #12]
 8006344:	6832      	ldr	r2, [r6, #0]
 8006346:	1a9b      	subs	r3, r3, r2
 8006348:	42ab      	cmp	r3, r5
 800634a:	dc26      	bgt.n	800639a <_printf_common+0x96>
 800634c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006350:	1e13      	subs	r3, r2, #0
 8006352:	6822      	ldr	r2, [r4, #0]
 8006354:	bf18      	it	ne
 8006356:	2301      	movne	r3, #1
 8006358:	0692      	lsls	r2, r2, #26
 800635a:	d42b      	bmi.n	80063b4 <_printf_common+0xb0>
 800635c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006360:	4649      	mov	r1, r9
 8006362:	4638      	mov	r0, r7
 8006364:	47c0      	blx	r8
 8006366:	3001      	adds	r0, #1
 8006368:	d01e      	beq.n	80063a8 <_printf_common+0xa4>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	68e5      	ldr	r5, [r4, #12]
 800636e:	6832      	ldr	r2, [r6, #0]
 8006370:	f003 0306 	and.w	r3, r3, #6
 8006374:	2b04      	cmp	r3, #4
 8006376:	bf08      	it	eq
 8006378:	1aad      	subeq	r5, r5, r2
 800637a:	68a3      	ldr	r3, [r4, #8]
 800637c:	6922      	ldr	r2, [r4, #16]
 800637e:	bf0c      	ite	eq
 8006380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006384:	2500      	movne	r5, #0
 8006386:	4293      	cmp	r3, r2
 8006388:	bfc4      	itt	gt
 800638a:	1a9b      	subgt	r3, r3, r2
 800638c:	18ed      	addgt	r5, r5, r3
 800638e:	2600      	movs	r6, #0
 8006390:	341a      	adds	r4, #26
 8006392:	42b5      	cmp	r5, r6
 8006394:	d11a      	bne.n	80063cc <_printf_common+0xc8>
 8006396:	2000      	movs	r0, #0
 8006398:	e008      	b.n	80063ac <_printf_common+0xa8>
 800639a:	2301      	movs	r3, #1
 800639c:	4652      	mov	r2, sl
 800639e:	4649      	mov	r1, r9
 80063a0:	4638      	mov	r0, r7
 80063a2:	47c0      	blx	r8
 80063a4:	3001      	adds	r0, #1
 80063a6:	d103      	bne.n	80063b0 <_printf_common+0xac>
 80063a8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b0:	3501      	adds	r5, #1
 80063b2:	e7c6      	b.n	8006342 <_printf_common+0x3e>
 80063b4:	18e1      	adds	r1, r4, r3
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	2030      	movs	r0, #48	; 0x30
 80063ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063be:	4422      	add	r2, r4
 80063c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063c8:	3302      	adds	r3, #2
 80063ca:	e7c7      	b.n	800635c <_printf_common+0x58>
 80063cc:	2301      	movs	r3, #1
 80063ce:	4622      	mov	r2, r4
 80063d0:	4649      	mov	r1, r9
 80063d2:	4638      	mov	r0, r7
 80063d4:	47c0      	blx	r8
 80063d6:	3001      	adds	r0, #1
 80063d8:	d0e6      	beq.n	80063a8 <_printf_common+0xa4>
 80063da:	3601      	adds	r6, #1
 80063dc:	e7d9      	b.n	8006392 <_printf_common+0x8e>
	...

080063e0 <_printf_i>:
 80063e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063e4:	7e0f      	ldrb	r7, [r1, #24]
 80063e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063e8:	2f78      	cmp	r7, #120	; 0x78
 80063ea:	4691      	mov	r9, r2
 80063ec:	4680      	mov	r8, r0
 80063ee:	460c      	mov	r4, r1
 80063f0:	469a      	mov	sl, r3
 80063f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063f6:	d807      	bhi.n	8006408 <_printf_i+0x28>
 80063f8:	2f62      	cmp	r7, #98	; 0x62
 80063fa:	d80a      	bhi.n	8006412 <_printf_i+0x32>
 80063fc:	2f00      	cmp	r7, #0
 80063fe:	f000 80d8 	beq.w	80065b2 <_printf_i+0x1d2>
 8006402:	2f58      	cmp	r7, #88	; 0x58
 8006404:	f000 80a3 	beq.w	800654e <_printf_i+0x16e>
 8006408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800640c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006410:	e03a      	b.n	8006488 <_printf_i+0xa8>
 8006412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006416:	2b15      	cmp	r3, #21
 8006418:	d8f6      	bhi.n	8006408 <_printf_i+0x28>
 800641a:	a101      	add	r1, pc, #4	; (adr r1, 8006420 <_printf_i+0x40>)
 800641c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006420:	08006479 	.word	0x08006479
 8006424:	0800648d 	.word	0x0800648d
 8006428:	08006409 	.word	0x08006409
 800642c:	08006409 	.word	0x08006409
 8006430:	08006409 	.word	0x08006409
 8006434:	08006409 	.word	0x08006409
 8006438:	0800648d 	.word	0x0800648d
 800643c:	08006409 	.word	0x08006409
 8006440:	08006409 	.word	0x08006409
 8006444:	08006409 	.word	0x08006409
 8006448:	08006409 	.word	0x08006409
 800644c:	08006599 	.word	0x08006599
 8006450:	080064bd 	.word	0x080064bd
 8006454:	0800657b 	.word	0x0800657b
 8006458:	08006409 	.word	0x08006409
 800645c:	08006409 	.word	0x08006409
 8006460:	080065bb 	.word	0x080065bb
 8006464:	08006409 	.word	0x08006409
 8006468:	080064bd 	.word	0x080064bd
 800646c:	08006409 	.word	0x08006409
 8006470:	08006409 	.word	0x08006409
 8006474:	08006583 	.word	0x08006583
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	1d1a      	adds	r2, r3, #4
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	602a      	str	r2, [r5, #0]
 8006480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006488:	2301      	movs	r3, #1
 800648a:	e0a3      	b.n	80065d4 <_printf_i+0x1f4>
 800648c:	6820      	ldr	r0, [r4, #0]
 800648e:	6829      	ldr	r1, [r5, #0]
 8006490:	0606      	lsls	r6, r0, #24
 8006492:	f101 0304 	add.w	r3, r1, #4
 8006496:	d50a      	bpl.n	80064ae <_printf_i+0xce>
 8006498:	680e      	ldr	r6, [r1, #0]
 800649a:	602b      	str	r3, [r5, #0]
 800649c:	2e00      	cmp	r6, #0
 800649e:	da03      	bge.n	80064a8 <_printf_i+0xc8>
 80064a0:	232d      	movs	r3, #45	; 0x2d
 80064a2:	4276      	negs	r6, r6
 80064a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a8:	485e      	ldr	r0, [pc, #376]	; (8006624 <_printf_i+0x244>)
 80064aa:	230a      	movs	r3, #10
 80064ac:	e019      	b.n	80064e2 <_printf_i+0x102>
 80064ae:	680e      	ldr	r6, [r1, #0]
 80064b0:	602b      	str	r3, [r5, #0]
 80064b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064b6:	bf18      	it	ne
 80064b8:	b236      	sxthne	r6, r6
 80064ba:	e7ef      	b.n	800649c <_printf_i+0xbc>
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	6820      	ldr	r0, [r4, #0]
 80064c0:	1d19      	adds	r1, r3, #4
 80064c2:	6029      	str	r1, [r5, #0]
 80064c4:	0601      	lsls	r1, r0, #24
 80064c6:	d501      	bpl.n	80064cc <_printf_i+0xec>
 80064c8:	681e      	ldr	r6, [r3, #0]
 80064ca:	e002      	b.n	80064d2 <_printf_i+0xf2>
 80064cc:	0646      	lsls	r6, r0, #25
 80064ce:	d5fb      	bpl.n	80064c8 <_printf_i+0xe8>
 80064d0:	881e      	ldrh	r6, [r3, #0]
 80064d2:	4854      	ldr	r0, [pc, #336]	; (8006624 <_printf_i+0x244>)
 80064d4:	2f6f      	cmp	r7, #111	; 0x6f
 80064d6:	bf0c      	ite	eq
 80064d8:	2308      	moveq	r3, #8
 80064da:	230a      	movne	r3, #10
 80064dc:	2100      	movs	r1, #0
 80064de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064e2:	6865      	ldr	r5, [r4, #4]
 80064e4:	60a5      	str	r5, [r4, #8]
 80064e6:	2d00      	cmp	r5, #0
 80064e8:	bfa2      	ittt	ge
 80064ea:	6821      	ldrge	r1, [r4, #0]
 80064ec:	f021 0104 	bicge.w	r1, r1, #4
 80064f0:	6021      	strge	r1, [r4, #0]
 80064f2:	b90e      	cbnz	r6, 80064f8 <_printf_i+0x118>
 80064f4:	2d00      	cmp	r5, #0
 80064f6:	d04d      	beq.n	8006594 <_printf_i+0x1b4>
 80064f8:	4615      	mov	r5, r2
 80064fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80064fe:	fb03 6711 	mls	r7, r3, r1, r6
 8006502:	5dc7      	ldrb	r7, [r0, r7]
 8006504:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006508:	4637      	mov	r7, r6
 800650a:	42bb      	cmp	r3, r7
 800650c:	460e      	mov	r6, r1
 800650e:	d9f4      	bls.n	80064fa <_printf_i+0x11a>
 8006510:	2b08      	cmp	r3, #8
 8006512:	d10b      	bne.n	800652c <_printf_i+0x14c>
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	07de      	lsls	r6, r3, #31
 8006518:	d508      	bpl.n	800652c <_printf_i+0x14c>
 800651a:	6923      	ldr	r3, [r4, #16]
 800651c:	6861      	ldr	r1, [r4, #4]
 800651e:	4299      	cmp	r1, r3
 8006520:	bfde      	ittt	le
 8006522:	2330      	movle	r3, #48	; 0x30
 8006524:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006528:	f105 35ff 	addle.w	r5, r5, #4294967295
 800652c:	1b52      	subs	r2, r2, r5
 800652e:	6122      	str	r2, [r4, #16]
 8006530:	f8cd a000 	str.w	sl, [sp]
 8006534:	464b      	mov	r3, r9
 8006536:	aa03      	add	r2, sp, #12
 8006538:	4621      	mov	r1, r4
 800653a:	4640      	mov	r0, r8
 800653c:	f7ff fee2 	bl	8006304 <_printf_common>
 8006540:	3001      	adds	r0, #1
 8006542:	d14c      	bne.n	80065de <_printf_i+0x1fe>
 8006544:	f04f 30ff 	mov.w	r0, #4294967295
 8006548:	b004      	add	sp, #16
 800654a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654e:	4835      	ldr	r0, [pc, #212]	; (8006624 <_printf_i+0x244>)
 8006550:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006554:	6829      	ldr	r1, [r5, #0]
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	f851 6b04 	ldr.w	r6, [r1], #4
 800655c:	6029      	str	r1, [r5, #0]
 800655e:	061d      	lsls	r5, r3, #24
 8006560:	d514      	bpl.n	800658c <_printf_i+0x1ac>
 8006562:	07df      	lsls	r7, r3, #31
 8006564:	bf44      	itt	mi
 8006566:	f043 0320 	orrmi.w	r3, r3, #32
 800656a:	6023      	strmi	r3, [r4, #0]
 800656c:	b91e      	cbnz	r6, 8006576 <_printf_i+0x196>
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	f023 0320 	bic.w	r3, r3, #32
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	2310      	movs	r3, #16
 8006578:	e7b0      	b.n	80064dc <_printf_i+0xfc>
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	f043 0320 	orr.w	r3, r3, #32
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	2378      	movs	r3, #120	; 0x78
 8006584:	4828      	ldr	r0, [pc, #160]	; (8006628 <_printf_i+0x248>)
 8006586:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800658a:	e7e3      	b.n	8006554 <_printf_i+0x174>
 800658c:	0659      	lsls	r1, r3, #25
 800658e:	bf48      	it	mi
 8006590:	b2b6      	uxthmi	r6, r6
 8006592:	e7e6      	b.n	8006562 <_printf_i+0x182>
 8006594:	4615      	mov	r5, r2
 8006596:	e7bb      	b.n	8006510 <_printf_i+0x130>
 8006598:	682b      	ldr	r3, [r5, #0]
 800659a:	6826      	ldr	r6, [r4, #0]
 800659c:	6961      	ldr	r1, [r4, #20]
 800659e:	1d18      	adds	r0, r3, #4
 80065a0:	6028      	str	r0, [r5, #0]
 80065a2:	0635      	lsls	r5, r6, #24
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	d501      	bpl.n	80065ac <_printf_i+0x1cc>
 80065a8:	6019      	str	r1, [r3, #0]
 80065aa:	e002      	b.n	80065b2 <_printf_i+0x1d2>
 80065ac:	0670      	lsls	r0, r6, #25
 80065ae:	d5fb      	bpl.n	80065a8 <_printf_i+0x1c8>
 80065b0:	8019      	strh	r1, [r3, #0]
 80065b2:	2300      	movs	r3, #0
 80065b4:	6123      	str	r3, [r4, #16]
 80065b6:	4615      	mov	r5, r2
 80065b8:	e7ba      	b.n	8006530 <_printf_i+0x150>
 80065ba:	682b      	ldr	r3, [r5, #0]
 80065bc:	1d1a      	adds	r2, r3, #4
 80065be:	602a      	str	r2, [r5, #0]
 80065c0:	681d      	ldr	r5, [r3, #0]
 80065c2:	6862      	ldr	r2, [r4, #4]
 80065c4:	2100      	movs	r1, #0
 80065c6:	4628      	mov	r0, r5
 80065c8:	f7f9 fe42 	bl	8000250 <memchr>
 80065cc:	b108      	cbz	r0, 80065d2 <_printf_i+0x1f2>
 80065ce:	1b40      	subs	r0, r0, r5
 80065d0:	6060      	str	r0, [r4, #4]
 80065d2:	6863      	ldr	r3, [r4, #4]
 80065d4:	6123      	str	r3, [r4, #16]
 80065d6:	2300      	movs	r3, #0
 80065d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065dc:	e7a8      	b.n	8006530 <_printf_i+0x150>
 80065de:	6923      	ldr	r3, [r4, #16]
 80065e0:	462a      	mov	r2, r5
 80065e2:	4649      	mov	r1, r9
 80065e4:	4640      	mov	r0, r8
 80065e6:	47d0      	blx	sl
 80065e8:	3001      	adds	r0, #1
 80065ea:	d0ab      	beq.n	8006544 <_printf_i+0x164>
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	079b      	lsls	r3, r3, #30
 80065f0:	d413      	bmi.n	800661a <_printf_i+0x23a>
 80065f2:	68e0      	ldr	r0, [r4, #12]
 80065f4:	9b03      	ldr	r3, [sp, #12]
 80065f6:	4298      	cmp	r0, r3
 80065f8:	bfb8      	it	lt
 80065fa:	4618      	movlt	r0, r3
 80065fc:	e7a4      	b.n	8006548 <_printf_i+0x168>
 80065fe:	2301      	movs	r3, #1
 8006600:	4632      	mov	r2, r6
 8006602:	4649      	mov	r1, r9
 8006604:	4640      	mov	r0, r8
 8006606:	47d0      	blx	sl
 8006608:	3001      	adds	r0, #1
 800660a:	d09b      	beq.n	8006544 <_printf_i+0x164>
 800660c:	3501      	adds	r5, #1
 800660e:	68e3      	ldr	r3, [r4, #12]
 8006610:	9903      	ldr	r1, [sp, #12]
 8006612:	1a5b      	subs	r3, r3, r1
 8006614:	42ab      	cmp	r3, r5
 8006616:	dcf2      	bgt.n	80065fe <_printf_i+0x21e>
 8006618:	e7eb      	b.n	80065f2 <_printf_i+0x212>
 800661a:	2500      	movs	r5, #0
 800661c:	f104 0619 	add.w	r6, r4, #25
 8006620:	e7f5      	b.n	800660e <_printf_i+0x22e>
 8006622:	bf00      	nop
 8006624:	0802ff7a 	.word	0x0802ff7a
 8006628:	0802ff8b 	.word	0x0802ff8b

0800662c <_scanf_float>:
 800662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006630:	b087      	sub	sp, #28
 8006632:	4617      	mov	r7, r2
 8006634:	9303      	str	r3, [sp, #12]
 8006636:	688b      	ldr	r3, [r1, #8]
 8006638:	1e5a      	subs	r2, r3, #1
 800663a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800663e:	bf83      	ittte	hi
 8006640:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006644:	195b      	addhi	r3, r3, r5
 8006646:	9302      	strhi	r3, [sp, #8]
 8006648:	2300      	movls	r3, #0
 800664a:	bf86      	itte	hi
 800664c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006650:	608b      	strhi	r3, [r1, #8]
 8006652:	9302      	strls	r3, [sp, #8]
 8006654:	680b      	ldr	r3, [r1, #0]
 8006656:	468b      	mov	fp, r1
 8006658:	2500      	movs	r5, #0
 800665a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800665e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006662:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006666:	4680      	mov	r8, r0
 8006668:	460c      	mov	r4, r1
 800666a:	465e      	mov	r6, fp
 800666c:	46aa      	mov	sl, r5
 800666e:	46a9      	mov	r9, r5
 8006670:	9501      	str	r5, [sp, #4]
 8006672:	68a2      	ldr	r2, [r4, #8]
 8006674:	b152      	cbz	r2, 800668c <_scanf_float+0x60>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b4e      	cmp	r3, #78	; 0x4e
 800667c:	d864      	bhi.n	8006748 <_scanf_float+0x11c>
 800667e:	2b40      	cmp	r3, #64	; 0x40
 8006680:	d83c      	bhi.n	80066fc <_scanf_float+0xd0>
 8006682:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006686:	b2c8      	uxtb	r0, r1
 8006688:	280e      	cmp	r0, #14
 800668a:	d93a      	bls.n	8006702 <_scanf_float+0xd6>
 800668c:	f1b9 0f00 	cmp.w	r9, #0
 8006690:	d003      	beq.n	800669a <_scanf_float+0x6e>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006698:	6023      	str	r3, [r4, #0]
 800669a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800669e:	f1ba 0f01 	cmp.w	sl, #1
 80066a2:	f200 8113 	bhi.w	80068cc <_scanf_float+0x2a0>
 80066a6:	455e      	cmp	r6, fp
 80066a8:	f200 8105 	bhi.w	80068b6 <_scanf_float+0x28a>
 80066ac:	2501      	movs	r5, #1
 80066ae:	4628      	mov	r0, r5
 80066b0:	b007      	add	sp, #28
 80066b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80066ba:	2a0d      	cmp	r2, #13
 80066bc:	d8e6      	bhi.n	800668c <_scanf_float+0x60>
 80066be:	a101      	add	r1, pc, #4	; (adr r1, 80066c4 <_scanf_float+0x98>)
 80066c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80066c4:	08006803 	.word	0x08006803
 80066c8:	0800668d 	.word	0x0800668d
 80066cc:	0800668d 	.word	0x0800668d
 80066d0:	0800668d 	.word	0x0800668d
 80066d4:	08006863 	.word	0x08006863
 80066d8:	0800683b 	.word	0x0800683b
 80066dc:	0800668d 	.word	0x0800668d
 80066e0:	0800668d 	.word	0x0800668d
 80066e4:	08006811 	.word	0x08006811
 80066e8:	0800668d 	.word	0x0800668d
 80066ec:	0800668d 	.word	0x0800668d
 80066f0:	0800668d 	.word	0x0800668d
 80066f4:	0800668d 	.word	0x0800668d
 80066f8:	080067c9 	.word	0x080067c9
 80066fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006700:	e7db      	b.n	80066ba <_scanf_float+0x8e>
 8006702:	290e      	cmp	r1, #14
 8006704:	d8c2      	bhi.n	800668c <_scanf_float+0x60>
 8006706:	a001      	add	r0, pc, #4	; (adr r0, 800670c <_scanf_float+0xe0>)
 8006708:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800670c:	080067bb 	.word	0x080067bb
 8006710:	0800668d 	.word	0x0800668d
 8006714:	080067bb 	.word	0x080067bb
 8006718:	0800684f 	.word	0x0800684f
 800671c:	0800668d 	.word	0x0800668d
 8006720:	08006769 	.word	0x08006769
 8006724:	080067a5 	.word	0x080067a5
 8006728:	080067a5 	.word	0x080067a5
 800672c:	080067a5 	.word	0x080067a5
 8006730:	080067a5 	.word	0x080067a5
 8006734:	080067a5 	.word	0x080067a5
 8006738:	080067a5 	.word	0x080067a5
 800673c:	080067a5 	.word	0x080067a5
 8006740:	080067a5 	.word	0x080067a5
 8006744:	080067a5 	.word	0x080067a5
 8006748:	2b6e      	cmp	r3, #110	; 0x6e
 800674a:	d809      	bhi.n	8006760 <_scanf_float+0x134>
 800674c:	2b60      	cmp	r3, #96	; 0x60
 800674e:	d8b2      	bhi.n	80066b6 <_scanf_float+0x8a>
 8006750:	2b54      	cmp	r3, #84	; 0x54
 8006752:	d077      	beq.n	8006844 <_scanf_float+0x218>
 8006754:	2b59      	cmp	r3, #89	; 0x59
 8006756:	d199      	bne.n	800668c <_scanf_float+0x60>
 8006758:	2d07      	cmp	r5, #7
 800675a:	d197      	bne.n	800668c <_scanf_float+0x60>
 800675c:	2508      	movs	r5, #8
 800675e:	e029      	b.n	80067b4 <_scanf_float+0x188>
 8006760:	2b74      	cmp	r3, #116	; 0x74
 8006762:	d06f      	beq.n	8006844 <_scanf_float+0x218>
 8006764:	2b79      	cmp	r3, #121	; 0x79
 8006766:	e7f6      	b.n	8006756 <_scanf_float+0x12a>
 8006768:	6821      	ldr	r1, [r4, #0]
 800676a:	05c8      	lsls	r0, r1, #23
 800676c:	d51a      	bpl.n	80067a4 <_scanf_float+0x178>
 800676e:	9b02      	ldr	r3, [sp, #8]
 8006770:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006774:	6021      	str	r1, [r4, #0]
 8006776:	f109 0901 	add.w	r9, r9, #1
 800677a:	b11b      	cbz	r3, 8006784 <_scanf_float+0x158>
 800677c:	3b01      	subs	r3, #1
 800677e:	3201      	adds	r2, #1
 8006780:	9302      	str	r3, [sp, #8]
 8006782:	60a2      	str	r2, [r4, #8]
 8006784:	68a3      	ldr	r3, [r4, #8]
 8006786:	3b01      	subs	r3, #1
 8006788:	60a3      	str	r3, [r4, #8]
 800678a:	6923      	ldr	r3, [r4, #16]
 800678c:	3301      	adds	r3, #1
 800678e:	6123      	str	r3, [r4, #16]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3b01      	subs	r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	607b      	str	r3, [r7, #4]
 8006798:	f340 8084 	ble.w	80068a4 <_scanf_float+0x278>
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	3301      	adds	r3, #1
 80067a0:	603b      	str	r3, [r7, #0]
 80067a2:	e766      	b.n	8006672 <_scanf_float+0x46>
 80067a4:	eb1a 0f05 	cmn.w	sl, r5
 80067a8:	f47f af70 	bne.w	800668c <_scanf_float+0x60>
 80067ac:	6822      	ldr	r2, [r4, #0]
 80067ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80067b2:	6022      	str	r2, [r4, #0]
 80067b4:	f806 3b01 	strb.w	r3, [r6], #1
 80067b8:	e7e4      	b.n	8006784 <_scanf_float+0x158>
 80067ba:	6822      	ldr	r2, [r4, #0]
 80067bc:	0610      	lsls	r0, r2, #24
 80067be:	f57f af65 	bpl.w	800668c <_scanf_float+0x60>
 80067c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067c6:	e7f4      	b.n	80067b2 <_scanf_float+0x186>
 80067c8:	f1ba 0f00 	cmp.w	sl, #0
 80067cc:	d10e      	bne.n	80067ec <_scanf_float+0x1c0>
 80067ce:	f1b9 0f00 	cmp.w	r9, #0
 80067d2:	d10e      	bne.n	80067f2 <_scanf_float+0x1c6>
 80067d4:	6822      	ldr	r2, [r4, #0]
 80067d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80067da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80067de:	d108      	bne.n	80067f2 <_scanf_float+0x1c6>
 80067e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80067e4:	6022      	str	r2, [r4, #0]
 80067e6:	f04f 0a01 	mov.w	sl, #1
 80067ea:	e7e3      	b.n	80067b4 <_scanf_float+0x188>
 80067ec:	f1ba 0f02 	cmp.w	sl, #2
 80067f0:	d055      	beq.n	800689e <_scanf_float+0x272>
 80067f2:	2d01      	cmp	r5, #1
 80067f4:	d002      	beq.n	80067fc <_scanf_float+0x1d0>
 80067f6:	2d04      	cmp	r5, #4
 80067f8:	f47f af48 	bne.w	800668c <_scanf_float+0x60>
 80067fc:	3501      	adds	r5, #1
 80067fe:	b2ed      	uxtb	r5, r5
 8006800:	e7d8      	b.n	80067b4 <_scanf_float+0x188>
 8006802:	f1ba 0f01 	cmp.w	sl, #1
 8006806:	f47f af41 	bne.w	800668c <_scanf_float+0x60>
 800680a:	f04f 0a02 	mov.w	sl, #2
 800680e:	e7d1      	b.n	80067b4 <_scanf_float+0x188>
 8006810:	b97d      	cbnz	r5, 8006832 <_scanf_float+0x206>
 8006812:	f1b9 0f00 	cmp.w	r9, #0
 8006816:	f47f af3c 	bne.w	8006692 <_scanf_float+0x66>
 800681a:	6822      	ldr	r2, [r4, #0]
 800681c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006820:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006824:	f47f af39 	bne.w	800669a <_scanf_float+0x6e>
 8006828:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800682c:	6022      	str	r2, [r4, #0]
 800682e:	2501      	movs	r5, #1
 8006830:	e7c0      	b.n	80067b4 <_scanf_float+0x188>
 8006832:	2d03      	cmp	r5, #3
 8006834:	d0e2      	beq.n	80067fc <_scanf_float+0x1d0>
 8006836:	2d05      	cmp	r5, #5
 8006838:	e7de      	b.n	80067f8 <_scanf_float+0x1cc>
 800683a:	2d02      	cmp	r5, #2
 800683c:	f47f af26 	bne.w	800668c <_scanf_float+0x60>
 8006840:	2503      	movs	r5, #3
 8006842:	e7b7      	b.n	80067b4 <_scanf_float+0x188>
 8006844:	2d06      	cmp	r5, #6
 8006846:	f47f af21 	bne.w	800668c <_scanf_float+0x60>
 800684a:	2507      	movs	r5, #7
 800684c:	e7b2      	b.n	80067b4 <_scanf_float+0x188>
 800684e:	6822      	ldr	r2, [r4, #0]
 8006850:	0591      	lsls	r1, r2, #22
 8006852:	f57f af1b 	bpl.w	800668c <_scanf_float+0x60>
 8006856:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800685a:	6022      	str	r2, [r4, #0]
 800685c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006860:	e7a8      	b.n	80067b4 <_scanf_float+0x188>
 8006862:	6822      	ldr	r2, [r4, #0]
 8006864:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006868:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800686c:	d006      	beq.n	800687c <_scanf_float+0x250>
 800686e:	0550      	lsls	r0, r2, #21
 8006870:	f57f af0c 	bpl.w	800668c <_scanf_float+0x60>
 8006874:	f1b9 0f00 	cmp.w	r9, #0
 8006878:	f43f af0f 	beq.w	800669a <_scanf_float+0x6e>
 800687c:	0591      	lsls	r1, r2, #22
 800687e:	bf58      	it	pl
 8006880:	9901      	ldrpl	r1, [sp, #4]
 8006882:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006886:	bf58      	it	pl
 8006888:	eba9 0101 	subpl.w	r1, r9, r1
 800688c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006890:	bf58      	it	pl
 8006892:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006896:	6022      	str	r2, [r4, #0]
 8006898:	f04f 0900 	mov.w	r9, #0
 800689c:	e78a      	b.n	80067b4 <_scanf_float+0x188>
 800689e:	f04f 0a03 	mov.w	sl, #3
 80068a2:	e787      	b.n	80067b4 <_scanf_float+0x188>
 80068a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80068a8:	4639      	mov	r1, r7
 80068aa:	4640      	mov	r0, r8
 80068ac:	4798      	blx	r3
 80068ae:	2800      	cmp	r0, #0
 80068b0:	f43f aedf 	beq.w	8006672 <_scanf_float+0x46>
 80068b4:	e6ea      	b.n	800668c <_scanf_float+0x60>
 80068b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068be:	463a      	mov	r2, r7
 80068c0:	4640      	mov	r0, r8
 80068c2:	4798      	blx	r3
 80068c4:	6923      	ldr	r3, [r4, #16]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	6123      	str	r3, [r4, #16]
 80068ca:	e6ec      	b.n	80066a6 <_scanf_float+0x7a>
 80068cc:	1e6b      	subs	r3, r5, #1
 80068ce:	2b06      	cmp	r3, #6
 80068d0:	d825      	bhi.n	800691e <_scanf_float+0x2f2>
 80068d2:	2d02      	cmp	r5, #2
 80068d4:	d836      	bhi.n	8006944 <_scanf_float+0x318>
 80068d6:	455e      	cmp	r6, fp
 80068d8:	f67f aee8 	bls.w	80066ac <_scanf_float+0x80>
 80068dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068e4:	463a      	mov	r2, r7
 80068e6:	4640      	mov	r0, r8
 80068e8:	4798      	blx	r3
 80068ea:	6923      	ldr	r3, [r4, #16]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	6123      	str	r3, [r4, #16]
 80068f0:	e7f1      	b.n	80068d6 <_scanf_float+0x2aa>
 80068f2:	9802      	ldr	r0, [sp, #8]
 80068f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80068fc:	9002      	str	r0, [sp, #8]
 80068fe:	463a      	mov	r2, r7
 8006900:	4640      	mov	r0, r8
 8006902:	4798      	blx	r3
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	3b01      	subs	r3, #1
 8006908:	6123      	str	r3, [r4, #16]
 800690a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800690e:	fa5f fa8a 	uxtb.w	sl, sl
 8006912:	f1ba 0f02 	cmp.w	sl, #2
 8006916:	d1ec      	bne.n	80068f2 <_scanf_float+0x2c6>
 8006918:	3d03      	subs	r5, #3
 800691a:	b2ed      	uxtb	r5, r5
 800691c:	1b76      	subs	r6, r6, r5
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	05da      	lsls	r2, r3, #23
 8006922:	d52f      	bpl.n	8006984 <_scanf_float+0x358>
 8006924:	055b      	lsls	r3, r3, #21
 8006926:	d510      	bpl.n	800694a <_scanf_float+0x31e>
 8006928:	455e      	cmp	r6, fp
 800692a:	f67f aebf 	bls.w	80066ac <_scanf_float+0x80>
 800692e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006932:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006936:	463a      	mov	r2, r7
 8006938:	4640      	mov	r0, r8
 800693a:	4798      	blx	r3
 800693c:	6923      	ldr	r3, [r4, #16]
 800693e:	3b01      	subs	r3, #1
 8006940:	6123      	str	r3, [r4, #16]
 8006942:	e7f1      	b.n	8006928 <_scanf_float+0x2fc>
 8006944:	46aa      	mov	sl, r5
 8006946:	9602      	str	r6, [sp, #8]
 8006948:	e7df      	b.n	800690a <_scanf_float+0x2de>
 800694a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800694e:	6923      	ldr	r3, [r4, #16]
 8006950:	2965      	cmp	r1, #101	; 0x65
 8006952:	f103 33ff 	add.w	r3, r3, #4294967295
 8006956:	f106 35ff 	add.w	r5, r6, #4294967295
 800695a:	6123      	str	r3, [r4, #16]
 800695c:	d00c      	beq.n	8006978 <_scanf_float+0x34c>
 800695e:	2945      	cmp	r1, #69	; 0x45
 8006960:	d00a      	beq.n	8006978 <_scanf_float+0x34c>
 8006962:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006966:	463a      	mov	r2, r7
 8006968:	4640      	mov	r0, r8
 800696a:	4798      	blx	r3
 800696c:	6923      	ldr	r3, [r4, #16]
 800696e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006972:	3b01      	subs	r3, #1
 8006974:	1eb5      	subs	r5, r6, #2
 8006976:	6123      	str	r3, [r4, #16]
 8006978:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800697c:	463a      	mov	r2, r7
 800697e:	4640      	mov	r0, r8
 8006980:	4798      	blx	r3
 8006982:	462e      	mov	r6, r5
 8006984:	6825      	ldr	r5, [r4, #0]
 8006986:	f015 0510 	ands.w	r5, r5, #16
 800698a:	d14e      	bne.n	8006a2a <_scanf_float+0x3fe>
 800698c:	7035      	strb	r5, [r6, #0]
 800698e:	6823      	ldr	r3, [r4, #0]
 8006990:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006998:	d119      	bne.n	80069ce <_scanf_float+0x3a2>
 800699a:	9b01      	ldr	r3, [sp, #4]
 800699c:	454b      	cmp	r3, r9
 800699e:	eba3 0209 	sub.w	r2, r3, r9
 80069a2:	d121      	bne.n	80069e8 <_scanf_float+0x3bc>
 80069a4:	2200      	movs	r2, #0
 80069a6:	4659      	mov	r1, fp
 80069a8:	4640      	mov	r0, r8
 80069aa:	f000 fe3b 	bl	8007624 <_strtod_r>
 80069ae:	6822      	ldr	r2, [r4, #0]
 80069b0:	9b03      	ldr	r3, [sp, #12]
 80069b2:	f012 0f02 	tst.w	r2, #2
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	d021      	beq.n	80069fe <_scanf_float+0x3d2>
 80069ba:	9903      	ldr	r1, [sp, #12]
 80069bc:	1d1a      	adds	r2, r3, #4
 80069be:	600a      	str	r2, [r1, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	ed83 0b00 	vstr	d0, [r3]
 80069c6:	68e3      	ldr	r3, [r4, #12]
 80069c8:	3301      	adds	r3, #1
 80069ca:	60e3      	str	r3, [r4, #12]
 80069cc:	e66f      	b.n	80066ae <_scanf_float+0x82>
 80069ce:	9b04      	ldr	r3, [sp, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d0e7      	beq.n	80069a4 <_scanf_float+0x378>
 80069d4:	9905      	ldr	r1, [sp, #20]
 80069d6:	230a      	movs	r3, #10
 80069d8:	462a      	mov	r2, r5
 80069da:	3101      	adds	r1, #1
 80069dc:	4640      	mov	r0, r8
 80069de:	f000 fea9 	bl	8007734 <_strtol_r>
 80069e2:	9b04      	ldr	r3, [sp, #16]
 80069e4:	9e05      	ldr	r6, [sp, #20]
 80069e6:	1ac2      	subs	r2, r0, r3
 80069e8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80069ec:	429e      	cmp	r6, r3
 80069ee:	bf28      	it	cs
 80069f0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80069f4:	490e      	ldr	r1, [pc, #56]	; (8006a30 <_scanf_float+0x404>)
 80069f6:	4630      	mov	r0, r6
 80069f8:	f000 f824 	bl	8006a44 <siprintf>
 80069fc:	e7d2      	b.n	80069a4 <_scanf_float+0x378>
 80069fe:	9903      	ldr	r1, [sp, #12]
 8006a00:	f012 0f04 	tst.w	r2, #4
 8006a04:	f103 0204 	add.w	r2, r3, #4
 8006a08:	600a      	str	r2, [r1, #0]
 8006a0a:	d1d9      	bne.n	80069c0 <_scanf_float+0x394>
 8006a0c:	eeb4 0b40 	vcmp.f64	d0, d0
 8006a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a14:	681e      	ldr	r6, [r3, #0]
 8006a16:	d705      	bvc.n	8006a24 <_scanf_float+0x3f8>
 8006a18:	4806      	ldr	r0, [pc, #24]	; (8006a34 <_scanf_float+0x408>)
 8006a1a:	f000 f80d 	bl	8006a38 <nanf>
 8006a1e:	ed86 0a00 	vstr	s0, [r6]
 8006a22:	e7d0      	b.n	80069c6 <_scanf_float+0x39a>
 8006a24:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006a28:	e7f9      	b.n	8006a1e <_scanf_float+0x3f2>
 8006a2a:	2500      	movs	r5, #0
 8006a2c:	e63f      	b.n	80066ae <_scanf_float+0x82>
 8006a2e:	bf00      	nop
 8006a30:	0802ff9c 	.word	0x0802ff9c
 8006a34:	080303a8 	.word	0x080303a8

08006a38 <nanf>:
 8006a38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006a40 <nanf+0x8>
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	7fc00000 	.word	0x7fc00000

08006a44 <siprintf>:
 8006a44:	b40e      	push	{r1, r2, r3}
 8006a46:	b500      	push	{lr}
 8006a48:	b09c      	sub	sp, #112	; 0x70
 8006a4a:	ab1d      	add	r3, sp, #116	; 0x74
 8006a4c:	9002      	str	r0, [sp, #8]
 8006a4e:	9006      	str	r0, [sp, #24]
 8006a50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a54:	4809      	ldr	r0, [pc, #36]	; (8006a7c <siprintf+0x38>)
 8006a56:	9107      	str	r1, [sp, #28]
 8006a58:	9104      	str	r1, [sp, #16]
 8006a5a:	4909      	ldr	r1, [pc, #36]	; (8006a80 <siprintf+0x3c>)
 8006a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a60:	9105      	str	r1, [sp, #20]
 8006a62:	6800      	ldr	r0, [r0, #0]
 8006a64:	9301      	str	r3, [sp, #4]
 8006a66:	a902      	add	r1, sp, #8
 8006a68:	f002 fe0c 	bl	8009684 <_svfiprintf_r>
 8006a6c:	9b02      	ldr	r3, [sp, #8]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	b01c      	add	sp, #112	; 0x70
 8006a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a78:	b003      	add	sp, #12
 8006a7a:	4770      	bx	lr
 8006a7c:	20000018 	.word	0x20000018
 8006a80:	ffff0208 	.word	0xffff0208

08006a84 <sulp>:
 8006a84:	b570      	push	{r4, r5, r6, lr}
 8006a86:	4604      	mov	r4, r0
 8006a88:	460d      	mov	r5, r1
 8006a8a:	4616      	mov	r6, r2
 8006a8c:	ec45 4b10 	vmov	d0, r4, r5
 8006a90:	f002 fb5a 	bl	8009148 <__ulp>
 8006a94:	b17e      	cbz	r6, 8006ab6 <sulp+0x32>
 8006a96:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006a9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	dd09      	ble.n	8006ab6 <sulp+0x32>
 8006aa2:	051b      	lsls	r3, r3, #20
 8006aa4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8006aae:	ec41 0b17 	vmov	d7, r0, r1
 8006ab2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006ab6:	bd70      	pop	{r4, r5, r6, pc}

08006ab8 <_strtod_l>:
 8006ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006abc:	ed2d 8b0e 	vpush	{d8-d14}
 8006ac0:	b097      	sub	sp, #92	; 0x5c
 8006ac2:	461f      	mov	r7, r3
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	9312      	str	r3, [sp, #72]	; 0x48
 8006ac8:	4ba1      	ldr	r3, [pc, #644]	; (8006d50 <_strtod_l+0x298>)
 8006aca:	920d      	str	r2, [sp, #52]	; 0x34
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	9307      	str	r3, [sp, #28]
 8006ad0:	4604      	mov	r4, r0
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	468b      	mov	fp, r1
 8006ad6:	f7f9 fbb3 	bl	8000240 <strlen>
 8006ada:	f04f 0800 	mov.w	r8, #0
 8006ade:	4605      	mov	r5, r0
 8006ae0:	f04f 0900 	mov.w	r9, #0
 8006ae4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8006ae8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006aea:	7813      	ldrb	r3, [r2, #0]
 8006aec:	2b2b      	cmp	r3, #43	; 0x2b
 8006aee:	d04d      	beq.n	8006b8c <_strtod_l+0xd4>
 8006af0:	d83a      	bhi.n	8006b68 <_strtod_l+0xb0>
 8006af2:	2b0d      	cmp	r3, #13
 8006af4:	d833      	bhi.n	8006b5e <_strtod_l+0xa6>
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	d833      	bhi.n	8006b62 <_strtod_l+0xaa>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d03d      	beq.n	8006b7a <_strtod_l+0xc2>
 8006afe:	2300      	movs	r3, #0
 8006b00:	9308      	str	r3, [sp, #32]
 8006b02:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8006b04:	7833      	ldrb	r3, [r6, #0]
 8006b06:	2b30      	cmp	r3, #48	; 0x30
 8006b08:	f040 80b0 	bne.w	8006c6c <_strtod_l+0x1b4>
 8006b0c:	7873      	ldrb	r3, [r6, #1]
 8006b0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006b12:	2b58      	cmp	r3, #88	; 0x58
 8006b14:	d167      	bne.n	8006be6 <_strtod_l+0x12e>
 8006b16:	9b08      	ldr	r3, [sp, #32]
 8006b18:	9301      	str	r3, [sp, #4]
 8006b1a:	ab12      	add	r3, sp, #72	; 0x48
 8006b1c:	9702      	str	r7, [sp, #8]
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	4a8c      	ldr	r2, [pc, #560]	; (8006d54 <_strtod_l+0x29c>)
 8006b22:	ab13      	add	r3, sp, #76	; 0x4c
 8006b24:	a911      	add	r1, sp, #68	; 0x44
 8006b26:	4620      	mov	r0, r4
 8006b28:	f001 fc68 	bl	80083fc <__gethex>
 8006b2c:	f010 0507 	ands.w	r5, r0, #7
 8006b30:	4607      	mov	r7, r0
 8006b32:	d005      	beq.n	8006b40 <_strtod_l+0x88>
 8006b34:	2d06      	cmp	r5, #6
 8006b36:	d12b      	bne.n	8006b90 <_strtod_l+0xd8>
 8006b38:	3601      	adds	r6, #1
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	9611      	str	r6, [sp, #68]	; 0x44
 8006b3e:	9308      	str	r3, [sp, #32]
 8006b40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f040 854e 	bne.w	80075e4 <_strtod_l+0xb2c>
 8006b48:	9b08      	ldr	r3, [sp, #32]
 8006b4a:	b1e3      	cbz	r3, 8006b86 <_strtod_l+0xce>
 8006b4c:	ec49 8b17 	vmov	d7, r8, r9
 8006b50:	eeb1 0b47 	vneg.f64	d0, d7
 8006b54:	b017      	add	sp, #92	; 0x5c
 8006b56:	ecbd 8b0e 	vpop	{d8-d14}
 8006b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b5e:	2b20      	cmp	r3, #32
 8006b60:	d1cd      	bne.n	8006afe <_strtod_l+0x46>
 8006b62:	3201      	adds	r2, #1
 8006b64:	9211      	str	r2, [sp, #68]	; 0x44
 8006b66:	e7bf      	b.n	8006ae8 <_strtod_l+0x30>
 8006b68:	2b2d      	cmp	r3, #45	; 0x2d
 8006b6a:	d1c8      	bne.n	8006afe <_strtod_l+0x46>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	9308      	str	r3, [sp, #32]
 8006b70:	1c53      	adds	r3, r2, #1
 8006b72:	9311      	str	r3, [sp, #68]	; 0x44
 8006b74:	7853      	ldrb	r3, [r2, #1]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1c3      	bne.n	8006b02 <_strtod_l+0x4a>
 8006b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b7c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f040 852d 	bne.w	80075e0 <_strtod_l+0xb28>
 8006b86:	ec49 8b10 	vmov	d0, r8, r9
 8006b8a:	e7e3      	b.n	8006b54 <_strtod_l+0x9c>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e7ee      	b.n	8006b6e <_strtod_l+0xb6>
 8006b90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b92:	b13a      	cbz	r2, 8006ba4 <_strtod_l+0xec>
 8006b94:	2135      	movs	r1, #53	; 0x35
 8006b96:	a814      	add	r0, sp, #80	; 0x50
 8006b98:	f002 fbde 	bl	8009358 <__copybits>
 8006b9c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f001 ffa0 	bl	8008ae4 <_Bfree>
 8006ba4:	3d01      	subs	r5, #1
 8006ba6:	2d04      	cmp	r5, #4
 8006ba8:	d806      	bhi.n	8006bb8 <_strtod_l+0x100>
 8006baa:	e8df f005 	tbb	[pc, r5]
 8006bae:	030a      	.short	0x030a
 8006bb0:	1714      	.short	0x1714
 8006bb2:	0a          	.byte	0x0a
 8006bb3:	00          	.byte	0x00
 8006bb4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8006bb8:	073f      	lsls	r7, r7, #28
 8006bba:	d5c1      	bpl.n	8006b40 <_strtod_l+0x88>
 8006bbc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006bc0:	e7be      	b.n	8006b40 <_strtod_l+0x88>
 8006bc2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8006bc6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006bc8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006bcc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006bd0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006bd4:	e7f0      	b.n	8006bb8 <_strtod_l+0x100>
 8006bd6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8006d58 <_strtod_l+0x2a0>
 8006bda:	e7ed      	b.n	8006bb8 <_strtod_l+0x100>
 8006bdc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006be0:	f04f 38ff 	mov.w	r8, #4294967295
 8006be4:	e7e8      	b.n	8006bb8 <_strtod_l+0x100>
 8006be6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	9211      	str	r2, [sp, #68]	; 0x44
 8006bec:	785b      	ldrb	r3, [r3, #1]
 8006bee:	2b30      	cmp	r3, #48	; 0x30
 8006bf0:	d0f9      	beq.n	8006be6 <_strtod_l+0x12e>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0a4      	beq.n	8006b40 <_strtod_l+0x88>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	f04f 0a00 	mov.w	sl, #0
 8006bfc:	9304      	str	r3, [sp, #16]
 8006bfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c00:	930a      	str	r3, [sp, #40]	; 0x28
 8006c02:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006c06:	f8cd a018 	str.w	sl, [sp, #24]
 8006c0a:	220a      	movs	r2, #10
 8006c0c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006c0e:	7807      	ldrb	r7, [r0, #0]
 8006c10:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006c14:	b2d9      	uxtb	r1, r3
 8006c16:	2909      	cmp	r1, #9
 8006c18:	d92a      	bls.n	8006c70 <_strtod_l+0x1b8>
 8006c1a:	9907      	ldr	r1, [sp, #28]
 8006c1c:	462a      	mov	r2, r5
 8006c1e:	f002 fe4b 	bl	80098b8 <strncmp>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d033      	beq.n	8006c8e <_strtod_l+0x1d6>
 8006c26:	2000      	movs	r0, #0
 8006c28:	9b06      	ldr	r3, [sp, #24]
 8006c2a:	463a      	mov	r2, r7
 8006c2c:	4601      	mov	r1, r0
 8006c2e:	4607      	mov	r7, r0
 8006c30:	2a65      	cmp	r2, #101	; 0x65
 8006c32:	d001      	beq.n	8006c38 <_strtod_l+0x180>
 8006c34:	2a45      	cmp	r2, #69	; 0x45
 8006c36:	d117      	bne.n	8006c68 <_strtod_l+0x1b0>
 8006c38:	b91b      	cbnz	r3, 8006c42 <_strtod_l+0x18a>
 8006c3a:	9b04      	ldr	r3, [sp, #16]
 8006c3c:	4303      	orrs	r3, r0
 8006c3e:	d09c      	beq.n	8006b7a <_strtod_l+0xc2>
 8006c40:	2300      	movs	r3, #0
 8006c42:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8006c46:	f10b 0201 	add.w	r2, fp, #1
 8006c4a:	9211      	str	r2, [sp, #68]	; 0x44
 8006c4c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8006c50:	2a2b      	cmp	r2, #43	; 0x2b
 8006c52:	d071      	beq.n	8006d38 <_strtod_l+0x280>
 8006c54:	2a2d      	cmp	r2, #45	; 0x2d
 8006c56:	d077      	beq.n	8006d48 <_strtod_l+0x290>
 8006c58:	f04f 0e00 	mov.w	lr, #0
 8006c5c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006c60:	2d09      	cmp	r5, #9
 8006c62:	d97f      	bls.n	8006d64 <_strtod_l+0x2ac>
 8006c64:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8006c68:	2500      	movs	r5, #0
 8006c6a:	e09b      	b.n	8006da4 <_strtod_l+0x2ec>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	e7c3      	b.n	8006bf8 <_strtod_l+0x140>
 8006c70:	9906      	ldr	r1, [sp, #24]
 8006c72:	2908      	cmp	r1, #8
 8006c74:	bfdd      	ittte	le
 8006c76:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006c78:	fb02 3301 	mlale	r3, r2, r1, r3
 8006c7c:	9309      	strle	r3, [sp, #36]	; 0x24
 8006c7e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006c82:	9b06      	ldr	r3, [sp, #24]
 8006c84:	3001      	adds	r0, #1
 8006c86:	3301      	adds	r3, #1
 8006c88:	9306      	str	r3, [sp, #24]
 8006c8a:	9011      	str	r0, [sp, #68]	; 0x44
 8006c8c:	e7be      	b.n	8006c0c <_strtod_l+0x154>
 8006c8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c90:	195a      	adds	r2, r3, r5
 8006c92:	9211      	str	r2, [sp, #68]	; 0x44
 8006c94:	5d5a      	ldrb	r2, [r3, r5]
 8006c96:	9b06      	ldr	r3, [sp, #24]
 8006c98:	b3a3      	cbz	r3, 8006d04 <_strtod_l+0x24c>
 8006c9a:	4607      	mov	r7, r0
 8006c9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006ca0:	2909      	cmp	r1, #9
 8006ca2:	d912      	bls.n	8006cca <_strtod_l+0x212>
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	e7c3      	b.n	8006c30 <_strtod_l+0x178>
 8006ca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	9211      	str	r2, [sp, #68]	; 0x44
 8006cae:	785a      	ldrb	r2, [r3, #1]
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	2a30      	cmp	r2, #48	; 0x30
 8006cb4:	d0f8      	beq.n	8006ca8 <_strtod_l+0x1f0>
 8006cb6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	f200 8497 	bhi.w	80075ee <_strtod_l+0xb36>
 8006cc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8006cc4:	4607      	mov	r7, r0
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	4603      	mov	r3, r0
 8006cca:	3a30      	subs	r2, #48	; 0x30
 8006ccc:	f100 0101 	add.w	r1, r0, #1
 8006cd0:	d012      	beq.n	8006cf8 <_strtod_l+0x240>
 8006cd2:	440f      	add	r7, r1
 8006cd4:	eb00 0c03 	add.w	ip, r0, r3
 8006cd8:	4619      	mov	r1, r3
 8006cda:	250a      	movs	r5, #10
 8006cdc:	4561      	cmp	r1, ip
 8006cde:	d113      	bne.n	8006d08 <_strtod_l+0x250>
 8006ce0:	1819      	adds	r1, r3, r0
 8006ce2:	2908      	cmp	r1, #8
 8006ce4:	f103 0301 	add.w	r3, r3, #1
 8006ce8:	4403      	add	r3, r0
 8006cea:	dc1c      	bgt.n	8006d26 <_strtod_l+0x26e>
 8006cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cee:	210a      	movs	r1, #10
 8006cf0:	fb01 2200 	mla	r2, r1, r0, r2
 8006cf4:	9209      	str	r2, [sp, #36]	; 0x24
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006cfa:	1c50      	adds	r0, r2, #1
 8006cfc:	9011      	str	r0, [sp, #68]	; 0x44
 8006cfe:	7852      	ldrb	r2, [r2, #1]
 8006d00:	4608      	mov	r0, r1
 8006d02:	e7cb      	b.n	8006c9c <_strtod_l+0x1e4>
 8006d04:	9806      	ldr	r0, [sp, #24]
 8006d06:	e7d4      	b.n	8006cb2 <_strtod_l+0x1fa>
 8006d08:	2908      	cmp	r1, #8
 8006d0a:	dc04      	bgt.n	8006d16 <_strtod_l+0x25e>
 8006d0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006d0e:	436e      	muls	r6, r5
 8006d10:	9609      	str	r6, [sp, #36]	; 0x24
 8006d12:	3101      	adds	r1, #1
 8006d14:	e7e2      	b.n	8006cdc <_strtod_l+0x224>
 8006d16:	f101 0e01 	add.w	lr, r1, #1
 8006d1a:	f1be 0f10 	cmp.w	lr, #16
 8006d1e:	bfd8      	it	le
 8006d20:	fb05 fa0a 	mulle.w	sl, r5, sl
 8006d24:	e7f5      	b.n	8006d12 <_strtod_l+0x25a>
 8006d26:	2b10      	cmp	r3, #16
 8006d28:	bfdc      	itt	le
 8006d2a:	210a      	movle	r1, #10
 8006d2c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8006d30:	e7e1      	b.n	8006cf6 <_strtod_l+0x23e>
 8006d32:	2700      	movs	r7, #0
 8006d34:	2101      	movs	r1, #1
 8006d36:	e780      	b.n	8006c3a <_strtod_l+0x182>
 8006d38:	f04f 0e00 	mov.w	lr, #0
 8006d3c:	f10b 0202 	add.w	r2, fp, #2
 8006d40:	9211      	str	r2, [sp, #68]	; 0x44
 8006d42:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8006d46:	e789      	b.n	8006c5c <_strtod_l+0x1a4>
 8006d48:	f04f 0e01 	mov.w	lr, #1
 8006d4c:	e7f6      	b.n	8006d3c <_strtod_l+0x284>
 8006d4e:	bf00      	nop
 8006d50:	080301f0 	.word	0x080301f0
 8006d54:	0802ffa4 	.word	0x0802ffa4
 8006d58:	7ff00000 	.word	0x7ff00000
 8006d5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006d5e:	1c55      	adds	r5, r2, #1
 8006d60:	9511      	str	r5, [sp, #68]	; 0x44
 8006d62:	7852      	ldrb	r2, [r2, #1]
 8006d64:	2a30      	cmp	r2, #48	; 0x30
 8006d66:	d0f9      	beq.n	8006d5c <_strtod_l+0x2a4>
 8006d68:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8006d6c:	2d08      	cmp	r5, #8
 8006d6e:	f63f af7b 	bhi.w	8006c68 <_strtod_l+0x1b0>
 8006d72:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006d76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006d78:	9207      	str	r2, [sp, #28]
 8006d7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006d7c:	1c55      	adds	r5, r2, #1
 8006d7e:	9511      	str	r5, [sp, #68]	; 0x44
 8006d80:	7852      	ldrb	r2, [r2, #1]
 8006d82:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006d86:	2e09      	cmp	r6, #9
 8006d88:	d937      	bls.n	8006dfa <_strtod_l+0x342>
 8006d8a:	9e07      	ldr	r6, [sp, #28]
 8006d8c:	1bad      	subs	r5, r5, r6
 8006d8e:	2d08      	cmp	r5, #8
 8006d90:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006d94:	dc02      	bgt.n	8006d9c <_strtod_l+0x2e4>
 8006d96:	4565      	cmp	r5, ip
 8006d98:	bfa8      	it	ge
 8006d9a:	4665      	movge	r5, ip
 8006d9c:	f1be 0f00 	cmp.w	lr, #0
 8006da0:	d000      	beq.n	8006da4 <_strtod_l+0x2ec>
 8006da2:	426d      	negs	r5, r5
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d14d      	bne.n	8006e44 <_strtod_l+0x38c>
 8006da8:	9b04      	ldr	r3, [sp, #16]
 8006daa:	4303      	orrs	r3, r0
 8006dac:	f47f aec8 	bne.w	8006b40 <_strtod_l+0x88>
 8006db0:	2900      	cmp	r1, #0
 8006db2:	f47f aee2 	bne.w	8006b7a <_strtod_l+0xc2>
 8006db6:	2a69      	cmp	r2, #105	; 0x69
 8006db8:	d027      	beq.n	8006e0a <_strtod_l+0x352>
 8006dba:	dc24      	bgt.n	8006e06 <_strtod_l+0x34e>
 8006dbc:	2a49      	cmp	r2, #73	; 0x49
 8006dbe:	d024      	beq.n	8006e0a <_strtod_l+0x352>
 8006dc0:	2a4e      	cmp	r2, #78	; 0x4e
 8006dc2:	f47f aeda 	bne.w	8006b7a <_strtod_l+0xc2>
 8006dc6:	4996      	ldr	r1, [pc, #600]	; (8007020 <_strtod_l+0x568>)
 8006dc8:	a811      	add	r0, sp, #68	; 0x44
 8006dca:	f001 fd6f 	bl	80088ac <__match>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	f43f aed3 	beq.w	8006b7a <_strtod_l+0xc2>
 8006dd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	2b28      	cmp	r3, #40	; 0x28
 8006dda:	d12d      	bne.n	8006e38 <_strtod_l+0x380>
 8006ddc:	4991      	ldr	r1, [pc, #580]	; (8007024 <_strtod_l+0x56c>)
 8006dde:	aa14      	add	r2, sp, #80	; 0x50
 8006de0:	a811      	add	r0, sp, #68	; 0x44
 8006de2:	f001 fd77 	bl	80088d4 <__hexnan>
 8006de6:	2805      	cmp	r0, #5
 8006de8:	d126      	bne.n	8006e38 <_strtod_l+0x380>
 8006dea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006dec:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006df0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006df4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006df8:	e6a2      	b.n	8006b40 <_strtod_l+0x88>
 8006dfa:	250a      	movs	r5, #10
 8006dfc:	fb05 250c 	mla	r5, r5, ip, r2
 8006e00:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8006e04:	e7b9      	b.n	8006d7a <_strtod_l+0x2c2>
 8006e06:	2a6e      	cmp	r2, #110	; 0x6e
 8006e08:	e7db      	b.n	8006dc2 <_strtod_l+0x30a>
 8006e0a:	4987      	ldr	r1, [pc, #540]	; (8007028 <_strtod_l+0x570>)
 8006e0c:	a811      	add	r0, sp, #68	; 0x44
 8006e0e:	f001 fd4d 	bl	80088ac <__match>
 8006e12:	2800      	cmp	r0, #0
 8006e14:	f43f aeb1 	beq.w	8006b7a <_strtod_l+0xc2>
 8006e18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e1a:	4984      	ldr	r1, [pc, #528]	; (800702c <_strtod_l+0x574>)
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	a811      	add	r0, sp, #68	; 0x44
 8006e20:	9311      	str	r3, [sp, #68]	; 0x44
 8006e22:	f001 fd43 	bl	80088ac <__match>
 8006e26:	b910      	cbnz	r0, 8006e2e <_strtod_l+0x376>
 8006e28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	9311      	str	r3, [sp, #68]	; 0x44
 8006e2e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8007040 <_strtod_l+0x588>
 8006e32:	f04f 0800 	mov.w	r8, #0
 8006e36:	e683      	b.n	8006b40 <_strtod_l+0x88>
 8006e38:	487d      	ldr	r0, [pc, #500]	; (8007030 <_strtod_l+0x578>)
 8006e3a:	f002 fd25 	bl	8009888 <nan>
 8006e3e:	ec59 8b10 	vmov	r8, r9, d0
 8006e42:	e67d      	b.n	8006b40 <_strtod_l+0x88>
 8006e44:	1bea      	subs	r2, r5, r7
 8006e46:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8006e4a:	9207      	str	r2, [sp, #28]
 8006e4c:	9a06      	ldr	r2, [sp, #24]
 8006e4e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006e52:	2a00      	cmp	r2, #0
 8006e54:	bf08      	it	eq
 8006e56:	461a      	moveq	r2, r3
 8006e58:	2b10      	cmp	r3, #16
 8006e5a:	9206      	str	r2, [sp, #24]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	bfa8      	it	ge
 8006e60:	2210      	movge	r2, #16
 8006e62:	2b09      	cmp	r3, #9
 8006e64:	ec59 8b17 	vmov	r8, r9, d7
 8006e68:	dd0c      	ble.n	8006e84 <_strtod_l+0x3cc>
 8006e6a:	4972      	ldr	r1, [pc, #456]	; (8007034 <_strtod_l+0x57c>)
 8006e6c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8006e70:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8006e74:	ee06 aa90 	vmov	s13, sl
 8006e78:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8006e7c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006e80:	ec59 8b16 	vmov	r8, r9, d6
 8006e84:	2b0f      	cmp	r3, #15
 8006e86:	dc36      	bgt.n	8006ef6 <_strtod_l+0x43e>
 8006e88:	9907      	ldr	r1, [sp, #28]
 8006e8a:	2900      	cmp	r1, #0
 8006e8c:	f43f ae58 	beq.w	8006b40 <_strtod_l+0x88>
 8006e90:	dd23      	ble.n	8006eda <_strtod_l+0x422>
 8006e92:	2916      	cmp	r1, #22
 8006e94:	dc0b      	bgt.n	8006eae <_strtod_l+0x3f6>
 8006e96:	4b67      	ldr	r3, [pc, #412]	; (8007034 <_strtod_l+0x57c>)
 8006e98:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006e9c:	ed93 7b00 	vldr	d7, [r3]
 8006ea0:	ec49 8b16 	vmov	d6, r8, r9
 8006ea4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006ea8:	ec59 8b17 	vmov	r8, r9, d7
 8006eac:	e648      	b.n	8006b40 <_strtod_l+0x88>
 8006eae:	9807      	ldr	r0, [sp, #28]
 8006eb0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8006eb4:	4281      	cmp	r1, r0
 8006eb6:	db1e      	blt.n	8006ef6 <_strtod_l+0x43e>
 8006eb8:	4a5e      	ldr	r2, [pc, #376]	; (8007034 <_strtod_l+0x57c>)
 8006eba:	f1c3 030f 	rsb	r3, r3, #15
 8006ebe:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8006ec2:	ed91 7b00 	vldr	d7, [r1]
 8006ec6:	ec49 8b16 	vmov	d6, r8, r9
 8006eca:	1ac3      	subs	r3, r0, r3
 8006ecc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006ed0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006ed4:	ed92 6b00 	vldr	d6, [r2]
 8006ed8:	e7e4      	b.n	8006ea4 <_strtod_l+0x3ec>
 8006eda:	9907      	ldr	r1, [sp, #28]
 8006edc:	3116      	adds	r1, #22
 8006ede:	db0a      	blt.n	8006ef6 <_strtod_l+0x43e>
 8006ee0:	4b54      	ldr	r3, [pc, #336]	; (8007034 <_strtod_l+0x57c>)
 8006ee2:	1b7d      	subs	r5, r7, r5
 8006ee4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006ee8:	ed95 7b00 	vldr	d7, [r5]
 8006eec:	ec49 8b16 	vmov	d6, r8, r9
 8006ef0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006ef4:	e7d8      	b.n	8006ea8 <_strtod_l+0x3f0>
 8006ef6:	9907      	ldr	r1, [sp, #28]
 8006ef8:	1a9a      	subs	r2, r3, r2
 8006efa:	440a      	add	r2, r1
 8006efc:	2a00      	cmp	r2, #0
 8006efe:	dd6f      	ble.n	8006fe0 <_strtod_l+0x528>
 8006f00:	f012 000f 	ands.w	r0, r2, #15
 8006f04:	d00a      	beq.n	8006f1c <_strtod_l+0x464>
 8006f06:	494b      	ldr	r1, [pc, #300]	; (8007034 <_strtod_l+0x57c>)
 8006f08:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006f0c:	ed91 7b00 	vldr	d7, [r1]
 8006f10:	ec49 8b16 	vmov	d6, r8, r9
 8006f14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f18:	ec59 8b17 	vmov	r8, r9, d7
 8006f1c:	f032 020f 	bics.w	r2, r2, #15
 8006f20:	d04f      	beq.n	8006fc2 <_strtod_l+0x50a>
 8006f22:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8006f26:	dd22      	ble.n	8006f6e <_strtod_l+0x4b6>
 8006f28:	2500      	movs	r5, #0
 8006f2a:	462e      	mov	r6, r5
 8006f2c:	9506      	str	r5, [sp, #24]
 8006f2e:	462f      	mov	r7, r5
 8006f30:	2322      	movs	r3, #34	; 0x22
 8006f32:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8007040 <_strtod_l+0x588>
 8006f36:	6023      	str	r3, [r4, #0]
 8006f38:	f04f 0800 	mov.w	r8, #0
 8006f3c:	9b06      	ldr	r3, [sp, #24]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f43f adfe 	beq.w	8006b40 <_strtod_l+0x88>
 8006f44:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006f46:	4620      	mov	r0, r4
 8006f48:	f001 fdcc 	bl	8008ae4 <_Bfree>
 8006f4c:	4639      	mov	r1, r7
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f001 fdc8 	bl	8008ae4 <_Bfree>
 8006f54:	4631      	mov	r1, r6
 8006f56:	4620      	mov	r0, r4
 8006f58:	f001 fdc4 	bl	8008ae4 <_Bfree>
 8006f5c:	9906      	ldr	r1, [sp, #24]
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f001 fdc0 	bl	8008ae4 <_Bfree>
 8006f64:	4629      	mov	r1, r5
 8006f66:	4620      	mov	r0, r4
 8006f68:	f001 fdbc 	bl	8008ae4 <_Bfree>
 8006f6c:	e5e8      	b.n	8006b40 <_strtod_l+0x88>
 8006f6e:	2000      	movs	r0, #0
 8006f70:	ec49 8b17 	vmov	d7, r8, r9
 8006f74:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8007038 <_strtod_l+0x580>
 8006f78:	1112      	asrs	r2, r2, #4
 8006f7a:	4601      	mov	r1, r0
 8006f7c:	2a01      	cmp	r2, #1
 8006f7e:	dc23      	bgt.n	8006fc8 <_strtod_l+0x510>
 8006f80:	b108      	cbz	r0, 8006f86 <_strtod_l+0x4ce>
 8006f82:	ec59 8b17 	vmov	r8, r9, d7
 8006f86:	4a2c      	ldr	r2, [pc, #176]	; (8007038 <_strtod_l+0x580>)
 8006f88:	482c      	ldr	r0, [pc, #176]	; (800703c <_strtod_l+0x584>)
 8006f8a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006f8e:	ed92 7b00 	vldr	d7, [r2]
 8006f92:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006f96:	ec49 8b16 	vmov	d6, r8, r9
 8006f9a:	4a29      	ldr	r2, [pc, #164]	; (8007040 <_strtod_l+0x588>)
 8006f9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fa0:	ee17 1a90 	vmov	r1, s15
 8006fa4:	400a      	ands	r2, r1
 8006fa6:	4282      	cmp	r2, r0
 8006fa8:	ec59 8b17 	vmov	r8, r9, d7
 8006fac:	d8bc      	bhi.n	8006f28 <_strtod_l+0x470>
 8006fae:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8006fb2:	4282      	cmp	r2, r0
 8006fb4:	bf86      	itte	hi
 8006fb6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007044 <_strtod_l+0x58c>
 8006fba:	f04f 38ff 	movhi.w	r8, #4294967295
 8006fbe:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	9204      	str	r2, [sp, #16]
 8006fc6:	e078      	b.n	80070ba <_strtod_l+0x602>
 8006fc8:	07d6      	lsls	r6, r2, #31
 8006fca:	d504      	bpl.n	8006fd6 <_strtod_l+0x51e>
 8006fcc:	ed9c 6b00 	vldr	d6, [ip]
 8006fd0:	2001      	movs	r0, #1
 8006fd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fd6:	3101      	adds	r1, #1
 8006fd8:	1052      	asrs	r2, r2, #1
 8006fda:	f10c 0c08 	add.w	ip, ip, #8
 8006fde:	e7cd      	b.n	8006f7c <_strtod_l+0x4c4>
 8006fe0:	d0ef      	beq.n	8006fc2 <_strtod_l+0x50a>
 8006fe2:	4252      	negs	r2, r2
 8006fe4:	f012 000f 	ands.w	r0, r2, #15
 8006fe8:	d00a      	beq.n	8007000 <_strtod_l+0x548>
 8006fea:	4912      	ldr	r1, [pc, #72]	; (8007034 <_strtod_l+0x57c>)
 8006fec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006ff0:	ed91 7b00 	vldr	d7, [r1]
 8006ff4:	ec49 8b16 	vmov	d6, r8, r9
 8006ff8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006ffc:	ec59 8b17 	vmov	r8, r9, d7
 8007000:	1112      	asrs	r2, r2, #4
 8007002:	d0de      	beq.n	8006fc2 <_strtod_l+0x50a>
 8007004:	2a1f      	cmp	r2, #31
 8007006:	dd1f      	ble.n	8007048 <_strtod_l+0x590>
 8007008:	2500      	movs	r5, #0
 800700a:	462e      	mov	r6, r5
 800700c:	9506      	str	r5, [sp, #24]
 800700e:	462f      	mov	r7, r5
 8007010:	2322      	movs	r3, #34	; 0x22
 8007012:	f04f 0800 	mov.w	r8, #0
 8007016:	f04f 0900 	mov.w	r9, #0
 800701a:	6023      	str	r3, [r4, #0]
 800701c:	e78e      	b.n	8006f3c <_strtod_l+0x484>
 800701e:	bf00      	nop
 8007020:	0802ff75 	.word	0x0802ff75
 8007024:	0802ffb8 	.word	0x0802ffb8
 8007028:	0802ff6d 	.word	0x0802ff6d
 800702c:	080300fc 	.word	0x080300fc
 8007030:	080303a8 	.word	0x080303a8
 8007034:	08030288 	.word	0x08030288
 8007038:	08030260 	.word	0x08030260
 800703c:	7ca00000 	.word	0x7ca00000
 8007040:	7ff00000 	.word	0x7ff00000
 8007044:	7fefffff 	.word	0x7fefffff
 8007048:	f012 0110 	ands.w	r1, r2, #16
 800704c:	bf18      	it	ne
 800704e:	216a      	movne	r1, #106	; 0x6a
 8007050:	9104      	str	r1, [sp, #16]
 8007052:	ec49 8b17 	vmov	d7, r8, r9
 8007056:	49be      	ldr	r1, [pc, #760]	; (8007350 <_strtod_l+0x898>)
 8007058:	2000      	movs	r0, #0
 800705a:	07d6      	lsls	r6, r2, #31
 800705c:	d504      	bpl.n	8007068 <_strtod_l+0x5b0>
 800705e:	ed91 6b00 	vldr	d6, [r1]
 8007062:	2001      	movs	r0, #1
 8007064:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007068:	1052      	asrs	r2, r2, #1
 800706a:	f101 0108 	add.w	r1, r1, #8
 800706e:	d1f4      	bne.n	800705a <_strtod_l+0x5a2>
 8007070:	b108      	cbz	r0, 8007076 <_strtod_l+0x5be>
 8007072:	ec59 8b17 	vmov	r8, r9, d7
 8007076:	9a04      	ldr	r2, [sp, #16]
 8007078:	b1c2      	cbz	r2, 80070ac <_strtod_l+0x5f4>
 800707a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800707e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8007082:	2a00      	cmp	r2, #0
 8007084:	4648      	mov	r0, r9
 8007086:	dd11      	ble.n	80070ac <_strtod_l+0x5f4>
 8007088:	2a1f      	cmp	r2, #31
 800708a:	f340 812e 	ble.w	80072ea <_strtod_l+0x832>
 800708e:	2a34      	cmp	r2, #52	; 0x34
 8007090:	bfde      	ittt	le
 8007092:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8007096:	f04f 32ff 	movle.w	r2, #4294967295
 800709a:	fa02 f101 	lslle.w	r1, r2, r1
 800709e:	f04f 0800 	mov.w	r8, #0
 80070a2:	bfcc      	ite	gt
 80070a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80070a8:	ea01 0900 	andle.w	r9, r1, r0
 80070ac:	ec49 8b17 	vmov	d7, r8, r9
 80070b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80070b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b8:	d0a6      	beq.n	8007008 <_strtod_l+0x550>
 80070ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070bc:	9200      	str	r2, [sp, #0]
 80070be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80070c0:	9a06      	ldr	r2, [sp, #24]
 80070c2:	4620      	mov	r0, r4
 80070c4:	f001 fd76 	bl	8008bb4 <__s2b>
 80070c8:	9006      	str	r0, [sp, #24]
 80070ca:	2800      	cmp	r0, #0
 80070cc:	f43f af2c 	beq.w	8006f28 <_strtod_l+0x470>
 80070d0:	9b07      	ldr	r3, [sp, #28]
 80070d2:	1b7d      	subs	r5, r7, r5
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	bfb4      	ite	lt
 80070d8:	462b      	movlt	r3, r5
 80070da:	2300      	movge	r3, #0
 80070dc:	9309      	str	r3, [sp, #36]	; 0x24
 80070de:	9b07      	ldr	r3, [sp, #28]
 80070e0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8007330 <_strtod_l+0x878>
 80070e4:	ed9f ab94 	vldr	d10, [pc, #592]	; 8007338 <_strtod_l+0x880>
 80070e8:	ed9f bb95 	vldr	d11, [pc, #596]	; 8007340 <_strtod_l+0x888>
 80070ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80070f0:	2500      	movs	r5, #0
 80070f2:	930c      	str	r3, [sp, #48]	; 0x30
 80070f4:	462e      	mov	r6, r5
 80070f6:	9b06      	ldr	r3, [sp, #24]
 80070f8:	4620      	mov	r0, r4
 80070fa:	6859      	ldr	r1, [r3, #4]
 80070fc:	f001 fcb2 	bl	8008a64 <_Balloc>
 8007100:	4607      	mov	r7, r0
 8007102:	2800      	cmp	r0, #0
 8007104:	f43f af14 	beq.w	8006f30 <_strtod_l+0x478>
 8007108:	9b06      	ldr	r3, [sp, #24]
 800710a:	691a      	ldr	r2, [r3, #16]
 800710c:	3202      	adds	r2, #2
 800710e:	f103 010c 	add.w	r1, r3, #12
 8007112:	0092      	lsls	r2, r2, #2
 8007114:	300c      	adds	r0, #12
 8007116:	f001 fc97 	bl	8008a48 <memcpy>
 800711a:	ec49 8b10 	vmov	d0, r8, r9
 800711e:	aa14      	add	r2, sp, #80	; 0x50
 8007120:	a913      	add	r1, sp, #76	; 0x4c
 8007122:	4620      	mov	r0, r4
 8007124:	f002 f88c 	bl	8009240 <__d2b>
 8007128:	ec49 8b18 	vmov	d8, r8, r9
 800712c:	9012      	str	r0, [sp, #72]	; 0x48
 800712e:	2800      	cmp	r0, #0
 8007130:	f43f aefe 	beq.w	8006f30 <_strtod_l+0x478>
 8007134:	2101      	movs	r1, #1
 8007136:	4620      	mov	r0, r4
 8007138:	f001 fdd6 	bl	8008ce8 <__i2b>
 800713c:	4606      	mov	r6, r0
 800713e:	2800      	cmp	r0, #0
 8007140:	f43f aef6 	beq.w	8006f30 <_strtod_l+0x478>
 8007144:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007146:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007148:	2b00      	cmp	r3, #0
 800714a:	bfab      	itete	ge
 800714c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800714e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8007150:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8007154:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8007158:	bfac      	ite	ge
 800715a:	eb03 0b02 	addge.w	fp, r3, r2
 800715e:	eba2 0a03 	sublt.w	sl, r2, r3
 8007162:	9a04      	ldr	r2, [sp, #16]
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	440b      	add	r3, r1
 8007168:	4a7a      	ldr	r2, [pc, #488]	; (8007354 <_strtod_l+0x89c>)
 800716a:	3b01      	subs	r3, #1
 800716c:	4293      	cmp	r3, r2
 800716e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8007172:	f280 80cd 	bge.w	8007310 <_strtod_l+0x858>
 8007176:	1ad2      	subs	r2, r2, r3
 8007178:	2a1f      	cmp	r2, #31
 800717a:	eba1 0102 	sub.w	r1, r1, r2
 800717e:	f04f 0001 	mov.w	r0, #1
 8007182:	f300 80b9 	bgt.w	80072f8 <_strtod_l+0x840>
 8007186:	fa00 f302 	lsl.w	r3, r0, r2
 800718a:	930b      	str	r3, [sp, #44]	; 0x2c
 800718c:	2300      	movs	r3, #0
 800718e:	930a      	str	r3, [sp, #40]	; 0x28
 8007190:	eb0b 0301 	add.w	r3, fp, r1
 8007194:	9a04      	ldr	r2, [sp, #16]
 8007196:	459b      	cmp	fp, r3
 8007198:	448a      	add	sl, r1
 800719a:	4492      	add	sl, r2
 800719c:	465a      	mov	r2, fp
 800719e:	bfa8      	it	ge
 80071a0:	461a      	movge	r2, r3
 80071a2:	4552      	cmp	r2, sl
 80071a4:	bfa8      	it	ge
 80071a6:	4652      	movge	r2, sl
 80071a8:	2a00      	cmp	r2, #0
 80071aa:	bfc2      	ittt	gt
 80071ac:	1a9b      	subgt	r3, r3, r2
 80071ae:	ebaa 0a02 	subgt.w	sl, sl, r2
 80071b2:	ebab 0b02 	subgt.w	fp, fp, r2
 80071b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071b8:	2a00      	cmp	r2, #0
 80071ba:	dd18      	ble.n	80071ee <_strtod_l+0x736>
 80071bc:	4631      	mov	r1, r6
 80071be:	4620      	mov	r0, r4
 80071c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80071c2:	f001 fe51 	bl	8008e68 <__pow5mult>
 80071c6:	4606      	mov	r6, r0
 80071c8:	2800      	cmp	r0, #0
 80071ca:	f43f aeb1 	beq.w	8006f30 <_strtod_l+0x478>
 80071ce:	4601      	mov	r1, r0
 80071d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071d2:	4620      	mov	r0, r4
 80071d4:	f001 fd9e 	bl	8008d14 <__multiply>
 80071d8:	900e      	str	r0, [sp, #56]	; 0x38
 80071da:	2800      	cmp	r0, #0
 80071dc:	f43f aea8 	beq.w	8006f30 <_strtod_l+0x478>
 80071e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80071e2:	4620      	mov	r0, r4
 80071e4:	f001 fc7e 	bl	8008ae4 <_Bfree>
 80071e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071ec:	9212      	str	r2, [sp, #72]	; 0x48
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f300 8093 	bgt.w	800731a <_strtod_l+0x862>
 80071f4:	9b07      	ldr	r3, [sp, #28]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	dd08      	ble.n	800720c <_strtod_l+0x754>
 80071fa:	4639      	mov	r1, r7
 80071fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071fe:	4620      	mov	r0, r4
 8007200:	f001 fe32 	bl	8008e68 <__pow5mult>
 8007204:	4607      	mov	r7, r0
 8007206:	2800      	cmp	r0, #0
 8007208:	f43f ae92 	beq.w	8006f30 <_strtod_l+0x478>
 800720c:	f1ba 0f00 	cmp.w	sl, #0
 8007210:	dd08      	ble.n	8007224 <_strtod_l+0x76c>
 8007212:	4639      	mov	r1, r7
 8007214:	4652      	mov	r2, sl
 8007216:	4620      	mov	r0, r4
 8007218:	f001 fe80 	bl	8008f1c <__lshift>
 800721c:	4607      	mov	r7, r0
 800721e:	2800      	cmp	r0, #0
 8007220:	f43f ae86 	beq.w	8006f30 <_strtod_l+0x478>
 8007224:	f1bb 0f00 	cmp.w	fp, #0
 8007228:	dd08      	ble.n	800723c <_strtod_l+0x784>
 800722a:	4631      	mov	r1, r6
 800722c:	465a      	mov	r2, fp
 800722e:	4620      	mov	r0, r4
 8007230:	f001 fe74 	bl	8008f1c <__lshift>
 8007234:	4606      	mov	r6, r0
 8007236:	2800      	cmp	r0, #0
 8007238:	f43f ae7a 	beq.w	8006f30 <_strtod_l+0x478>
 800723c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800723e:	463a      	mov	r2, r7
 8007240:	4620      	mov	r0, r4
 8007242:	f001 fef7 	bl	8009034 <__mdiff>
 8007246:	4605      	mov	r5, r0
 8007248:	2800      	cmp	r0, #0
 800724a:	f43f ae71 	beq.w	8006f30 <_strtod_l+0x478>
 800724e:	2300      	movs	r3, #0
 8007250:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8007254:	60c3      	str	r3, [r0, #12]
 8007256:	4631      	mov	r1, r6
 8007258:	f001 fed0 	bl	8008ffc <__mcmp>
 800725c:	2800      	cmp	r0, #0
 800725e:	da7d      	bge.n	800735c <_strtod_l+0x8a4>
 8007260:	ea5a 0308 	orrs.w	r3, sl, r8
 8007264:	f040 80a3 	bne.w	80073ae <_strtod_l+0x8f6>
 8007268:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800726c:	2b00      	cmp	r3, #0
 800726e:	f040 809e 	bne.w	80073ae <_strtod_l+0x8f6>
 8007272:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007276:	0d1b      	lsrs	r3, r3, #20
 8007278:	051b      	lsls	r3, r3, #20
 800727a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800727e:	f240 8096 	bls.w	80073ae <_strtod_l+0x8f6>
 8007282:	696b      	ldr	r3, [r5, #20]
 8007284:	b91b      	cbnz	r3, 800728e <_strtod_l+0x7d6>
 8007286:	692b      	ldr	r3, [r5, #16]
 8007288:	2b01      	cmp	r3, #1
 800728a:	f340 8090 	ble.w	80073ae <_strtod_l+0x8f6>
 800728e:	4629      	mov	r1, r5
 8007290:	2201      	movs	r2, #1
 8007292:	4620      	mov	r0, r4
 8007294:	f001 fe42 	bl	8008f1c <__lshift>
 8007298:	4631      	mov	r1, r6
 800729a:	4605      	mov	r5, r0
 800729c:	f001 feae 	bl	8008ffc <__mcmp>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	f340 8084 	ble.w	80073ae <_strtod_l+0x8f6>
 80072a6:	9904      	ldr	r1, [sp, #16]
 80072a8:	4a2b      	ldr	r2, [pc, #172]	; (8007358 <_strtod_l+0x8a0>)
 80072aa:	464b      	mov	r3, r9
 80072ac:	2900      	cmp	r1, #0
 80072ae:	f000 809d 	beq.w	80073ec <_strtod_l+0x934>
 80072b2:	ea02 0109 	and.w	r1, r2, r9
 80072b6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80072ba:	f300 8097 	bgt.w	80073ec <_strtod_l+0x934>
 80072be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80072c2:	f77f aea5 	ble.w	8007010 <_strtod_l+0x558>
 80072c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8007348 <_strtod_l+0x890>
 80072ca:	ec49 8b16 	vmov	d6, r8, r9
 80072ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80072d2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80072d6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80072da:	4313      	orrs	r3, r2
 80072dc:	bf08      	it	eq
 80072de:	2322      	moveq	r3, #34	; 0x22
 80072e0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80072e4:	bf08      	it	eq
 80072e6:	6023      	streq	r3, [r4, #0]
 80072e8:	e62c      	b.n	8006f44 <_strtod_l+0x48c>
 80072ea:	f04f 31ff 	mov.w	r1, #4294967295
 80072ee:	fa01 f202 	lsl.w	r2, r1, r2
 80072f2:	ea02 0808 	and.w	r8, r2, r8
 80072f6:	e6d9      	b.n	80070ac <_strtod_l+0x5f4>
 80072f8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80072fc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8007300:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8007304:	33e2      	adds	r3, #226	; 0xe2
 8007306:	fa00 f303 	lsl.w	r3, r0, r3
 800730a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800730e:	e73f      	b.n	8007190 <_strtod_l+0x6d8>
 8007310:	2200      	movs	r2, #0
 8007312:	2301      	movs	r3, #1
 8007314:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007318:	e73a      	b.n	8007190 <_strtod_l+0x6d8>
 800731a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800731c:	461a      	mov	r2, r3
 800731e:	4620      	mov	r0, r4
 8007320:	f001 fdfc 	bl	8008f1c <__lshift>
 8007324:	9012      	str	r0, [sp, #72]	; 0x48
 8007326:	2800      	cmp	r0, #0
 8007328:	f47f af64 	bne.w	80071f4 <_strtod_l+0x73c>
 800732c:	e600      	b.n	8006f30 <_strtod_l+0x478>
 800732e:	bf00      	nop
 8007330:	94a03595 	.word	0x94a03595
 8007334:	3fcfffff 	.word	0x3fcfffff
 8007338:	94a03595 	.word	0x94a03595
 800733c:	3fdfffff 	.word	0x3fdfffff
 8007340:	35afe535 	.word	0x35afe535
 8007344:	3fe00000 	.word	0x3fe00000
 8007348:	00000000 	.word	0x00000000
 800734c:	39500000 	.word	0x39500000
 8007350:	0802ffd0 	.word	0x0802ffd0
 8007354:	fffffc02 	.word	0xfffffc02
 8007358:	7ff00000 	.word	0x7ff00000
 800735c:	46cb      	mov	fp, r9
 800735e:	d15f      	bne.n	8007420 <_strtod_l+0x968>
 8007360:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007364:	f1ba 0f00 	cmp.w	sl, #0
 8007368:	d02a      	beq.n	80073c0 <_strtod_l+0x908>
 800736a:	4aa7      	ldr	r2, [pc, #668]	; (8007608 <_strtod_l+0xb50>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d12b      	bne.n	80073c8 <_strtod_l+0x910>
 8007370:	9b04      	ldr	r3, [sp, #16]
 8007372:	4642      	mov	r2, r8
 8007374:	b1fb      	cbz	r3, 80073b6 <_strtod_l+0x8fe>
 8007376:	4ba5      	ldr	r3, [pc, #660]	; (800760c <_strtod_l+0xb54>)
 8007378:	ea09 0303 	and.w	r3, r9, r3
 800737c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007380:	f04f 31ff 	mov.w	r1, #4294967295
 8007384:	d81a      	bhi.n	80073bc <_strtod_l+0x904>
 8007386:	0d1b      	lsrs	r3, r3, #20
 8007388:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800738c:	fa01 f303 	lsl.w	r3, r1, r3
 8007390:	429a      	cmp	r2, r3
 8007392:	d119      	bne.n	80073c8 <_strtod_l+0x910>
 8007394:	4b9e      	ldr	r3, [pc, #632]	; (8007610 <_strtod_l+0xb58>)
 8007396:	459b      	cmp	fp, r3
 8007398:	d102      	bne.n	80073a0 <_strtod_l+0x8e8>
 800739a:	3201      	adds	r2, #1
 800739c:	f43f adc8 	beq.w	8006f30 <_strtod_l+0x478>
 80073a0:	4b9a      	ldr	r3, [pc, #616]	; (800760c <_strtod_l+0xb54>)
 80073a2:	ea0b 0303 	and.w	r3, fp, r3
 80073a6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80073aa:	f04f 0800 	mov.w	r8, #0
 80073ae:	9b04      	ldr	r3, [sp, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d188      	bne.n	80072c6 <_strtod_l+0x80e>
 80073b4:	e5c6      	b.n	8006f44 <_strtod_l+0x48c>
 80073b6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ba:	e7e9      	b.n	8007390 <_strtod_l+0x8d8>
 80073bc:	460b      	mov	r3, r1
 80073be:	e7e7      	b.n	8007390 <_strtod_l+0x8d8>
 80073c0:	ea53 0308 	orrs.w	r3, r3, r8
 80073c4:	f43f af6f 	beq.w	80072a6 <_strtod_l+0x7ee>
 80073c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ca:	b1cb      	cbz	r3, 8007400 <_strtod_l+0x948>
 80073cc:	ea13 0f0b 	tst.w	r3, fp
 80073d0:	d0ed      	beq.n	80073ae <_strtod_l+0x8f6>
 80073d2:	9a04      	ldr	r2, [sp, #16]
 80073d4:	4640      	mov	r0, r8
 80073d6:	4649      	mov	r1, r9
 80073d8:	f1ba 0f00 	cmp.w	sl, #0
 80073dc:	d014      	beq.n	8007408 <_strtod_l+0x950>
 80073de:	f7ff fb51 	bl	8006a84 <sulp>
 80073e2:	ee38 7b00 	vadd.f64	d7, d8, d0
 80073e6:	ec59 8b17 	vmov	r8, r9, d7
 80073ea:	e7e0      	b.n	80073ae <_strtod_l+0x8f6>
 80073ec:	4013      	ands	r3, r2
 80073ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80073f2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80073f6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80073fa:	f04f 38ff 	mov.w	r8, #4294967295
 80073fe:	e7d6      	b.n	80073ae <_strtod_l+0x8f6>
 8007400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007402:	ea13 0f08 	tst.w	r3, r8
 8007406:	e7e3      	b.n	80073d0 <_strtod_l+0x918>
 8007408:	f7ff fb3c 	bl	8006a84 <sulp>
 800740c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8007410:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8007414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007418:	ec59 8b10 	vmov	r8, r9, d0
 800741c:	d1c7      	bne.n	80073ae <_strtod_l+0x8f6>
 800741e:	e5f7      	b.n	8007010 <_strtod_l+0x558>
 8007420:	4631      	mov	r1, r6
 8007422:	4628      	mov	r0, r5
 8007424:	f001 ff68 	bl	80092f8 <__ratio>
 8007428:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800742c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007434:	d865      	bhi.n	8007502 <_strtod_l+0xa4a>
 8007436:	f1ba 0f00 	cmp.w	sl, #0
 800743a:	d042      	beq.n	80074c2 <_strtod_l+0xa0a>
 800743c:	4b75      	ldr	r3, [pc, #468]	; (8007614 <_strtod_l+0xb5c>)
 800743e:	2200      	movs	r2, #0
 8007440:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8007444:	4871      	ldr	r0, [pc, #452]	; (800760c <_strtod_l+0xb54>)
 8007446:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8007620 <_strtod_l+0xb68>
 800744a:	ea0b 0100 	and.w	r1, fp, r0
 800744e:	4561      	cmp	r1, ip
 8007450:	f040 808e 	bne.w	8007570 <_strtod_l+0xab8>
 8007454:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8007458:	ec49 8b10 	vmov	d0, r8, r9
 800745c:	ec43 2b1c 	vmov	d12, r2, r3
 8007460:	910a      	str	r1, [sp, #40]	; 0x28
 8007462:	f001 fe71 	bl	8009148 <__ulp>
 8007466:	ec49 8b1e 	vmov	d14, r8, r9
 800746a:	4868      	ldr	r0, [pc, #416]	; (800760c <_strtod_l+0xb54>)
 800746c:	eeac eb00 	vfma.f64	d14, d12, d0
 8007470:	ee1e 3a90 	vmov	r3, s29
 8007474:	4a68      	ldr	r2, [pc, #416]	; (8007618 <_strtod_l+0xb60>)
 8007476:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007478:	4018      	ands	r0, r3
 800747a:	4290      	cmp	r0, r2
 800747c:	ec59 8b1e 	vmov	r8, r9, d14
 8007480:	d94e      	bls.n	8007520 <_strtod_l+0xa68>
 8007482:	ee18 3a90 	vmov	r3, s17
 8007486:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800748a:	4293      	cmp	r3, r2
 800748c:	d104      	bne.n	8007498 <_strtod_l+0x9e0>
 800748e:	ee18 3a10 	vmov	r3, s16
 8007492:	3301      	adds	r3, #1
 8007494:	f43f ad4c 	beq.w	8006f30 <_strtod_l+0x478>
 8007498:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007610 <_strtod_l+0xb58>
 800749c:	f04f 38ff 	mov.w	r8, #4294967295
 80074a0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80074a2:	4620      	mov	r0, r4
 80074a4:	f001 fb1e 	bl	8008ae4 <_Bfree>
 80074a8:	4639      	mov	r1, r7
 80074aa:	4620      	mov	r0, r4
 80074ac:	f001 fb1a 	bl	8008ae4 <_Bfree>
 80074b0:	4631      	mov	r1, r6
 80074b2:	4620      	mov	r0, r4
 80074b4:	f001 fb16 	bl	8008ae4 <_Bfree>
 80074b8:	4629      	mov	r1, r5
 80074ba:	4620      	mov	r0, r4
 80074bc:	f001 fb12 	bl	8008ae4 <_Bfree>
 80074c0:	e619      	b.n	80070f6 <_strtod_l+0x63e>
 80074c2:	f1b8 0f00 	cmp.w	r8, #0
 80074c6:	d112      	bne.n	80074ee <_strtod_l+0xa36>
 80074c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074cc:	b9b3      	cbnz	r3, 80074fc <_strtod_l+0xa44>
 80074ce:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80074d2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80074d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074da:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80074de:	bf58      	it	pl
 80074e0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 80074e4:	eeb1 7b4d 	vneg.f64	d7, d13
 80074e8:	ec53 2b17 	vmov	r2, r3, d7
 80074ec:	e7aa      	b.n	8007444 <_strtod_l+0x98c>
 80074ee:	f1b8 0f01 	cmp.w	r8, #1
 80074f2:	d103      	bne.n	80074fc <_strtod_l+0xa44>
 80074f4:	f1b9 0f00 	cmp.w	r9, #0
 80074f8:	f43f ad8a 	beq.w	8007010 <_strtod_l+0x558>
 80074fc:	4b47      	ldr	r3, [pc, #284]	; (800761c <_strtod_l+0xb64>)
 80074fe:	2200      	movs	r2, #0
 8007500:	e79e      	b.n	8007440 <_strtod_l+0x988>
 8007502:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8007506:	ee20 db0d 	vmul.f64	d13, d0, d13
 800750a:	f1ba 0f00 	cmp.w	sl, #0
 800750e:	d104      	bne.n	800751a <_strtod_l+0xa62>
 8007510:	eeb1 7b4d 	vneg.f64	d7, d13
 8007514:	ec53 2b17 	vmov	r2, r3, d7
 8007518:	e794      	b.n	8007444 <_strtod_l+0x98c>
 800751a:	eeb0 7b4d 	vmov.f64	d7, d13
 800751e:	e7f9      	b.n	8007514 <_strtod_l+0xa5c>
 8007520:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007524:	9b04      	ldr	r3, [sp, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1ba      	bne.n	80074a0 <_strtod_l+0x9e8>
 800752a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800752e:	0d1b      	lsrs	r3, r3, #20
 8007530:	051b      	lsls	r3, r3, #20
 8007532:	4299      	cmp	r1, r3
 8007534:	d1b4      	bne.n	80074a0 <_strtod_l+0x9e8>
 8007536:	ec51 0b1d 	vmov	r0, r1, d13
 800753a:	f7f9 f8ad 	bl	8000698 <__aeabi_d2lz>
 800753e:	f7f9 f865 	bl	800060c <__aeabi_l2d>
 8007542:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007546:	ec41 0b17 	vmov	d7, r0, r1
 800754a:	ea43 0308 	orr.w	r3, r3, r8
 800754e:	ea53 030a 	orrs.w	r3, r3, sl
 8007552:	ee3d db47 	vsub.f64	d13, d13, d7
 8007556:	d03c      	beq.n	80075d2 <_strtod_l+0xb1a>
 8007558:	eeb4 dbca 	vcmpe.f64	d13, d10
 800755c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007560:	f53f acf0 	bmi.w	8006f44 <_strtod_l+0x48c>
 8007564:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8007568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800756c:	dd98      	ble.n	80074a0 <_strtod_l+0x9e8>
 800756e:	e4e9      	b.n	8006f44 <_strtod_l+0x48c>
 8007570:	9804      	ldr	r0, [sp, #16]
 8007572:	b1f0      	cbz	r0, 80075b2 <_strtod_l+0xafa>
 8007574:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8007578:	d81b      	bhi.n	80075b2 <_strtod_l+0xafa>
 800757a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007600 <_strtod_l+0xb48>
 800757e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8007582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007586:	d811      	bhi.n	80075ac <_strtod_l+0xaf4>
 8007588:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800758c:	ee1d 3a10 	vmov	r3, s26
 8007590:	2b01      	cmp	r3, #1
 8007592:	bf38      	it	cc
 8007594:	2301      	movcc	r3, #1
 8007596:	ee0d 3a10 	vmov	s26, r3
 800759a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800759e:	f1ba 0f00 	cmp.w	sl, #0
 80075a2:	d113      	bne.n	80075cc <_strtod_l+0xb14>
 80075a4:	eeb1 7b4d 	vneg.f64	d7, d13
 80075a8:	ec53 2b17 	vmov	r2, r3, d7
 80075ac:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80075b0:	1a43      	subs	r3, r0, r1
 80075b2:	eeb0 0b48 	vmov.f64	d0, d8
 80075b6:	ec43 2b1c 	vmov	d12, r2, r3
 80075ba:	910a      	str	r1, [sp, #40]	; 0x28
 80075bc:	f001 fdc4 	bl	8009148 <__ulp>
 80075c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80075c2:	eeac 8b00 	vfma.f64	d8, d12, d0
 80075c6:	ec59 8b18 	vmov	r8, r9, d8
 80075ca:	e7ab      	b.n	8007524 <_strtod_l+0xa6c>
 80075cc:	eeb0 7b4d 	vmov.f64	d7, d13
 80075d0:	e7ea      	b.n	80075a8 <_strtod_l+0xaf0>
 80075d2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80075d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075da:	f57f af61 	bpl.w	80074a0 <_strtod_l+0x9e8>
 80075de:	e4b1      	b.n	8006f44 <_strtod_l+0x48c>
 80075e0:	2300      	movs	r3, #0
 80075e2:	9308      	str	r3, [sp, #32]
 80075e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	f7ff baad 	b.w	8006b48 <_strtod_l+0x90>
 80075ee:	2a65      	cmp	r2, #101	; 0x65
 80075f0:	f43f ab9f 	beq.w	8006d32 <_strtod_l+0x27a>
 80075f4:	2a45      	cmp	r2, #69	; 0x45
 80075f6:	f43f ab9c 	beq.w	8006d32 <_strtod_l+0x27a>
 80075fa:	2101      	movs	r1, #1
 80075fc:	f7ff bbd4 	b.w	8006da8 <_strtod_l+0x2f0>
 8007600:	ffc00000 	.word	0xffc00000
 8007604:	41dfffff 	.word	0x41dfffff
 8007608:	000fffff 	.word	0x000fffff
 800760c:	7ff00000 	.word	0x7ff00000
 8007610:	7fefffff 	.word	0x7fefffff
 8007614:	3ff00000 	.word	0x3ff00000
 8007618:	7c9fffff 	.word	0x7c9fffff
 800761c:	bff00000 	.word	0xbff00000
 8007620:	7fe00000 	.word	0x7fe00000

08007624 <_strtod_r>:
 8007624:	4b01      	ldr	r3, [pc, #4]	; (800762c <_strtod_r+0x8>)
 8007626:	f7ff ba47 	b.w	8006ab8 <_strtod_l>
 800762a:	bf00      	nop
 800762c:	20000080 	.word	0x20000080

08007630 <_strtol_l.constprop.0>:
 8007630:	2b01      	cmp	r3, #1
 8007632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007636:	d001      	beq.n	800763c <_strtol_l.constprop.0+0xc>
 8007638:	2b24      	cmp	r3, #36	; 0x24
 800763a:	d906      	bls.n	800764a <_strtol_l.constprop.0+0x1a>
 800763c:	f7fe fb82 	bl	8005d44 <__errno>
 8007640:	2316      	movs	r3, #22
 8007642:	6003      	str	r3, [r0, #0]
 8007644:	2000      	movs	r0, #0
 8007646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800764a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007730 <_strtol_l.constprop.0+0x100>
 800764e:	460d      	mov	r5, r1
 8007650:	462e      	mov	r6, r5
 8007652:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007656:	f814 700c 	ldrb.w	r7, [r4, ip]
 800765a:	f017 0708 	ands.w	r7, r7, #8
 800765e:	d1f7      	bne.n	8007650 <_strtol_l.constprop.0+0x20>
 8007660:	2c2d      	cmp	r4, #45	; 0x2d
 8007662:	d132      	bne.n	80076ca <_strtol_l.constprop.0+0x9a>
 8007664:	782c      	ldrb	r4, [r5, #0]
 8007666:	2701      	movs	r7, #1
 8007668:	1cb5      	adds	r5, r6, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d05b      	beq.n	8007726 <_strtol_l.constprop.0+0xf6>
 800766e:	2b10      	cmp	r3, #16
 8007670:	d109      	bne.n	8007686 <_strtol_l.constprop.0+0x56>
 8007672:	2c30      	cmp	r4, #48	; 0x30
 8007674:	d107      	bne.n	8007686 <_strtol_l.constprop.0+0x56>
 8007676:	782c      	ldrb	r4, [r5, #0]
 8007678:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800767c:	2c58      	cmp	r4, #88	; 0x58
 800767e:	d14d      	bne.n	800771c <_strtol_l.constprop.0+0xec>
 8007680:	786c      	ldrb	r4, [r5, #1]
 8007682:	2310      	movs	r3, #16
 8007684:	3502      	adds	r5, #2
 8007686:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800768a:	f108 38ff 	add.w	r8, r8, #4294967295
 800768e:	f04f 0c00 	mov.w	ip, #0
 8007692:	fbb8 f9f3 	udiv	r9, r8, r3
 8007696:	4666      	mov	r6, ip
 8007698:	fb03 8a19 	mls	sl, r3, r9, r8
 800769c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80076a0:	f1be 0f09 	cmp.w	lr, #9
 80076a4:	d816      	bhi.n	80076d4 <_strtol_l.constprop.0+0xa4>
 80076a6:	4674      	mov	r4, lr
 80076a8:	42a3      	cmp	r3, r4
 80076aa:	dd24      	ble.n	80076f6 <_strtol_l.constprop.0+0xc6>
 80076ac:	f1bc 0f00 	cmp.w	ip, #0
 80076b0:	db1e      	blt.n	80076f0 <_strtol_l.constprop.0+0xc0>
 80076b2:	45b1      	cmp	r9, r6
 80076b4:	d31c      	bcc.n	80076f0 <_strtol_l.constprop.0+0xc0>
 80076b6:	d101      	bne.n	80076bc <_strtol_l.constprop.0+0x8c>
 80076b8:	45a2      	cmp	sl, r4
 80076ba:	db19      	blt.n	80076f0 <_strtol_l.constprop.0+0xc0>
 80076bc:	fb06 4603 	mla	r6, r6, r3, r4
 80076c0:	f04f 0c01 	mov.w	ip, #1
 80076c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076c8:	e7e8      	b.n	800769c <_strtol_l.constprop.0+0x6c>
 80076ca:	2c2b      	cmp	r4, #43	; 0x2b
 80076cc:	bf04      	itt	eq
 80076ce:	782c      	ldrbeq	r4, [r5, #0]
 80076d0:	1cb5      	addeq	r5, r6, #2
 80076d2:	e7ca      	b.n	800766a <_strtol_l.constprop.0+0x3a>
 80076d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80076d8:	f1be 0f19 	cmp.w	lr, #25
 80076dc:	d801      	bhi.n	80076e2 <_strtol_l.constprop.0+0xb2>
 80076de:	3c37      	subs	r4, #55	; 0x37
 80076e0:	e7e2      	b.n	80076a8 <_strtol_l.constprop.0+0x78>
 80076e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80076e6:	f1be 0f19 	cmp.w	lr, #25
 80076ea:	d804      	bhi.n	80076f6 <_strtol_l.constprop.0+0xc6>
 80076ec:	3c57      	subs	r4, #87	; 0x57
 80076ee:	e7db      	b.n	80076a8 <_strtol_l.constprop.0+0x78>
 80076f0:	f04f 3cff 	mov.w	ip, #4294967295
 80076f4:	e7e6      	b.n	80076c4 <_strtol_l.constprop.0+0x94>
 80076f6:	f1bc 0f00 	cmp.w	ip, #0
 80076fa:	da05      	bge.n	8007708 <_strtol_l.constprop.0+0xd8>
 80076fc:	2322      	movs	r3, #34	; 0x22
 80076fe:	6003      	str	r3, [r0, #0]
 8007700:	4646      	mov	r6, r8
 8007702:	b942      	cbnz	r2, 8007716 <_strtol_l.constprop.0+0xe6>
 8007704:	4630      	mov	r0, r6
 8007706:	e79e      	b.n	8007646 <_strtol_l.constprop.0+0x16>
 8007708:	b107      	cbz	r7, 800770c <_strtol_l.constprop.0+0xdc>
 800770a:	4276      	negs	r6, r6
 800770c:	2a00      	cmp	r2, #0
 800770e:	d0f9      	beq.n	8007704 <_strtol_l.constprop.0+0xd4>
 8007710:	f1bc 0f00 	cmp.w	ip, #0
 8007714:	d000      	beq.n	8007718 <_strtol_l.constprop.0+0xe8>
 8007716:	1e69      	subs	r1, r5, #1
 8007718:	6011      	str	r1, [r2, #0]
 800771a:	e7f3      	b.n	8007704 <_strtol_l.constprop.0+0xd4>
 800771c:	2430      	movs	r4, #48	; 0x30
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1b1      	bne.n	8007686 <_strtol_l.constprop.0+0x56>
 8007722:	2308      	movs	r3, #8
 8007724:	e7af      	b.n	8007686 <_strtol_l.constprop.0+0x56>
 8007726:	2c30      	cmp	r4, #48	; 0x30
 8007728:	d0a5      	beq.n	8007676 <_strtol_l.constprop.0+0x46>
 800772a:	230a      	movs	r3, #10
 800772c:	e7ab      	b.n	8007686 <_strtol_l.constprop.0+0x56>
 800772e:	bf00      	nop
 8007730:	0802fff9 	.word	0x0802fff9

08007734 <_strtol_r>:
 8007734:	f7ff bf7c 	b.w	8007630 <_strtol_l.constprop.0>

08007738 <quorem>:
 8007738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	6903      	ldr	r3, [r0, #16]
 800773e:	690c      	ldr	r4, [r1, #16]
 8007740:	42a3      	cmp	r3, r4
 8007742:	4607      	mov	r7, r0
 8007744:	f2c0 8081 	blt.w	800784a <quorem+0x112>
 8007748:	3c01      	subs	r4, #1
 800774a:	f101 0814 	add.w	r8, r1, #20
 800774e:	f100 0514 	add.w	r5, r0, #20
 8007752:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007756:	9301      	str	r3, [sp, #4]
 8007758:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800775c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007760:	3301      	adds	r3, #1
 8007762:	429a      	cmp	r2, r3
 8007764:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007768:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800776c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007770:	d331      	bcc.n	80077d6 <quorem+0x9e>
 8007772:	f04f 0e00 	mov.w	lr, #0
 8007776:	4640      	mov	r0, r8
 8007778:	46ac      	mov	ip, r5
 800777a:	46f2      	mov	sl, lr
 800777c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007780:	b293      	uxth	r3, r2
 8007782:	fb06 e303 	mla	r3, r6, r3, lr
 8007786:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800778a:	b29b      	uxth	r3, r3
 800778c:	ebaa 0303 	sub.w	r3, sl, r3
 8007790:	f8dc a000 	ldr.w	sl, [ip]
 8007794:	0c12      	lsrs	r2, r2, #16
 8007796:	fa13 f38a 	uxtah	r3, r3, sl
 800779a:	fb06 e202 	mla	r2, r6, r2, lr
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	9b00      	ldr	r3, [sp, #0]
 80077a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077a6:	b292      	uxth	r2, r2
 80077a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80077ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80077b4:	4581      	cmp	r9, r0
 80077b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077ba:	f84c 3b04 	str.w	r3, [ip], #4
 80077be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077c2:	d2db      	bcs.n	800777c <quorem+0x44>
 80077c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80077c8:	b92b      	cbnz	r3, 80077d6 <quorem+0x9e>
 80077ca:	9b01      	ldr	r3, [sp, #4]
 80077cc:	3b04      	subs	r3, #4
 80077ce:	429d      	cmp	r5, r3
 80077d0:	461a      	mov	r2, r3
 80077d2:	d32e      	bcc.n	8007832 <quorem+0xfa>
 80077d4:	613c      	str	r4, [r7, #16]
 80077d6:	4638      	mov	r0, r7
 80077d8:	f001 fc10 	bl	8008ffc <__mcmp>
 80077dc:	2800      	cmp	r0, #0
 80077de:	db24      	blt.n	800782a <quorem+0xf2>
 80077e0:	3601      	adds	r6, #1
 80077e2:	4628      	mov	r0, r5
 80077e4:	f04f 0c00 	mov.w	ip, #0
 80077e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80077ec:	f8d0 e000 	ldr.w	lr, [r0]
 80077f0:	b293      	uxth	r3, r2
 80077f2:	ebac 0303 	sub.w	r3, ip, r3
 80077f6:	0c12      	lsrs	r2, r2, #16
 80077f8:	fa13 f38e 	uxtah	r3, r3, lr
 80077fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007800:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007804:	b29b      	uxth	r3, r3
 8007806:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800780a:	45c1      	cmp	r9, r8
 800780c:	f840 3b04 	str.w	r3, [r0], #4
 8007810:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007814:	d2e8      	bcs.n	80077e8 <quorem+0xb0>
 8007816:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800781a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800781e:	b922      	cbnz	r2, 800782a <quorem+0xf2>
 8007820:	3b04      	subs	r3, #4
 8007822:	429d      	cmp	r5, r3
 8007824:	461a      	mov	r2, r3
 8007826:	d30a      	bcc.n	800783e <quorem+0x106>
 8007828:	613c      	str	r4, [r7, #16]
 800782a:	4630      	mov	r0, r6
 800782c:	b003      	add	sp, #12
 800782e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007832:	6812      	ldr	r2, [r2, #0]
 8007834:	3b04      	subs	r3, #4
 8007836:	2a00      	cmp	r2, #0
 8007838:	d1cc      	bne.n	80077d4 <quorem+0x9c>
 800783a:	3c01      	subs	r4, #1
 800783c:	e7c7      	b.n	80077ce <quorem+0x96>
 800783e:	6812      	ldr	r2, [r2, #0]
 8007840:	3b04      	subs	r3, #4
 8007842:	2a00      	cmp	r2, #0
 8007844:	d1f0      	bne.n	8007828 <quorem+0xf0>
 8007846:	3c01      	subs	r4, #1
 8007848:	e7eb      	b.n	8007822 <quorem+0xea>
 800784a:	2000      	movs	r0, #0
 800784c:	e7ee      	b.n	800782c <quorem+0xf4>
	...

08007850 <_dtoa_r>:
 8007850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007854:	ed2d 8b02 	vpush	{d8}
 8007858:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800785a:	b091      	sub	sp, #68	; 0x44
 800785c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007860:	ec59 8b10 	vmov	r8, r9, d0
 8007864:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007866:	9106      	str	r1, [sp, #24]
 8007868:	4606      	mov	r6, r0
 800786a:	9208      	str	r2, [sp, #32]
 800786c:	930c      	str	r3, [sp, #48]	; 0x30
 800786e:	b975      	cbnz	r5, 800788e <_dtoa_r+0x3e>
 8007870:	2010      	movs	r0, #16
 8007872:	f001 f8cf 	bl	8008a14 <malloc>
 8007876:	4602      	mov	r2, r0
 8007878:	6270      	str	r0, [r6, #36]	; 0x24
 800787a:	b920      	cbnz	r0, 8007886 <_dtoa_r+0x36>
 800787c:	4baa      	ldr	r3, [pc, #680]	; (8007b28 <_dtoa_r+0x2d8>)
 800787e:	21ea      	movs	r1, #234	; 0xea
 8007880:	48aa      	ldr	r0, [pc, #680]	; (8007b2c <_dtoa_r+0x2dc>)
 8007882:	f002 f83b 	bl	80098fc <__assert_func>
 8007886:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800788a:	6005      	str	r5, [r0, #0]
 800788c:	60c5      	str	r5, [r0, #12]
 800788e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007890:	6819      	ldr	r1, [r3, #0]
 8007892:	b151      	cbz	r1, 80078aa <_dtoa_r+0x5a>
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	604a      	str	r2, [r1, #4]
 8007898:	2301      	movs	r3, #1
 800789a:	4093      	lsls	r3, r2
 800789c:	608b      	str	r3, [r1, #8]
 800789e:	4630      	mov	r0, r6
 80078a0:	f001 f920 	bl	8008ae4 <_Bfree>
 80078a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	f1b9 0300 	subs.w	r3, r9, #0
 80078ae:	bfbb      	ittet	lt
 80078b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078b4:	9303      	strlt	r3, [sp, #12]
 80078b6:	2300      	movge	r3, #0
 80078b8:	2201      	movlt	r2, #1
 80078ba:	bfac      	ite	ge
 80078bc:	6023      	strge	r3, [r4, #0]
 80078be:	6022      	strlt	r2, [r4, #0]
 80078c0:	4b9b      	ldr	r3, [pc, #620]	; (8007b30 <_dtoa_r+0x2e0>)
 80078c2:	9c03      	ldr	r4, [sp, #12]
 80078c4:	43a3      	bics	r3, r4
 80078c6:	d11c      	bne.n	8007902 <_dtoa_r+0xb2>
 80078c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80078d4:	ea53 0308 	orrs.w	r3, r3, r8
 80078d8:	f000 84fd 	beq.w	80082d6 <_dtoa_r+0xa86>
 80078dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078de:	b963      	cbnz	r3, 80078fa <_dtoa_r+0xaa>
 80078e0:	4b94      	ldr	r3, [pc, #592]	; (8007b34 <_dtoa_r+0x2e4>)
 80078e2:	e01f      	b.n	8007924 <_dtoa_r+0xd4>
 80078e4:	4b94      	ldr	r3, [pc, #592]	; (8007b38 <_dtoa_r+0x2e8>)
 80078e6:	9301      	str	r3, [sp, #4]
 80078e8:	3308      	adds	r3, #8
 80078ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	9801      	ldr	r0, [sp, #4]
 80078f0:	b011      	add	sp, #68	; 0x44
 80078f2:	ecbd 8b02 	vpop	{d8}
 80078f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fa:	4b8e      	ldr	r3, [pc, #568]	; (8007b34 <_dtoa_r+0x2e4>)
 80078fc:	9301      	str	r3, [sp, #4]
 80078fe:	3303      	adds	r3, #3
 8007900:	e7f3      	b.n	80078ea <_dtoa_r+0x9a>
 8007902:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007906:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800790a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800790e:	d10b      	bne.n	8007928 <_dtoa_r+0xd8>
 8007910:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007912:	2301      	movs	r3, #1
 8007914:	6013      	str	r3, [r2, #0]
 8007916:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 84d9 	beq.w	80082d0 <_dtoa_r+0xa80>
 800791e:	4887      	ldr	r0, [pc, #540]	; (8007b3c <_dtoa_r+0x2ec>)
 8007920:	6018      	str	r0, [r3, #0]
 8007922:	1e43      	subs	r3, r0, #1
 8007924:	9301      	str	r3, [sp, #4]
 8007926:	e7e2      	b.n	80078ee <_dtoa_r+0x9e>
 8007928:	a90f      	add	r1, sp, #60	; 0x3c
 800792a:	aa0e      	add	r2, sp, #56	; 0x38
 800792c:	4630      	mov	r0, r6
 800792e:	eeb0 0b48 	vmov.f64	d0, d8
 8007932:	f001 fc85 	bl	8009240 <__d2b>
 8007936:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800793a:	4605      	mov	r5, r0
 800793c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800793e:	2900      	cmp	r1, #0
 8007940:	d046      	beq.n	80079d0 <_dtoa_r+0x180>
 8007942:	ee18 4a90 	vmov	r4, s17
 8007946:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800794a:	ec53 2b18 	vmov	r2, r3, d8
 800794e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007952:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007956:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800795a:	2400      	movs	r4, #0
 800795c:	ec43 2b16 	vmov	d6, r2, r3
 8007960:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007964:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007b10 <_dtoa_r+0x2c0>
 8007968:	ee36 7b47 	vsub.f64	d7, d6, d7
 800796c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8007b18 <_dtoa_r+0x2c8>
 8007970:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007974:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007b20 <_dtoa_r+0x2d0>
 8007978:	ee07 1a90 	vmov	s15, r1
 800797c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007980:	eeb0 7b46 	vmov.f64	d7, d6
 8007984:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007988:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800798c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007994:	ee16 ba90 	vmov	fp, s13
 8007998:	940a      	str	r4, [sp, #40]	; 0x28
 800799a:	d508      	bpl.n	80079ae <_dtoa_r+0x15e>
 800799c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80079a0:	eeb4 6b47 	vcmp.f64	d6, d7
 80079a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a8:	bf18      	it	ne
 80079aa:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80079ae:	f1bb 0f16 	cmp.w	fp, #22
 80079b2:	d82f      	bhi.n	8007a14 <_dtoa_r+0x1c4>
 80079b4:	4b62      	ldr	r3, [pc, #392]	; (8007b40 <_dtoa_r+0x2f0>)
 80079b6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80079ba:	ed93 7b00 	vldr	d7, [r3]
 80079be:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80079c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c6:	d501      	bpl.n	80079cc <_dtoa_r+0x17c>
 80079c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079cc:	2300      	movs	r3, #0
 80079ce:	e022      	b.n	8007a16 <_dtoa_r+0x1c6>
 80079d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80079d2:	4401      	add	r1, r0
 80079d4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80079d8:	2b20      	cmp	r3, #32
 80079da:	bfc1      	itttt	gt
 80079dc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80079e0:	fa04 f303 	lslgt.w	r3, r4, r3
 80079e4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80079e8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80079ec:	bfd6      	itet	le
 80079ee:	f1c3 0320 	rsble	r3, r3, #32
 80079f2:	ea43 0808 	orrgt.w	r8, r3, r8
 80079f6:	fa08 f803 	lslle.w	r8, r8, r3
 80079fa:	ee07 8a90 	vmov	s15, r8
 80079fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007a02:	3901      	subs	r1, #1
 8007a04:	ee17 4a90 	vmov	r4, s15
 8007a08:	ec53 2b17 	vmov	r2, r3, d7
 8007a0c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007a10:	2401      	movs	r4, #1
 8007a12:	e7a3      	b.n	800795c <_dtoa_r+0x10c>
 8007a14:	2301      	movs	r3, #1
 8007a16:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a18:	1a43      	subs	r3, r0, r1
 8007a1a:	1e5a      	subs	r2, r3, #1
 8007a1c:	bf45      	ittet	mi
 8007a1e:	f1c3 0301 	rsbmi	r3, r3, #1
 8007a22:	9304      	strmi	r3, [sp, #16]
 8007a24:	2300      	movpl	r3, #0
 8007a26:	2300      	movmi	r3, #0
 8007a28:	9205      	str	r2, [sp, #20]
 8007a2a:	bf54      	ite	pl
 8007a2c:	9304      	strpl	r3, [sp, #16]
 8007a2e:	9305      	strmi	r3, [sp, #20]
 8007a30:	f1bb 0f00 	cmp.w	fp, #0
 8007a34:	db18      	blt.n	8007a68 <_dtoa_r+0x218>
 8007a36:	9b05      	ldr	r3, [sp, #20]
 8007a38:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8007a3c:	445b      	add	r3, fp
 8007a3e:	9305      	str	r3, [sp, #20]
 8007a40:	2300      	movs	r3, #0
 8007a42:	9a06      	ldr	r2, [sp, #24]
 8007a44:	2a09      	cmp	r2, #9
 8007a46:	d849      	bhi.n	8007adc <_dtoa_r+0x28c>
 8007a48:	2a05      	cmp	r2, #5
 8007a4a:	bfc4      	itt	gt
 8007a4c:	3a04      	subgt	r2, #4
 8007a4e:	9206      	strgt	r2, [sp, #24]
 8007a50:	9a06      	ldr	r2, [sp, #24]
 8007a52:	f1a2 0202 	sub.w	r2, r2, #2
 8007a56:	bfcc      	ite	gt
 8007a58:	2400      	movgt	r4, #0
 8007a5a:	2401      	movle	r4, #1
 8007a5c:	2a03      	cmp	r2, #3
 8007a5e:	d848      	bhi.n	8007af2 <_dtoa_r+0x2a2>
 8007a60:	e8df f002 	tbb	[pc, r2]
 8007a64:	3a2c2e0b 	.word	0x3a2c2e0b
 8007a68:	9b04      	ldr	r3, [sp, #16]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	eba3 030b 	sub.w	r3, r3, fp
 8007a70:	9304      	str	r3, [sp, #16]
 8007a72:	9209      	str	r2, [sp, #36]	; 0x24
 8007a74:	f1cb 0300 	rsb	r3, fp, #0
 8007a78:	e7e3      	b.n	8007a42 <_dtoa_r+0x1f2>
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	9207      	str	r2, [sp, #28]
 8007a7e:	9a08      	ldr	r2, [sp, #32]
 8007a80:	2a00      	cmp	r2, #0
 8007a82:	dc39      	bgt.n	8007af8 <_dtoa_r+0x2a8>
 8007a84:	f04f 0a01 	mov.w	sl, #1
 8007a88:	46d1      	mov	r9, sl
 8007a8a:	4652      	mov	r2, sl
 8007a8c:	f8cd a020 	str.w	sl, [sp, #32]
 8007a90:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007a92:	2100      	movs	r1, #0
 8007a94:	6079      	str	r1, [r7, #4]
 8007a96:	2004      	movs	r0, #4
 8007a98:	f100 0c14 	add.w	ip, r0, #20
 8007a9c:	4594      	cmp	ip, r2
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	d92f      	bls.n	8007b02 <_dtoa_r+0x2b2>
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	930d      	str	r3, [sp, #52]	; 0x34
 8007aa6:	f000 ffdd 	bl	8008a64 <_Balloc>
 8007aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aac:	9001      	str	r0, [sp, #4]
 8007aae:	4602      	mov	r2, r0
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d149      	bne.n	8007b48 <_dtoa_r+0x2f8>
 8007ab4:	4b23      	ldr	r3, [pc, #140]	; (8007b44 <_dtoa_r+0x2f4>)
 8007ab6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007aba:	e6e1      	b.n	8007880 <_dtoa_r+0x30>
 8007abc:	2201      	movs	r2, #1
 8007abe:	e7dd      	b.n	8007a7c <_dtoa_r+0x22c>
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	9207      	str	r2, [sp, #28]
 8007ac4:	9a08      	ldr	r2, [sp, #32]
 8007ac6:	eb0b 0a02 	add.w	sl, fp, r2
 8007aca:	f10a 0901 	add.w	r9, sl, #1
 8007ace:	464a      	mov	r2, r9
 8007ad0:	2a01      	cmp	r2, #1
 8007ad2:	bfb8      	it	lt
 8007ad4:	2201      	movlt	r2, #1
 8007ad6:	e7db      	b.n	8007a90 <_dtoa_r+0x240>
 8007ad8:	2201      	movs	r2, #1
 8007ada:	e7f2      	b.n	8007ac2 <_dtoa_r+0x272>
 8007adc:	2401      	movs	r4, #1
 8007ade:	2200      	movs	r2, #0
 8007ae0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007ae4:	f04f 3aff 	mov.w	sl, #4294967295
 8007ae8:	2100      	movs	r1, #0
 8007aea:	46d1      	mov	r9, sl
 8007aec:	2212      	movs	r2, #18
 8007aee:	9108      	str	r1, [sp, #32]
 8007af0:	e7ce      	b.n	8007a90 <_dtoa_r+0x240>
 8007af2:	2201      	movs	r2, #1
 8007af4:	9207      	str	r2, [sp, #28]
 8007af6:	e7f5      	b.n	8007ae4 <_dtoa_r+0x294>
 8007af8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007afc:	46d1      	mov	r9, sl
 8007afe:	4652      	mov	r2, sl
 8007b00:	e7c6      	b.n	8007a90 <_dtoa_r+0x240>
 8007b02:	3101      	adds	r1, #1
 8007b04:	6079      	str	r1, [r7, #4]
 8007b06:	0040      	lsls	r0, r0, #1
 8007b08:	e7c6      	b.n	8007a98 <_dtoa_r+0x248>
 8007b0a:	bf00      	nop
 8007b0c:	f3af 8000 	nop.w
 8007b10:	636f4361 	.word	0x636f4361
 8007b14:	3fd287a7 	.word	0x3fd287a7
 8007b18:	8b60c8b3 	.word	0x8b60c8b3
 8007b1c:	3fc68a28 	.word	0x3fc68a28
 8007b20:	509f79fb 	.word	0x509f79fb
 8007b24:	3fd34413 	.word	0x3fd34413
 8007b28:	08030106 	.word	0x08030106
 8007b2c:	0803011d 	.word	0x0803011d
 8007b30:	7ff00000 	.word	0x7ff00000
 8007b34:	08030102 	.word	0x08030102
 8007b38:	080300f9 	.word	0x080300f9
 8007b3c:	0802ff79 	.word	0x0802ff79
 8007b40:	08030288 	.word	0x08030288
 8007b44:	08030178 	.word	0x08030178
 8007b48:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007b4a:	9901      	ldr	r1, [sp, #4]
 8007b4c:	6011      	str	r1, [r2, #0]
 8007b4e:	f1b9 0f0e 	cmp.w	r9, #14
 8007b52:	d86c      	bhi.n	8007c2e <_dtoa_r+0x3de>
 8007b54:	2c00      	cmp	r4, #0
 8007b56:	d06a      	beq.n	8007c2e <_dtoa_r+0x3de>
 8007b58:	f1bb 0f00 	cmp.w	fp, #0
 8007b5c:	f340 80a0 	ble.w	8007ca0 <_dtoa_r+0x450>
 8007b60:	49c1      	ldr	r1, [pc, #772]	; (8007e68 <_dtoa_r+0x618>)
 8007b62:	f00b 020f 	and.w	r2, fp, #15
 8007b66:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007b6a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007b6e:	ed92 7b00 	vldr	d7, [r2]
 8007b72:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007b76:	f000 8087 	beq.w	8007c88 <_dtoa_r+0x438>
 8007b7a:	4abc      	ldr	r2, [pc, #752]	; (8007e6c <_dtoa_r+0x61c>)
 8007b7c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007b80:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007b84:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007b88:	f001 010f 	and.w	r1, r1, #15
 8007b8c:	2203      	movs	r2, #3
 8007b8e:	48b7      	ldr	r0, [pc, #732]	; (8007e6c <_dtoa_r+0x61c>)
 8007b90:	2900      	cmp	r1, #0
 8007b92:	d17b      	bne.n	8007c8c <_dtoa_r+0x43c>
 8007b94:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007b98:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007b9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ba0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ba2:	2900      	cmp	r1, #0
 8007ba4:	f000 80a2 	beq.w	8007cec <_dtoa_r+0x49c>
 8007ba8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007bac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bb0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb8:	f140 8098 	bpl.w	8007cec <_dtoa_r+0x49c>
 8007bbc:	f1b9 0f00 	cmp.w	r9, #0
 8007bc0:	f000 8094 	beq.w	8007cec <_dtoa_r+0x49c>
 8007bc4:	f1ba 0f00 	cmp.w	sl, #0
 8007bc8:	dd2f      	ble.n	8007c2a <_dtoa_r+0x3da>
 8007bca:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007bce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007bd2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007bd6:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007bda:	3201      	adds	r2, #1
 8007bdc:	4650      	mov	r0, sl
 8007bde:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007be2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007be6:	ee07 2a90 	vmov	s15, r2
 8007bea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007bee:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007bf2:	ee15 4a90 	vmov	r4, s11
 8007bf6:	ec52 1b15 	vmov	r1, r2, d5
 8007bfa:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d177      	bne.n	8007cf2 <_dtoa_r+0x4a2>
 8007c02:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007c06:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007c0a:	ec42 1b17 	vmov	d7, r1, r2
 8007c0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c16:	f300 8263 	bgt.w	80080e0 <_dtoa_r+0x890>
 8007c1a:	eeb1 7b47 	vneg.f64	d7, d7
 8007c1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c26:	f100 8258 	bmi.w	80080da <_dtoa_r+0x88a>
 8007c2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007c2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c30:	2a00      	cmp	r2, #0
 8007c32:	f2c0 811d 	blt.w	8007e70 <_dtoa_r+0x620>
 8007c36:	f1bb 0f0e 	cmp.w	fp, #14
 8007c3a:	f300 8119 	bgt.w	8007e70 <_dtoa_r+0x620>
 8007c3e:	4b8a      	ldr	r3, [pc, #552]	; (8007e68 <_dtoa_r+0x618>)
 8007c40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c44:	ed93 6b00 	vldr	d6, [r3]
 8007c48:	9b08      	ldr	r3, [sp, #32]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f280 80b7 	bge.w	8007dbe <_dtoa_r+0x56e>
 8007c50:	f1b9 0f00 	cmp.w	r9, #0
 8007c54:	f300 80b3 	bgt.w	8007dbe <_dtoa_r+0x56e>
 8007c58:	f040 823f 	bne.w	80080da <_dtoa_r+0x88a>
 8007c5c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007c60:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007c64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c70:	464c      	mov	r4, r9
 8007c72:	464f      	mov	r7, r9
 8007c74:	f280 8215 	bge.w	80080a2 <_dtoa_r+0x852>
 8007c78:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007c7c:	2331      	movs	r3, #49	; 0x31
 8007c7e:	f808 3b01 	strb.w	r3, [r8], #1
 8007c82:	f10b 0b01 	add.w	fp, fp, #1
 8007c86:	e211      	b.n	80080ac <_dtoa_r+0x85c>
 8007c88:	2202      	movs	r2, #2
 8007c8a:	e780      	b.n	8007b8e <_dtoa_r+0x33e>
 8007c8c:	07cc      	lsls	r4, r1, #31
 8007c8e:	d504      	bpl.n	8007c9a <_dtoa_r+0x44a>
 8007c90:	ed90 6b00 	vldr	d6, [r0]
 8007c94:	3201      	adds	r2, #1
 8007c96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c9a:	1049      	asrs	r1, r1, #1
 8007c9c:	3008      	adds	r0, #8
 8007c9e:	e777      	b.n	8007b90 <_dtoa_r+0x340>
 8007ca0:	d022      	beq.n	8007ce8 <_dtoa_r+0x498>
 8007ca2:	f1cb 0100 	rsb	r1, fp, #0
 8007ca6:	4a70      	ldr	r2, [pc, #448]	; (8007e68 <_dtoa_r+0x618>)
 8007ca8:	f001 000f 	and.w	r0, r1, #15
 8007cac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007cb0:	ed92 7b00 	vldr	d7, [r2]
 8007cb4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007cb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007cbc:	486b      	ldr	r0, [pc, #428]	; (8007e6c <_dtoa_r+0x61c>)
 8007cbe:	1109      	asrs	r1, r1, #4
 8007cc0:	2400      	movs	r4, #0
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	b929      	cbnz	r1, 8007cd2 <_dtoa_r+0x482>
 8007cc6:	2c00      	cmp	r4, #0
 8007cc8:	f43f af6a 	beq.w	8007ba0 <_dtoa_r+0x350>
 8007ccc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007cd0:	e766      	b.n	8007ba0 <_dtoa_r+0x350>
 8007cd2:	07cf      	lsls	r7, r1, #31
 8007cd4:	d505      	bpl.n	8007ce2 <_dtoa_r+0x492>
 8007cd6:	ed90 6b00 	vldr	d6, [r0]
 8007cda:	3201      	adds	r2, #1
 8007cdc:	2401      	movs	r4, #1
 8007cde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ce2:	1049      	asrs	r1, r1, #1
 8007ce4:	3008      	adds	r0, #8
 8007ce6:	e7ed      	b.n	8007cc4 <_dtoa_r+0x474>
 8007ce8:	2202      	movs	r2, #2
 8007cea:	e759      	b.n	8007ba0 <_dtoa_r+0x350>
 8007cec:	465f      	mov	r7, fp
 8007cee:	4648      	mov	r0, r9
 8007cf0:	e775      	b.n	8007bde <_dtoa_r+0x38e>
 8007cf2:	ec42 1b17 	vmov	d7, r1, r2
 8007cf6:	4a5c      	ldr	r2, [pc, #368]	; (8007e68 <_dtoa_r+0x618>)
 8007cf8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007cfc:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007d00:	9a01      	ldr	r2, [sp, #4]
 8007d02:	1814      	adds	r4, r2, r0
 8007d04:	9a07      	ldr	r2, [sp, #28]
 8007d06:	b352      	cbz	r2, 8007d5e <_dtoa_r+0x50e>
 8007d08:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007d0c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007d10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007d14:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007d18:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007d1c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007d20:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007d24:	ee14 2a90 	vmov	r2, s9
 8007d28:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007d2c:	3230      	adds	r2, #48	; 0x30
 8007d2e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007d32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d3a:	f808 2b01 	strb.w	r2, [r8], #1
 8007d3e:	d439      	bmi.n	8007db4 <_dtoa_r+0x564>
 8007d40:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007d44:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d4c:	d472      	bmi.n	8007e34 <_dtoa_r+0x5e4>
 8007d4e:	45a0      	cmp	r8, r4
 8007d50:	f43f af6b 	beq.w	8007c2a <_dtoa_r+0x3da>
 8007d54:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007d58:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007d5c:	e7e0      	b.n	8007d20 <_dtoa_r+0x4d0>
 8007d5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007d62:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007d66:	4621      	mov	r1, r4
 8007d68:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007d6c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007d70:	ee14 2a90 	vmov	r2, s9
 8007d74:	3230      	adds	r2, #48	; 0x30
 8007d76:	f808 2b01 	strb.w	r2, [r8], #1
 8007d7a:	45a0      	cmp	r8, r4
 8007d7c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007d80:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007d84:	d118      	bne.n	8007db8 <_dtoa_r+0x568>
 8007d86:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007d8a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007d8e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d96:	dc4d      	bgt.n	8007e34 <_dtoa_r+0x5e4>
 8007d98:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007d9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da4:	f57f af41 	bpl.w	8007c2a <_dtoa_r+0x3da>
 8007da8:	4688      	mov	r8, r1
 8007daa:	3901      	subs	r1, #1
 8007dac:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007db0:	2b30      	cmp	r3, #48	; 0x30
 8007db2:	d0f9      	beq.n	8007da8 <_dtoa_r+0x558>
 8007db4:	46bb      	mov	fp, r7
 8007db6:	e02a      	b.n	8007e0e <_dtoa_r+0x5be>
 8007db8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007dbc:	e7d6      	b.n	8007d6c <_dtoa_r+0x51c>
 8007dbe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007dc2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007dc6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007dca:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007dce:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007dd2:	ee15 3a10 	vmov	r3, s10
 8007dd6:	3330      	adds	r3, #48	; 0x30
 8007dd8:	f808 3b01 	strb.w	r3, [r8], #1
 8007ddc:	9b01      	ldr	r3, [sp, #4]
 8007dde:	eba8 0303 	sub.w	r3, r8, r3
 8007de2:	4599      	cmp	r9, r3
 8007de4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007de8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007dec:	d133      	bne.n	8007e56 <_dtoa_r+0x606>
 8007dee:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007df2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dfa:	dc1a      	bgt.n	8007e32 <_dtoa_r+0x5e2>
 8007dfc:	eeb4 7b46 	vcmp.f64	d7, d6
 8007e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e04:	d103      	bne.n	8007e0e <_dtoa_r+0x5be>
 8007e06:	ee15 3a10 	vmov	r3, s10
 8007e0a:	07d9      	lsls	r1, r3, #31
 8007e0c:	d411      	bmi.n	8007e32 <_dtoa_r+0x5e2>
 8007e0e:	4629      	mov	r1, r5
 8007e10:	4630      	mov	r0, r6
 8007e12:	f000 fe67 	bl	8008ae4 <_Bfree>
 8007e16:	2300      	movs	r3, #0
 8007e18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e1a:	f888 3000 	strb.w	r3, [r8]
 8007e1e:	f10b 0301 	add.w	r3, fp, #1
 8007e22:	6013      	str	r3, [r2, #0]
 8007e24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f43f ad61 	beq.w	80078ee <_dtoa_r+0x9e>
 8007e2c:	f8c3 8000 	str.w	r8, [r3]
 8007e30:	e55d      	b.n	80078ee <_dtoa_r+0x9e>
 8007e32:	465f      	mov	r7, fp
 8007e34:	4643      	mov	r3, r8
 8007e36:	4698      	mov	r8, r3
 8007e38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e3c:	2a39      	cmp	r2, #57	; 0x39
 8007e3e:	d106      	bne.n	8007e4e <_dtoa_r+0x5fe>
 8007e40:	9a01      	ldr	r2, [sp, #4]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d1f7      	bne.n	8007e36 <_dtoa_r+0x5e6>
 8007e46:	9901      	ldr	r1, [sp, #4]
 8007e48:	2230      	movs	r2, #48	; 0x30
 8007e4a:	3701      	adds	r7, #1
 8007e4c:	700a      	strb	r2, [r1, #0]
 8007e4e:	781a      	ldrb	r2, [r3, #0]
 8007e50:	3201      	adds	r2, #1
 8007e52:	701a      	strb	r2, [r3, #0]
 8007e54:	e7ae      	b.n	8007db4 <_dtoa_r+0x564>
 8007e56:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007e5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e62:	d1b2      	bne.n	8007dca <_dtoa_r+0x57a>
 8007e64:	e7d3      	b.n	8007e0e <_dtoa_r+0x5be>
 8007e66:	bf00      	nop
 8007e68:	08030288 	.word	0x08030288
 8007e6c:	08030260 	.word	0x08030260
 8007e70:	9907      	ldr	r1, [sp, #28]
 8007e72:	2900      	cmp	r1, #0
 8007e74:	f000 80d0 	beq.w	8008018 <_dtoa_r+0x7c8>
 8007e78:	9906      	ldr	r1, [sp, #24]
 8007e7a:	2901      	cmp	r1, #1
 8007e7c:	f300 80b4 	bgt.w	8007fe8 <_dtoa_r+0x798>
 8007e80:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007e82:	2900      	cmp	r1, #0
 8007e84:	f000 80ac 	beq.w	8007fe0 <_dtoa_r+0x790>
 8007e88:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007e8c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007e90:	461c      	mov	r4, r3
 8007e92:	930a      	str	r3, [sp, #40]	; 0x28
 8007e94:	9b04      	ldr	r3, [sp, #16]
 8007e96:	4413      	add	r3, r2
 8007e98:	9304      	str	r3, [sp, #16]
 8007e9a:	9b05      	ldr	r3, [sp, #20]
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	4413      	add	r3, r2
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	9305      	str	r3, [sp, #20]
 8007ea4:	f000 ff20 	bl	8008ce8 <__i2b>
 8007ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eaa:	4607      	mov	r7, r0
 8007eac:	f1b8 0f00 	cmp.w	r8, #0
 8007eb0:	dd0d      	ble.n	8007ece <_dtoa_r+0x67e>
 8007eb2:	9a05      	ldr	r2, [sp, #20]
 8007eb4:	2a00      	cmp	r2, #0
 8007eb6:	dd0a      	ble.n	8007ece <_dtoa_r+0x67e>
 8007eb8:	4542      	cmp	r2, r8
 8007eba:	9904      	ldr	r1, [sp, #16]
 8007ebc:	bfa8      	it	ge
 8007ebe:	4642      	movge	r2, r8
 8007ec0:	1a89      	subs	r1, r1, r2
 8007ec2:	9104      	str	r1, [sp, #16]
 8007ec4:	9905      	ldr	r1, [sp, #20]
 8007ec6:	eba8 0802 	sub.w	r8, r8, r2
 8007eca:	1a8a      	subs	r2, r1, r2
 8007ecc:	9205      	str	r2, [sp, #20]
 8007ece:	b303      	cbz	r3, 8007f12 <_dtoa_r+0x6c2>
 8007ed0:	9a07      	ldr	r2, [sp, #28]
 8007ed2:	2a00      	cmp	r2, #0
 8007ed4:	f000 80a5 	beq.w	8008022 <_dtoa_r+0x7d2>
 8007ed8:	2c00      	cmp	r4, #0
 8007eda:	dd13      	ble.n	8007f04 <_dtoa_r+0x6b4>
 8007edc:	4639      	mov	r1, r7
 8007ede:	4622      	mov	r2, r4
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	930d      	str	r3, [sp, #52]	; 0x34
 8007ee4:	f000 ffc0 	bl	8008e68 <__pow5mult>
 8007ee8:	462a      	mov	r2, r5
 8007eea:	4601      	mov	r1, r0
 8007eec:	4607      	mov	r7, r0
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f000 ff10 	bl	8008d14 <__multiply>
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	900a      	str	r0, [sp, #40]	; 0x28
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f000 fdf3 	bl	8008ae4 <_Bfree>
 8007efe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f02:	4615      	mov	r5, r2
 8007f04:	1b1a      	subs	r2, r3, r4
 8007f06:	d004      	beq.n	8007f12 <_dtoa_r+0x6c2>
 8007f08:	4629      	mov	r1, r5
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f000 ffac 	bl	8008e68 <__pow5mult>
 8007f10:	4605      	mov	r5, r0
 8007f12:	2101      	movs	r1, #1
 8007f14:	4630      	mov	r0, r6
 8007f16:	f000 fee7 	bl	8008ce8 <__i2b>
 8007f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	4604      	mov	r4, r0
 8007f20:	f340 8081 	ble.w	8008026 <_dtoa_r+0x7d6>
 8007f24:	461a      	mov	r2, r3
 8007f26:	4601      	mov	r1, r0
 8007f28:	4630      	mov	r0, r6
 8007f2a:	f000 ff9d 	bl	8008e68 <__pow5mult>
 8007f2e:	9b06      	ldr	r3, [sp, #24]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	4604      	mov	r4, r0
 8007f34:	dd7a      	ble.n	800802c <_dtoa_r+0x7dc>
 8007f36:	2300      	movs	r3, #0
 8007f38:	930a      	str	r3, [sp, #40]	; 0x28
 8007f3a:	6922      	ldr	r2, [r4, #16]
 8007f3c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007f40:	6910      	ldr	r0, [r2, #16]
 8007f42:	f000 fe81 	bl	8008c48 <__hi0bits>
 8007f46:	f1c0 0020 	rsb	r0, r0, #32
 8007f4a:	9b05      	ldr	r3, [sp, #20]
 8007f4c:	4418      	add	r0, r3
 8007f4e:	f010 001f 	ands.w	r0, r0, #31
 8007f52:	f000 808c 	beq.w	800806e <_dtoa_r+0x81e>
 8007f56:	f1c0 0220 	rsb	r2, r0, #32
 8007f5a:	2a04      	cmp	r2, #4
 8007f5c:	f340 8085 	ble.w	800806a <_dtoa_r+0x81a>
 8007f60:	f1c0 001c 	rsb	r0, r0, #28
 8007f64:	9b04      	ldr	r3, [sp, #16]
 8007f66:	4403      	add	r3, r0
 8007f68:	9304      	str	r3, [sp, #16]
 8007f6a:	9b05      	ldr	r3, [sp, #20]
 8007f6c:	4403      	add	r3, r0
 8007f6e:	4480      	add	r8, r0
 8007f70:	9305      	str	r3, [sp, #20]
 8007f72:	9b04      	ldr	r3, [sp, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dd05      	ble.n	8007f84 <_dtoa_r+0x734>
 8007f78:	4629      	mov	r1, r5
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	f000 ffcd 	bl	8008f1c <__lshift>
 8007f82:	4605      	mov	r5, r0
 8007f84:	9b05      	ldr	r3, [sp, #20]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	dd05      	ble.n	8007f96 <_dtoa_r+0x746>
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f000 ffc4 	bl	8008f1c <__lshift>
 8007f94:	4604      	mov	r4, r0
 8007f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d06a      	beq.n	8008072 <_dtoa_r+0x822>
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f001 f82c 	bl	8008ffc <__mcmp>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	da64      	bge.n	8008072 <_dtoa_r+0x822>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	4629      	mov	r1, r5
 8007fac:	220a      	movs	r2, #10
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f000 fdba 	bl	8008b28 <__multadd>
 8007fb4:	9b07      	ldr	r3, [sp, #28]
 8007fb6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fba:	4605      	mov	r5, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f000 8191 	beq.w	80082e4 <_dtoa_r+0xa94>
 8007fc2:	4639      	mov	r1, r7
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	220a      	movs	r2, #10
 8007fc8:	4630      	mov	r0, r6
 8007fca:	f000 fdad 	bl	8008b28 <__multadd>
 8007fce:	f1ba 0f00 	cmp.w	sl, #0
 8007fd2:	4607      	mov	r7, r0
 8007fd4:	f300 808d 	bgt.w	80080f2 <_dtoa_r+0x8a2>
 8007fd8:	9b06      	ldr	r3, [sp, #24]
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	dc50      	bgt.n	8008080 <_dtoa_r+0x830>
 8007fde:	e088      	b.n	80080f2 <_dtoa_r+0x8a2>
 8007fe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fe2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007fe6:	e751      	b.n	8007e8c <_dtoa_r+0x63c>
 8007fe8:	f109 34ff 	add.w	r4, r9, #4294967295
 8007fec:	42a3      	cmp	r3, r4
 8007fee:	bfbf      	itttt	lt
 8007ff0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007ff2:	1ae3      	sublt	r3, r4, r3
 8007ff4:	18d2      	addlt	r2, r2, r3
 8007ff6:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007ff8:	bfb6      	itet	lt
 8007ffa:	4623      	movlt	r3, r4
 8007ffc:	1b1c      	subge	r4, r3, r4
 8007ffe:	2400      	movlt	r4, #0
 8008000:	f1b9 0f00 	cmp.w	r9, #0
 8008004:	bfb5      	itete	lt
 8008006:	9a04      	ldrlt	r2, [sp, #16]
 8008008:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800800c:	eba2 0809 	sublt.w	r8, r2, r9
 8008010:	464a      	movge	r2, r9
 8008012:	bfb8      	it	lt
 8008014:	2200      	movlt	r2, #0
 8008016:	e73c      	b.n	8007e92 <_dtoa_r+0x642>
 8008018:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800801c:	9f07      	ldr	r7, [sp, #28]
 800801e:	461c      	mov	r4, r3
 8008020:	e744      	b.n	8007eac <_dtoa_r+0x65c>
 8008022:	461a      	mov	r2, r3
 8008024:	e770      	b.n	8007f08 <_dtoa_r+0x6b8>
 8008026:	9b06      	ldr	r3, [sp, #24]
 8008028:	2b01      	cmp	r3, #1
 800802a:	dc18      	bgt.n	800805e <_dtoa_r+0x80e>
 800802c:	9b02      	ldr	r3, [sp, #8]
 800802e:	b9b3      	cbnz	r3, 800805e <_dtoa_r+0x80e>
 8008030:	9b03      	ldr	r3, [sp, #12]
 8008032:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008036:	b9a2      	cbnz	r2, 8008062 <_dtoa_r+0x812>
 8008038:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800803c:	0d12      	lsrs	r2, r2, #20
 800803e:	0512      	lsls	r2, r2, #20
 8008040:	b18a      	cbz	r2, 8008066 <_dtoa_r+0x816>
 8008042:	9b04      	ldr	r3, [sp, #16]
 8008044:	3301      	adds	r3, #1
 8008046:	9304      	str	r3, [sp, #16]
 8008048:	9b05      	ldr	r3, [sp, #20]
 800804a:	3301      	adds	r3, #1
 800804c:	9305      	str	r3, [sp, #20]
 800804e:	2301      	movs	r3, #1
 8008050:	930a      	str	r3, [sp, #40]	; 0x28
 8008052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008054:	2b00      	cmp	r3, #0
 8008056:	f47f af70 	bne.w	8007f3a <_dtoa_r+0x6ea>
 800805a:	2001      	movs	r0, #1
 800805c:	e775      	b.n	8007f4a <_dtoa_r+0x6fa>
 800805e:	2300      	movs	r3, #0
 8008060:	e7f6      	b.n	8008050 <_dtoa_r+0x800>
 8008062:	9b02      	ldr	r3, [sp, #8]
 8008064:	e7f4      	b.n	8008050 <_dtoa_r+0x800>
 8008066:	920a      	str	r2, [sp, #40]	; 0x28
 8008068:	e7f3      	b.n	8008052 <_dtoa_r+0x802>
 800806a:	d082      	beq.n	8007f72 <_dtoa_r+0x722>
 800806c:	4610      	mov	r0, r2
 800806e:	301c      	adds	r0, #28
 8008070:	e778      	b.n	8007f64 <_dtoa_r+0x714>
 8008072:	f1b9 0f00 	cmp.w	r9, #0
 8008076:	dc37      	bgt.n	80080e8 <_dtoa_r+0x898>
 8008078:	9b06      	ldr	r3, [sp, #24]
 800807a:	2b02      	cmp	r3, #2
 800807c:	dd34      	ble.n	80080e8 <_dtoa_r+0x898>
 800807e:	46ca      	mov	sl, r9
 8008080:	f1ba 0f00 	cmp.w	sl, #0
 8008084:	d10d      	bne.n	80080a2 <_dtoa_r+0x852>
 8008086:	4621      	mov	r1, r4
 8008088:	4653      	mov	r3, sl
 800808a:	2205      	movs	r2, #5
 800808c:	4630      	mov	r0, r6
 800808e:	f000 fd4b 	bl	8008b28 <__multadd>
 8008092:	4601      	mov	r1, r0
 8008094:	4604      	mov	r4, r0
 8008096:	4628      	mov	r0, r5
 8008098:	f000 ffb0 	bl	8008ffc <__mcmp>
 800809c:	2800      	cmp	r0, #0
 800809e:	f73f adeb 	bgt.w	8007c78 <_dtoa_r+0x428>
 80080a2:	9b08      	ldr	r3, [sp, #32]
 80080a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80080a8:	ea6f 0b03 	mvn.w	fp, r3
 80080ac:	f04f 0900 	mov.w	r9, #0
 80080b0:	4621      	mov	r1, r4
 80080b2:	4630      	mov	r0, r6
 80080b4:	f000 fd16 	bl	8008ae4 <_Bfree>
 80080b8:	2f00      	cmp	r7, #0
 80080ba:	f43f aea8 	beq.w	8007e0e <_dtoa_r+0x5be>
 80080be:	f1b9 0f00 	cmp.w	r9, #0
 80080c2:	d005      	beq.n	80080d0 <_dtoa_r+0x880>
 80080c4:	45b9      	cmp	r9, r7
 80080c6:	d003      	beq.n	80080d0 <_dtoa_r+0x880>
 80080c8:	4649      	mov	r1, r9
 80080ca:	4630      	mov	r0, r6
 80080cc:	f000 fd0a 	bl	8008ae4 <_Bfree>
 80080d0:	4639      	mov	r1, r7
 80080d2:	4630      	mov	r0, r6
 80080d4:	f000 fd06 	bl	8008ae4 <_Bfree>
 80080d8:	e699      	b.n	8007e0e <_dtoa_r+0x5be>
 80080da:	2400      	movs	r4, #0
 80080dc:	4627      	mov	r7, r4
 80080de:	e7e0      	b.n	80080a2 <_dtoa_r+0x852>
 80080e0:	46bb      	mov	fp, r7
 80080e2:	4604      	mov	r4, r0
 80080e4:	4607      	mov	r7, r0
 80080e6:	e5c7      	b.n	8007c78 <_dtoa_r+0x428>
 80080e8:	9b07      	ldr	r3, [sp, #28]
 80080ea:	46ca      	mov	sl, r9
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 8100 	beq.w	80082f2 <_dtoa_r+0xaa2>
 80080f2:	f1b8 0f00 	cmp.w	r8, #0
 80080f6:	dd05      	ble.n	8008104 <_dtoa_r+0x8b4>
 80080f8:	4639      	mov	r1, r7
 80080fa:	4642      	mov	r2, r8
 80080fc:	4630      	mov	r0, r6
 80080fe:	f000 ff0d 	bl	8008f1c <__lshift>
 8008102:	4607      	mov	r7, r0
 8008104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008106:	2b00      	cmp	r3, #0
 8008108:	d05d      	beq.n	80081c6 <_dtoa_r+0x976>
 800810a:	6879      	ldr	r1, [r7, #4]
 800810c:	4630      	mov	r0, r6
 800810e:	f000 fca9 	bl	8008a64 <_Balloc>
 8008112:	4680      	mov	r8, r0
 8008114:	b928      	cbnz	r0, 8008122 <_dtoa_r+0x8d2>
 8008116:	4b82      	ldr	r3, [pc, #520]	; (8008320 <_dtoa_r+0xad0>)
 8008118:	4602      	mov	r2, r0
 800811a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800811e:	f7ff bbaf 	b.w	8007880 <_dtoa_r+0x30>
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	3202      	adds	r2, #2
 8008126:	0092      	lsls	r2, r2, #2
 8008128:	f107 010c 	add.w	r1, r7, #12
 800812c:	300c      	adds	r0, #12
 800812e:	f000 fc8b 	bl	8008a48 <memcpy>
 8008132:	2201      	movs	r2, #1
 8008134:	4641      	mov	r1, r8
 8008136:	4630      	mov	r0, r6
 8008138:	f000 fef0 	bl	8008f1c <__lshift>
 800813c:	9b01      	ldr	r3, [sp, #4]
 800813e:	3301      	adds	r3, #1
 8008140:	9304      	str	r3, [sp, #16]
 8008142:	9b01      	ldr	r3, [sp, #4]
 8008144:	4453      	add	r3, sl
 8008146:	9308      	str	r3, [sp, #32]
 8008148:	9b02      	ldr	r3, [sp, #8]
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	46b9      	mov	r9, r7
 8008150:	9307      	str	r3, [sp, #28]
 8008152:	4607      	mov	r7, r0
 8008154:	9b04      	ldr	r3, [sp, #16]
 8008156:	4621      	mov	r1, r4
 8008158:	3b01      	subs	r3, #1
 800815a:	4628      	mov	r0, r5
 800815c:	9302      	str	r3, [sp, #8]
 800815e:	f7ff faeb 	bl	8007738 <quorem>
 8008162:	4603      	mov	r3, r0
 8008164:	3330      	adds	r3, #48	; 0x30
 8008166:	9005      	str	r0, [sp, #20]
 8008168:	4649      	mov	r1, r9
 800816a:	4628      	mov	r0, r5
 800816c:	9309      	str	r3, [sp, #36]	; 0x24
 800816e:	f000 ff45 	bl	8008ffc <__mcmp>
 8008172:	463a      	mov	r2, r7
 8008174:	4682      	mov	sl, r0
 8008176:	4621      	mov	r1, r4
 8008178:	4630      	mov	r0, r6
 800817a:	f000 ff5b 	bl	8009034 <__mdiff>
 800817e:	68c2      	ldr	r2, [r0, #12]
 8008180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008182:	4680      	mov	r8, r0
 8008184:	bb0a      	cbnz	r2, 80081ca <_dtoa_r+0x97a>
 8008186:	4601      	mov	r1, r0
 8008188:	4628      	mov	r0, r5
 800818a:	f000 ff37 	bl	8008ffc <__mcmp>
 800818e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008190:	4602      	mov	r2, r0
 8008192:	4641      	mov	r1, r8
 8008194:	4630      	mov	r0, r6
 8008196:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800819a:	f000 fca3 	bl	8008ae4 <_Bfree>
 800819e:	9b06      	ldr	r3, [sp, #24]
 80081a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081a2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80081a6:	ea43 0102 	orr.w	r1, r3, r2
 80081aa:	9b07      	ldr	r3, [sp, #28]
 80081ac:	430b      	orrs	r3, r1
 80081ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b0:	d10d      	bne.n	80081ce <_dtoa_r+0x97e>
 80081b2:	2b39      	cmp	r3, #57	; 0x39
 80081b4:	d029      	beq.n	800820a <_dtoa_r+0x9ba>
 80081b6:	f1ba 0f00 	cmp.w	sl, #0
 80081ba:	dd01      	ble.n	80081c0 <_dtoa_r+0x970>
 80081bc:	9b05      	ldr	r3, [sp, #20]
 80081be:	3331      	adds	r3, #49	; 0x31
 80081c0:	9a02      	ldr	r2, [sp, #8]
 80081c2:	7013      	strb	r3, [r2, #0]
 80081c4:	e774      	b.n	80080b0 <_dtoa_r+0x860>
 80081c6:	4638      	mov	r0, r7
 80081c8:	e7b8      	b.n	800813c <_dtoa_r+0x8ec>
 80081ca:	2201      	movs	r2, #1
 80081cc:	e7e1      	b.n	8008192 <_dtoa_r+0x942>
 80081ce:	f1ba 0f00 	cmp.w	sl, #0
 80081d2:	db06      	blt.n	80081e2 <_dtoa_r+0x992>
 80081d4:	9906      	ldr	r1, [sp, #24]
 80081d6:	ea41 0a0a 	orr.w	sl, r1, sl
 80081da:	9907      	ldr	r1, [sp, #28]
 80081dc:	ea5a 0101 	orrs.w	r1, sl, r1
 80081e0:	d120      	bne.n	8008224 <_dtoa_r+0x9d4>
 80081e2:	2a00      	cmp	r2, #0
 80081e4:	ddec      	ble.n	80081c0 <_dtoa_r+0x970>
 80081e6:	4629      	mov	r1, r5
 80081e8:	2201      	movs	r2, #1
 80081ea:	4630      	mov	r0, r6
 80081ec:	9304      	str	r3, [sp, #16]
 80081ee:	f000 fe95 	bl	8008f1c <__lshift>
 80081f2:	4621      	mov	r1, r4
 80081f4:	4605      	mov	r5, r0
 80081f6:	f000 ff01 	bl	8008ffc <__mcmp>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	9b04      	ldr	r3, [sp, #16]
 80081fe:	dc02      	bgt.n	8008206 <_dtoa_r+0x9b6>
 8008200:	d1de      	bne.n	80081c0 <_dtoa_r+0x970>
 8008202:	07da      	lsls	r2, r3, #31
 8008204:	d5dc      	bpl.n	80081c0 <_dtoa_r+0x970>
 8008206:	2b39      	cmp	r3, #57	; 0x39
 8008208:	d1d8      	bne.n	80081bc <_dtoa_r+0x96c>
 800820a:	9a02      	ldr	r2, [sp, #8]
 800820c:	2339      	movs	r3, #57	; 0x39
 800820e:	7013      	strb	r3, [r2, #0]
 8008210:	4643      	mov	r3, r8
 8008212:	4698      	mov	r8, r3
 8008214:	3b01      	subs	r3, #1
 8008216:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800821a:	2a39      	cmp	r2, #57	; 0x39
 800821c:	d051      	beq.n	80082c2 <_dtoa_r+0xa72>
 800821e:	3201      	adds	r2, #1
 8008220:	701a      	strb	r2, [r3, #0]
 8008222:	e745      	b.n	80080b0 <_dtoa_r+0x860>
 8008224:	2a00      	cmp	r2, #0
 8008226:	dd03      	ble.n	8008230 <_dtoa_r+0x9e0>
 8008228:	2b39      	cmp	r3, #57	; 0x39
 800822a:	d0ee      	beq.n	800820a <_dtoa_r+0x9ba>
 800822c:	3301      	adds	r3, #1
 800822e:	e7c7      	b.n	80081c0 <_dtoa_r+0x970>
 8008230:	9a04      	ldr	r2, [sp, #16]
 8008232:	9908      	ldr	r1, [sp, #32]
 8008234:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008238:	428a      	cmp	r2, r1
 800823a:	d02b      	beq.n	8008294 <_dtoa_r+0xa44>
 800823c:	4629      	mov	r1, r5
 800823e:	2300      	movs	r3, #0
 8008240:	220a      	movs	r2, #10
 8008242:	4630      	mov	r0, r6
 8008244:	f000 fc70 	bl	8008b28 <__multadd>
 8008248:	45b9      	cmp	r9, r7
 800824a:	4605      	mov	r5, r0
 800824c:	f04f 0300 	mov.w	r3, #0
 8008250:	f04f 020a 	mov.w	r2, #10
 8008254:	4649      	mov	r1, r9
 8008256:	4630      	mov	r0, r6
 8008258:	d107      	bne.n	800826a <_dtoa_r+0xa1a>
 800825a:	f000 fc65 	bl	8008b28 <__multadd>
 800825e:	4681      	mov	r9, r0
 8008260:	4607      	mov	r7, r0
 8008262:	9b04      	ldr	r3, [sp, #16]
 8008264:	3301      	adds	r3, #1
 8008266:	9304      	str	r3, [sp, #16]
 8008268:	e774      	b.n	8008154 <_dtoa_r+0x904>
 800826a:	f000 fc5d 	bl	8008b28 <__multadd>
 800826e:	4639      	mov	r1, r7
 8008270:	4681      	mov	r9, r0
 8008272:	2300      	movs	r3, #0
 8008274:	220a      	movs	r2, #10
 8008276:	4630      	mov	r0, r6
 8008278:	f000 fc56 	bl	8008b28 <__multadd>
 800827c:	4607      	mov	r7, r0
 800827e:	e7f0      	b.n	8008262 <_dtoa_r+0xa12>
 8008280:	f1ba 0f00 	cmp.w	sl, #0
 8008284:	9a01      	ldr	r2, [sp, #4]
 8008286:	bfcc      	ite	gt
 8008288:	46d0      	movgt	r8, sl
 800828a:	f04f 0801 	movle.w	r8, #1
 800828e:	4490      	add	r8, r2
 8008290:	f04f 0900 	mov.w	r9, #0
 8008294:	4629      	mov	r1, r5
 8008296:	2201      	movs	r2, #1
 8008298:	4630      	mov	r0, r6
 800829a:	9302      	str	r3, [sp, #8]
 800829c:	f000 fe3e 	bl	8008f1c <__lshift>
 80082a0:	4621      	mov	r1, r4
 80082a2:	4605      	mov	r5, r0
 80082a4:	f000 feaa 	bl	8008ffc <__mcmp>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	dcb1      	bgt.n	8008210 <_dtoa_r+0x9c0>
 80082ac:	d102      	bne.n	80082b4 <_dtoa_r+0xa64>
 80082ae:	9b02      	ldr	r3, [sp, #8]
 80082b0:	07db      	lsls	r3, r3, #31
 80082b2:	d4ad      	bmi.n	8008210 <_dtoa_r+0x9c0>
 80082b4:	4643      	mov	r3, r8
 80082b6:	4698      	mov	r8, r3
 80082b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082bc:	2a30      	cmp	r2, #48	; 0x30
 80082be:	d0fa      	beq.n	80082b6 <_dtoa_r+0xa66>
 80082c0:	e6f6      	b.n	80080b0 <_dtoa_r+0x860>
 80082c2:	9a01      	ldr	r2, [sp, #4]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d1a4      	bne.n	8008212 <_dtoa_r+0x9c2>
 80082c8:	f10b 0b01 	add.w	fp, fp, #1
 80082cc:	2331      	movs	r3, #49	; 0x31
 80082ce:	e778      	b.n	80081c2 <_dtoa_r+0x972>
 80082d0:	4b14      	ldr	r3, [pc, #80]	; (8008324 <_dtoa_r+0xad4>)
 80082d2:	f7ff bb27 	b.w	8007924 <_dtoa_r+0xd4>
 80082d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f47f ab03 	bne.w	80078e4 <_dtoa_r+0x94>
 80082de:	4b12      	ldr	r3, [pc, #72]	; (8008328 <_dtoa_r+0xad8>)
 80082e0:	f7ff bb20 	b.w	8007924 <_dtoa_r+0xd4>
 80082e4:	f1ba 0f00 	cmp.w	sl, #0
 80082e8:	dc03      	bgt.n	80082f2 <_dtoa_r+0xaa2>
 80082ea:	9b06      	ldr	r3, [sp, #24]
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	f73f aec7 	bgt.w	8008080 <_dtoa_r+0x830>
 80082f2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80082f6:	4621      	mov	r1, r4
 80082f8:	4628      	mov	r0, r5
 80082fa:	f7ff fa1d 	bl	8007738 <quorem>
 80082fe:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008302:	f808 3b01 	strb.w	r3, [r8], #1
 8008306:	9a01      	ldr	r2, [sp, #4]
 8008308:	eba8 0202 	sub.w	r2, r8, r2
 800830c:	4592      	cmp	sl, r2
 800830e:	ddb7      	ble.n	8008280 <_dtoa_r+0xa30>
 8008310:	4629      	mov	r1, r5
 8008312:	2300      	movs	r3, #0
 8008314:	220a      	movs	r2, #10
 8008316:	4630      	mov	r0, r6
 8008318:	f000 fc06 	bl	8008b28 <__multadd>
 800831c:	4605      	mov	r5, r0
 800831e:	e7ea      	b.n	80082f6 <_dtoa_r+0xaa6>
 8008320:	08030178 	.word	0x08030178
 8008324:	0802ff78 	.word	0x0802ff78
 8008328:	080300f9 	.word	0x080300f9

0800832c <rshift>:
 800832c:	6903      	ldr	r3, [r0, #16]
 800832e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008332:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008336:	ea4f 1261 	mov.w	r2, r1, asr #5
 800833a:	f100 0414 	add.w	r4, r0, #20
 800833e:	dd45      	ble.n	80083cc <rshift+0xa0>
 8008340:	f011 011f 	ands.w	r1, r1, #31
 8008344:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008348:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800834c:	d10c      	bne.n	8008368 <rshift+0x3c>
 800834e:	f100 0710 	add.w	r7, r0, #16
 8008352:	4629      	mov	r1, r5
 8008354:	42b1      	cmp	r1, r6
 8008356:	d334      	bcc.n	80083c2 <rshift+0x96>
 8008358:	1a9b      	subs	r3, r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	1eea      	subs	r2, r5, #3
 800835e:	4296      	cmp	r6, r2
 8008360:	bf38      	it	cc
 8008362:	2300      	movcc	r3, #0
 8008364:	4423      	add	r3, r4
 8008366:	e015      	b.n	8008394 <rshift+0x68>
 8008368:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800836c:	f1c1 0820 	rsb	r8, r1, #32
 8008370:	40cf      	lsrs	r7, r1
 8008372:	f105 0e04 	add.w	lr, r5, #4
 8008376:	46a1      	mov	r9, r4
 8008378:	4576      	cmp	r6, lr
 800837a:	46f4      	mov	ip, lr
 800837c:	d815      	bhi.n	80083aa <rshift+0x7e>
 800837e:	1a9a      	subs	r2, r3, r2
 8008380:	0092      	lsls	r2, r2, #2
 8008382:	3a04      	subs	r2, #4
 8008384:	3501      	adds	r5, #1
 8008386:	42ae      	cmp	r6, r5
 8008388:	bf38      	it	cc
 800838a:	2200      	movcc	r2, #0
 800838c:	18a3      	adds	r3, r4, r2
 800838e:	50a7      	str	r7, [r4, r2]
 8008390:	b107      	cbz	r7, 8008394 <rshift+0x68>
 8008392:	3304      	adds	r3, #4
 8008394:	1b1a      	subs	r2, r3, r4
 8008396:	42a3      	cmp	r3, r4
 8008398:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800839c:	bf08      	it	eq
 800839e:	2300      	moveq	r3, #0
 80083a0:	6102      	str	r2, [r0, #16]
 80083a2:	bf08      	it	eq
 80083a4:	6143      	streq	r3, [r0, #20]
 80083a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083aa:	f8dc c000 	ldr.w	ip, [ip]
 80083ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80083b2:	ea4c 0707 	orr.w	r7, ip, r7
 80083b6:	f849 7b04 	str.w	r7, [r9], #4
 80083ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80083be:	40cf      	lsrs	r7, r1
 80083c0:	e7da      	b.n	8008378 <rshift+0x4c>
 80083c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80083c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80083ca:	e7c3      	b.n	8008354 <rshift+0x28>
 80083cc:	4623      	mov	r3, r4
 80083ce:	e7e1      	b.n	8008394 <rshift+0x68>

080083d0 <__hexdig_fun>:
 80083d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80083d4:	2b09      	cmp	r3, #9
 80083d6:	d802      	bhi.n	80083de <__hexdig_fun+0xe>
 80083d8:	3820      	subs	r0, #32
 80083da:	b2c0      	uxtb	r0, r0
 80083dc:	4770      	bx	lr
 80083de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80083e2:	2b05      	cmp	r3, #5
 80083e4:	d801      	bhi.n	80083ea <__hexdig_fun+0x1a>
 80083e6:	3847      	subs	r0, #71	; 0x47
 80083e8:	e7f7      	b.n	80083da <__hexdig_fun+0xa>
 80083ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80083ee:	2b05      	cmp	r3, #5
 80083f0:	d801      	bhi.n	80083f6 <__hexdig_fun+0x26>
 80083f2:	3827      	subs	r0, #39	; 0x27
 80083f4:	e7f1      	b.n	80083da <__hexdig_fun+0xa>
 80083f6:	2000      	movs	r0, #0
 80083f8:	4770      	bx	lr
	...

080083fc <__gethex>:
 80083fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008400:	ed2d 8b02 	vpush	{d8}
 8008404:	b089      	sub	sp, #36	; 0x24
 8008406:	ee08 0a10 	vmov	s16, r0
 800840a:	9304      	str	r3, [sp, #16]
 800840c:	4bb4      	ldr	r3, [pc, #720]	; (80086e0 <__gethex+0x2e4>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	9301      	str	r3, [sp, #4]
 8008412:	4618      	mov	r0, r3
 8008414:	468b      	mov	fp, r1
 8008416:	4690      	mov	r8, r2
 8008418:	f7f7 ff12 	bl	8000240 <strlen>
 800841c:	9b01      	ldr	r3, [sp, #4]
 800841e:	f8db 2000 	ldr.w	r2, [fp]
 8008422:	4403      	add	r3, r0
 8008424:	4682      	mov	sl, r0
 8008426:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800842a:	9305      	str	r3, [sp, #20]
 800842c:	1c93      	adds	r3, r2, #2
 800842e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008432:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008436:	32fe      	adds	r2, #254	; 0xfe
 8008438:	18d1      	adds	r1, r2, r3
 800843a:	461f      	mov	r7, r3
 800843c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008440:	9100      	str	r1, [sp, #0]
 8008442:	2830      	cmp	r0, #48	; 0x30
 8008444:	d0f8      	beq.n	8008438 <__gethex+0x3c>
 8008446:	f7ff ffc3 	bl	80083d0 <__hexdig_fun>
 800844a:	4604      	mov	r4, r0
 800844c:	2800      	cmp	r0, #0
 800844e:	d13a      	bne.n	80084c6 <__gethex+0xca>
 8008450:	9901      	ldr	r1, [sp, #4]
 8008452:	4652      	mov	r2, sl
 8008454:	4638      	mov	r0, r7
 8008456:	f001 fa2f 	bl	80098b8 <strncmp>
 800845a:	4605      	mov	r5, r0
 800845c:	2800      	cmp	r0, #0
 800845e:	d168      	bne.n	8008532 <__gethex+0x136>
 8008460:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008464:	eb07 060a 	add.w	r6, r7, sl
 8008468:	f7ff ffb2 	bl	80083d0 <__hexdig_fun>
 800846c:	2800      	cmp	r0, #0
 800846e:	d062      	beq.n	8008536 <__gethex+0x13a>
 8008470:	4633      	mov	r3, r6
 8008472:	7818      	ldrb	r0, [r3, #0]
 8008474:	2830      	cmp	r0, #48	; 0x30
 8008476:	461f      	mov	r7, r3
 8008478:	f103 0301 	add.w	r3, r3, #1
 800847c:	d0f9      	beq.n	8008472 <__gethex+0x76>
 800847e:	f7ff ffa7 	bl	80083d0 <__hexdig_fun>
 8008482:	2301      	movs	r3, #1
 8008484:	fab0 f480 	clz	r4, r0
 8008488:	0964      	lsrs	r4, r4, #5
 800848a:	4635      	mov	r5, r6
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	463a      	mov	r2, r7
 8008490:	4616      	mov	r6, r2
 8008492:	3201      	adds	r2, #1
 8008494:	7830      	ldrb	r0, [r6, #0]
 8008496:	f7ff ff9b 	bl	80083d0 <__hexdig_fun>
 800849a:	2800      	cmp	r0, #0
 800849c:	d1f8      	bne.n	8008490 <__gethex+0x94>
 800849e:	9901      	ldr	r1, [sp, #4]
 80084a0:	4652      	mov	r2, sl
 80084a2:	4630      	mov	r0, r6
 80084a4:	f001 fa08 	bl	80098b8 <strncmp>
 80084a8:	b980      	cbnz	r0, 80084cc <__gethex+0xd0>
 80084aa:	b94d      	cbnz	r5, 80084c0 <__gethex+0xc4>
 80084ac:	eb06 050a 	add.w	r5, r6, sl
 80084b0:	462a      	mov	r2, r5
 80084b2:	4616      	mov	r6, r2
 80084b4:	3201      	adds	r2, #1
 80084b6:	7830      	ldrb	r0, [r6, #0]
 80084b8:	f7ff ff8a 	bl	80083d0 <__hexdig_fun>
 80084bc:	2800      	cmp	r0, #0
 80084be:	d1f8      	bne.n	80084b2 <__gethex+0xb6>
 80084c0:	1bad      	subs	r5, r5, r6
 80084c2:	00ad      	lsls	r5, r5, #2
 80084c4:	e004      	b.n	80084d0 <__gethex+0xd4>
 80084c6:	2400      	movs	r4, #0
 80084c8:	4625      	mov	r5, r4
 80084ca:	e7e0      	b.n	800848e <__gethex+0x92>
 80084cc:	2d00      	cmp	r5, #0
 80084ce:	d1f7      	bne.n	80084c0 <__gethex+0xc4>
 80084d0:	7833      	ldrb	r3, [r6, #0]
 80084d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80084d6:	2b50      	cmp	r3, #80	; 0x50
 80084d8:	d13b      	bne.n	8008552 <__gethex+0x156>
 80084da:	7873      	ldrb	r3, [r6, #1]
 80084dc:	2b2b      	cmp	r3, #43	; 0x2b
 80084de:	d02c      	beq.n	800853a <__gethex+0x13e>
 80084e0:	2b2d      	cmp	r3, #45	; 0x2d
 80084e2:	d02e      	beq.n	8008542 <__gethex+0x146>
 80084e4:	1c71      	adds	r1, r6, #1
 80084e6:	f04f 0900 	mov.w	r9, #0
 80084ea:	7808      	ldrb	r0, [r1, #0]
 80084ec:	f7ff ff70 	bl	80083d0 <__hexdig_fun>
 80084f0:	1e43      	subs	r3, r0, #1
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b18      	cmp	r3, #24
 80084f6:	d82c      	bhi.n	8008552 <__gethex+0x156>
 80084f8:	f1a0 0210 	sub.w	r2, r0, #16
 80084fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008500:	f7ff ff66 	bl	80083d0 <__hexdig_fun>
 8008504:	1e43      	subs	r3, r0, #1
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b18      	cmp	r3, #24
 800850a:	d91d      	bls.n	8008548 <__gethex+0x14c>
 800850c:	f1b9 0f00 	cmp.w	r9, #0
 8008510:	d000      	beq.n	8008514 <__gethex+0x118>
 8008512:	4252      	negs	r2, r2
 8008514:	4415      	add	r5, r2
 8008516:	f8cb 1000 	str.w	r1, [fp]
 800851a:	b1e4      	cbz	r4, 8008556 <__gethex+0x15a>
 800851c:	9b00      	ldr	r3, [sp, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	bf14      	ite	ne
 8008522:	2700      	movne	r7, #0
 8008524:	2706      	moveq	r7, #6
 8008526:	4638      	mov	r0, r7
 8008528:	b009      	add	sp, #36	; 0x24
 800852a:	ecbd 8b02 	vpop	{d8}
 800852e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008532:	463e      	mov	r6, r7
 8008534:	4625      	mov	r5, r4
 8008536:	2401      	movs	r4, #1
 8008538:	e7ca      	b.n	80084d0 <__gethex+0xd4>
 800853a:	f04f 0900 	mov.w	r9, #0
 800853e:	1cb1      	adds	r1, r6, #2
 8008540:	e7d3      	b.n	80084ea <__gethex+0xee>
 8008542:	f04f 0901 	mov.w	r9, #1
 8008546:	e7fa      	b.n	800853e <__gethex+0x142>
 8008548:	230a      	movs	r3, #10
 800854a:	fb03 0202 	mla	r2, r3, r2, r0
 800854e:	3a10      	subs	r2, #16
 8008550:	e7d4      	b.n	80084fc <__gethex+0x100>
 8008552:	4631      	mov	r1, r6
 8008554:	e7df      	b.n	8008516 <__gethex+0x11a>
 8008556:	1bf3      	subs	r3, r6, r7
 8008558:	3b01      	subs	r3, #1
 800855a:	4621      	mov	r1, r4
 800855c:	2b07      	cmp	r3, #7
 800855e:	dc0b      	bgt.n	8008578 <__gethex+0x17c>
 8008560:	ee18 0a10 	vmov	r0, s16
 8008564:	f000 fa7e 	bl	8008a64 <_Balloc>
 8008568:	4604      	mov	r4, r0
 800856a:	b940      	cbnz	r0, 800857e <__gethex+0x182>
 800856c:	4b5d      	ldr	r3, [pc, #372]	; (80086e4 <__gethex+0x2e8>)
 800856e:	4602      	mov	r2, r0
 8008570:	21de      	movs	r1, #222	; 0xde
 8008572:	485d      	ldr	r0, [pc, #372]	; (80086e8 <__gethex+0x2ec>)
 8008574:	f001 f9c2 	bl	80098fc <__assert_func>
 8008578:	3101      	adds	r1, #1
 800857a:	105b      	asrs	r3, r3, #1
 800857c:	e7ee      	b.n	800855c <__gethex+0x160>
 800857e:	f100 0914 	add.w	r9, r0, #20
 8008582:	f04f 0b00 	mov.w	fp, #0
 8008586:	f1ca 0301 	rsb	r3, sl, #1
 800858a:	f8cd 9008 	str.w	r9, [sp, #8]
 800858e:	f8cd b000 	str.w	fp, [sp]
 8008592:	9306      	str	r3, [sp, #24]
 8008594:	42b7      	cmp	r7, r6
 8008596:	d340      	bcc.n	800861a <__gethex+0x21e>
 8008598:	9802      	ldr	r0, [sp, #8]
 800859a:	9b00      	ldr	r3, [sp, #0]
 800859c:	f840 3b04 	str.w	r3, [r0], #4
 80085a0:	eba0 0009 	sub.w	r0, r0, r9
 80085a4:	1080      	asrs	r0, r0, #2
 80085a6:	0146      	lsls	r6, r0, #5
 80085a8:	6120      	str	r0, [r4, #16]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fb4c 	bl	8008c48 <__hi0bits>
 80085b0:	1a30      	subs	r0, r6, r0
 80085b2:	f8d8 6000 	ldr.w	r6, [r8]
 80085b6:	42b0      	cmp	r0, r6
 80085b8:	dd63      	ble.n	8008682 <__gethex+0x286>
 80085ba:	1b87      	subs	r7, r0, r6
 80085bc:	4639      	mov	r1, r7
 80085be:	4620      	mov	r0, r4
 80085c0:	f000 feed 	bl	800939e <__any_on>
 80085c4:	4682      	mov	sl, r0
 80085c6:	b1a8      	cbz	r0, 80085f4 <__gethex+0x1f8>
 80085c8:	1e7b      	subs	r3, r7, #1
 80085ca:	1159      	asrs	r1, r3, #5
 80085cc:	f003 021f 	and.w	r2, r3, #31
 80085d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80085d4:	f04f 0a01 	mov.w	sl, #1
 80085d8:	fa0a f202 	lsl.w	r2, sl, r2
 80085dc:	420a      	tst	r2, r1
 80085de:	d009      	beq.n	80085f4 <__gethex+0x1f8>
 80085e0:	4553      	cmp	r3, sl
 80085e2:	dd05      	ble.n	80085f0 <__gethex+0x1f4>
 80085e4:	1eb9      	subs	r1, r7, #2
 80085e6:	4620      	mov	r0, r4
 80085e8:	f000 fed9 	bl	800939e <__any_on>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d145      	bne.n	800867c <__gethex+0x280>
 80085f0:	f04f 0a02 	mov.w	sl, #2
 80085f4:	4639      	mov	r1, r7
 80085f6:	4620      	mov	r0, r4
 80085f8:	f7ff fe98 	bl	800832c <rshift>
 80085fc:	443d      	add	r5, r7
 80085fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008602:	42ab      	cmp	r3, r5
 8008604:	da4c      	bge.n	80086a0 <__gethex+0x2a4>
 8008606:	ee18 0a10 	vmov	r0, s16
 800860a:	4621      	mov	r1, r4
 800860c:	f000 fa6a 	bl	8008ae4 <_Bfree>
 8008610:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008612:	2300      	movs	r3, #0
 8008614:	6013      	str	r3, [r2, #0]
 8008616:	27a3      	movs	r7, #163	; 0xa3
 8008618:	e785      	b.n	8008526 <__gethex+0x12a>
 800861a:	1e73      	subs	r3, r6, #1
 800861c:	9a05      	ldr	r2, [sp, #20]
 800861e:	9303      	str	r3, [sp, #12]
 8008620:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008624:	4293      	cmp	r3, r2
 8008626:	d019      	beq.n	800865c <__gethex+0x260>
 8008628:	f1bb 0f20 	cmp.w	fp, #32
 800862c:	d107      	bne.n	800863e <__gethex+0x242>
 800862e:	9b02      	ldr	r3, [sp, #8]
 8008630:	9a00      	ldr	r2, [sp, #0]
 8008632:	f843 2b04 	str.w	r2, [r3], #4
 8008636:	9302      	str	r3, [sp, #8]
 8008638:	2300      	movs	r3, #0
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	469b      	mov	fp, r3
 800863e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008642:	f7ff fec5 	bl	80083d0 <__hexdig_fun>
 8008646:	9b00      	ldr	r3, [sp, #0]
 8008648:	f000 000f 	and.w	r0, r0, #15
 800864c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008650:	4303      	orrs	r3, r0
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	f10b 0b04 	add.w	fp, fp, #4
 8008658:	9b03      	ldr	r3, [sp, #12]
 800865a:	e00d      	b.n	8008678 <__gethex+0x27c>
 800865c:	9b03      	ldr	r3, [sp, #12]
 800865e:	9a06      	ldr	r2, [sp, #24]
 8008660:	4413      	add	r3, r2
 8008662:	42bb      	cmp	r3, r7
 8008664:	d3e0      	bcc.n	8008628 <__gethex+0x22c>
 8008666:	4618      	mov	r0, r3
 8008668:	9901      	ldr	r1, [sp, #4]
 800866a:	9307      	str	r3, [sp, #28]
 800866c:	4652      	mov	r2, sl
 800866e:	f001 f923 	bl	80098b8 <strncmp>
 8008672:	9b07      	ldr	r3, [sp, #28]
 8008674:	2800      	cmp	r0, #0
 8008676:	d1d7      	bne.n	8008628 <__gethex+0x22c>
 8008678:	461e      	mov	r6, r3
 800867a:	e78b      	b.n	8008594 <__gethex+0x198>
 800867c:	f04f 0a03 	mov.w	sl, #3
 8008680:	e7b8      	b.n	80085f4 <__gethex+0x1f8>
 8008682:	da0a      	bge.n	800869a <__gethex+0x29e>
 8008684:	1a37      	subs	r7, r6, r0
 8008686:	4621      	mov	r1, r4
 8008688:	ee18 0a10 	vmov	r0, s16
 800868c:	463a      	mov	r2, r7
 800868e:	f000 fc45 	bl	8008f1c <__lshift>
 8008692:	1bed      	subs	r5, r5, r7
 8008694:	4604      	mov	r4, r0
 8008696:	f100 0914 	add.w	r9, r0, #20
 800869a:	f04f 0a00 	mov.w	sl, #0
 800869e:	e7ae      	b.n	80085fe <__gethex+0x202>
 80086a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80086a4:	42a8      	cmp	r0, r5
 80086a6:	dd72      	ble.n	800878e <__gethex+0x392>
 80086a8:	1b45      	subs	r5, r0, r5
 80086aa:	42ae      	cmp	r6, r5
 80086ac:	dc36      	bgt.n	800871c <__gethex+0x320>
 80086ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d02a      	beq.n	800870c <__gethex+0x310>
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d02c      	beq.n	8008714 <__gethex+0x318>
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d11c      	bne.n	80086f8 <__gethex+0x2fc>
 80086be:	42ae      	cmp	r6, r5
 80086c0:	d11a      	bne.n	80086f8 <__gethex+0x2fc>
 80086c2:	2e01      	cmp	r6, #1
 80086c4:	d112      	bne.n	80086ec <__gethex+0x2f0>
 80086c6:	9a04      	ldr	r2, [sp, #16]
 80086c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80086cc:	6013      	str	r3, [r2, #0]
 80086ce:	2301      	movs	r3, #1
 80086d0:	6123      	str	r3, [r4, #16]
 80086d2:	f8c9 3000 	str.w	r3, [r9]
 80086d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086d8:	2762      	movs	r7, #98	; 0x62
 80086da:	601c      	str	r4, [r3, #0]
 80086dc:	e723      	b.n	8008526 <__gethex+0x12a>
 80086de:	bf00      	nop
 80086e0:	080301f0 	.word	0x080301f0
 80086e4:	08030178 	.word	0x08030178
 80086e8:	08030189 	.word	0x08030189
 80086ec:	1e71      	subs	r1, r6, #1
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 fe55 	bl	800939e <__any_on>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d1e6      	bne.n	80086c6 <__gethex+0x2ca>
 80086f8:	ee18 0a10 	vmov	r0, s16
 80086fc:	4621      	mov	r1, r4
 80086fe:	f000 f9f1 	bl	8008ae4 <_Bfree>
 8008702:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008704:	2300      	movs	r3, #0
 8008706:	6013      	str	r3, [r2, #0]
 8008708:	2750      	movs	r7, #80	; 0x50
 800870a:	e70c      	b.n	8008526 <__gethex+0x12a>
 800870c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1f2      	bne.n	80086f8 <__gethex+0x2fc>
 8008712:	e7d8      	b.n	80086c6 <__gethex+0x2ca>
 8008714:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1d5      	bne.n	80086c6 <__gethex+0x2ca>
 800871a:	e7ed      	b.n	80086f8 <__gethex+0x2fc>
 800871c:	1e6f      	subs	r7, r5, #1
 800871e:	f1ba 0f00 	cmp.w	sl, #0
 8008722:	d131      	bne.n	8008788 <__gethex+0x38c>
 8008724:	b127      	cbz	r7, 8008730 <__gethex+0x334>
 8008726:	4639      	mov	r1, r7
 8008728:	4620      	mov	r0, r4
 800872a:	f000 fe38 	bl	800939e <__any_on>
 800872e:	4682      	mov	sl, r0
 8008730:	117b      	asrs	r3, r7, #5
 8008732:	2101      	movs	r1, #1
 8008734:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008738:	f007 071f 	and.w	r7, r7, #31
 800873c:	fa01 f707 	lsl.w	r7, r1, r7
 8008740:	421f      	tst	r7, r3
 8008742:	4629      	mov	r1, r5
 8008744:	4620      	mov	r0, r4
 8008746:	bf18      	it	ne
 8008748:	f04a 0a02 	orrne.w	sl, sl, #2
 800874c:	1b76      	subs	r6, r6, r5
 800874e:	f7ff fded 	bl	800832c <rshift>
 8008752:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008756:	2702      	movs	r7, #2
 8008758:	f1ba 0f00 	cmp.w	sl, #0
 800875c:	d048      	beq.n	80087f0 <__gethex+0x3f4>
 800875e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008762:	2b02      	cmp	r3, #2
 8008764:	d015      	beq.n	8008792 <__gethex+0x396>
 8008766:	2b03      	cmp	r3, #3
 8008768:	d017      	beq.n	800879a <__gethex+0x39e>
 800876a:	2b01      	cmp	r3, #1
 800876c:	d109      	bne.n	8008782 <__gethex+0x386>
 800876e:	f01a 0f02 	tst.w	sl, #2
 8008772:	d006      	beq.n	8008782 <__gethex+0x386>
 8008774:	f8d9 0000 	ldr.w	r0, [r9]
 8008778:	ea4a 0a00 	orr.w	sl, sl, r0
 800877c:	f01a 0f01 	tst.w	sl, #1
 8008780:	d10e      	bne.n	80087a0 <__gethex+0x3a4>
 8008782:	f047 0710 	orr.w	r7, r7, #16
 8008786:	e033      	b.n	80087f0 <__gethex+0x3f4>
 8008788:	f04f 0a01 	mov.w	sl, #1
 800878c:	e7d0      	b.n	8008730 <__gethex+0x334>
 800878e:	2701      	movs	r7, #1
 8008790:	e7e2      	b.n	8008758 <__gethex+0x35c>
 8008792:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008794:	f1c3 0301 	rsb	r3, r3, #1
 8008798:	9315      	str	r3, [sp, #84]	; 0x54
 800879a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0f0      	beq.n	8008782 <__gethex+0x386>
 80087a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80087a4:	f104 0314 	add.w	r3, r4, #20
 80087a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80087ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80087b0:	f04f 0c00 	mov.w	ip, #0
 80087b4:	4618      	mov	r0, r3
 80087b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 80087be:	d01c      	beq.n	80087fa <__gethex+0x3fe>
 80087c0:	3201      	adds	r2, #1
 80087c2:	6002      	str	r2, [r0, #0]
 80087c4:	2f02      	cmp	r7, #2
 80087c6:	f104 0314 	add.w	r3, r4, #20
 80087ca:	d13f      	bne.n	800884c <__gethex+0x450>
 80087cc:	f8d8 2000 	ldr.w	r2, [r8]
 80087d0:	3a01      	subs	r2, #1
 80087d2:	42b2      	cmp	r2, r6
 80087d4:	d10a      	bne.n	80087ec <__gethex+0x3f0>
 80087d6:	1171      	asrs	r1, r6, #5
 80087d8:	2201      	movs	r2, #1
 80087da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087de:	f006 061f 	and.w	r6, r6, #31
 80087e2:	fa02 f606 	lsl.w	r6, r2, r6
 80087e6:	421e      	tst	r6, r3
 80087e8:	bf18      	it	ne
 80087ea:	4617      	movne	r7, r2
 80087ec:	f047 0720 	orr.w	r7, r7, #32
 80087f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087f2:	601c      	str	r4, [r3, #0]
 80087f4:	9b04      	ldr	r3, [sp, #16]
 80087f6:	601d      	str	r5, [r3, #0]
 80087f8:	e695      	b.n	8008526 <__gethex+0x12a>
 80087fa:	4299      	cmp	r1, r3
 80087fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8008800:	d8d8      	bhi.n	80087b4 <__gethex+0x3b8>
 8008802:	68a3      	ldr	r3, [r4, #8]
 8008804:	459b      	cmp	fp, r3
 8008806:	db19      	blt.n	800883c <__gethex+0x440>
 8008808:	6861      	ldr	r1, [r4, #4]
 800880a:	ee18 0a10 	vmov	r0, s16
 800880e:	3101      	adds	r1, #1
 8008810:	f000 f928 	bl	8008a64 <_Balloc>
 8008814:	4681      	mov	r9, r0
 8008816:	b918      	cbnz	r0, 8008820 <__gethex+0x424>
 8008818:	4b1a      	ldr	r3, [pc, #104]	; (8008884 <__gethex+0x488>)
 800881a:	4602      	mov	r2, r0
 800881c:	2184      	movs	r1, #132	; 0x84
 800881e:	e6a8      	b.n	8008572 <__gethex+0x176>
 8008820:	6922      	ldr	r2, [r4, #16]
 8008822:	3202      	adds	r2, #2
 8008824:	f104 010c 	add.w	r1, r4, #12
 8008828:	0092      	lsls	r2, r2, #2
 800882a:	300c      	adds	r0, #12
 800882c:	f000 f90c 	bl	8008a48 <memcpy>
 8008830:	4621      	mov	r1, r4
 8008832:	ee18 0a10 	vmov	r0, s16
 8008836:	f000 f955 	bl	8008ae4 <_Bfree>
 800883a:	464c      	mov	r4, r9
 800883c:	6923      	ldr	r3, [r4, #16]
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008844:	6122      	str	r2, [r4, #16]
 8008846:	2201      	movs	r2, #1
 8008848:	615a      	str	r2, [r3, #20]
 800884a:	e7bb      	b.n	80087c4 <__gethex+0x3c8>
 800884c:	6922      	ldr	r2, [r4, #16]
 800884e:	455a      	cmp	r2, fp
 8008850:	dd0b      	ble.n	800886a <__gethex+0x46e>
 8008852:	2101      	movs	r1, #1
 8008854:	4620      	mov	r0, r4
 8008856:	f7ff fd69 	bl	800832c <rshift>
 800885a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800885e:	3501      	adds	r5, #1
 8008860:	42ab      	cmp	r3, r5
 8008862:	f6ff aed0 	blt.w	8008606 <__gethex+0x20a>
 8008866:	2701      	movs	r7, #1
 8008868:	e7c0      	b.n	80087ec <__gethex+0x3f0>
 800886a:	f016 061f 	ands.w	r6, r6, #31
 800886e:	d0fa      	beq.n	8008866 <__gethex+0x46a>
 8008870:	4453      	add	r3, sl
 8008872:	f1c6 0620 	rsb	r6, r6, #32
 8008876:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800887a:	f000 f9e5 	bl	8008c48 <__hi0bits>
 800887e:	42b0      	cmp	r0, r6
 8008880:	dbe7      	blt.n	8008852 <__gethex+0x456>
 8008882:	e7f0      	b.n	8008866 <__gethex+0x46a>
 8008884:	08030178 	.word	0x08030178

08008888 <L_shift>:
 8008888:	f1c2 0208 	rsb	r2, r2, #8
 800888c:	0092      	lsls	r2, r2, #2
 800888e:	b570      	push	{r4, r5, r6, lr}
 8008890:	f1c2 0620 	rsb	r6, r2, #32
 8008894:	6843      	ldr	r3, [r0, #4]
 8008896:	6804      	ldr	r4, [r0, #0]
 8008898:	fa03 f506 	lsl.w	r5, r3, r6
 800889c:	432c      	orrs	r4, r5
 800889e:	40d3      	lsrs	r3, r2
 80088a0:	6004      	str	r4, [r0, #0]
 80088a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80088a6:	4288      	cmp	r0, r1
 80088a8:	d3f4      	bcc.n	8008894 <L_shift+0xc>
 80088aa:	bd70      	pop	{r4, r5, r6, pc}

080088ac <__match>:
 80088ac:	b530      	push	{r4, r5, lr}
 80088ae:	6803      	ldr	r3, [r0, #0]
 80088b0:	3301      	adds	r3, #1
 80088b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088b6:	b914      	cbnz	r4, 80088be <__match+0x12>
 80088b8:	6003      	str	r3, [r0, #0]
 80088ba:	2001      	movs	r0, #1
 80088bc:	bd30      	pop	{r4, r5, pc}
 80088be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80088c6:	2d19      	cmp	r5, #25
 80088c8:	bf98      	it	ls
 80088ca:	3220      	addls	r2, #32
 80088cc:	42a2      	cmp	r2, r4
 80088ce:	d0f0      	beq.n	80088b2 <__match+0x6>
 80088d0:	2000      	movs	r0, #0
 80088d2:	e7f3      	b.n	80088bc <__match+0x10>

080088d4 <__hexnan>:
 80088d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d8:	680b      	ldr	r3, [r1, #0]
 80088da:	115e      	asrs	r6, r3, #5
 80088dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80088e0:	f013 031f 	ands.w	r3, r3, #31
 80088e4:	b087      	sub	sp, #28
 80088e6:	bf18      	it	ne
 80088e8:	3604      	addne	r6, #4
 80088ea:	2500      	movs	r5, #0
 80088ec:	1f37      	subs	r7, r6, #4
 80088ee:	4690      	mov	r8, r2
 80088f0:	6802      	ldr	r2, [r0, #0]
 80088f2:	9301      	str	r3, [sp, #4]
 80088f4:	4682      	mov	sl, r0
 80088f6:	f846 5c04 	str.w	r5, [r6, #-4]
 80088fa:	46b9      	mov	r9, r7
 80088fc:	463c      	mov	r4, r7
 80088fe:	9502      	str	r5, [sp, #8]
 8008900:	46ab      	mov	fp, r5
 8008902:	7851      	ldrb	r1, [r2, #1]
 8008904:	1c53      	adds	r3, r2, #1
 8008906:	9303      	str	r3, [sp, #12]
 8008908:	b341      	cbz	r1, 800895c <__hexnan+0x88>
 800890a:	4608      	mov	r0, r1
 800890c:	9205      	str	r2, [sp, #20]
 800890e:	9104      	str	r1, [sp, #16]
 8008910:	f7ff fd5e 	bl	80083d0 <__hexdig_fun>
 8008914:	2800      	cmp	r0, #0
 8008916:	d14f      	bne.n	80089b8 <__hexnan+0xe4>
 8008918:	9904      	ldr	r1, [sp, #16]
 800891a:	9a05      	ldr	r2, [sp, #20]
 800891c:	2920      	cmp	r1, #32
 800891e:	d818      	bhi.n	8008952 <__hexnan+0x7e>
 8008920:	9b02      	ldr	r3, [sp, #8]
 8008922:	459b      	cmp	fp, r3
 8008924:	dd13      	ble.n	800894e <__hexnan+0x7a>
 8008926:	454c      	cmp	r4, r9
 8008928:	d206      	bcs.n	8008938 <__hexnan+0x64>
 800892a:	2d07      	cmp	r5, #7
 800892c:	dc04      	bgt.n	8008938 <__hexnan+0x64>
 800892e:	462a      	mov	r2, r5
 8008930:	4649      	mov	r1, r9
 8008932:	4620      	mov	r0, r4
 8008934:	f7ff ffa8 	bl	8008888 <L_shift>
 8008938:	4544      	cmp	r4, r8
 800893a:	d950      	bls.n	80089de <__hexnan+0x10a>
 800893c:	2300      	movs	r3, #0
 800893e:	f1a4 0904 	sub.w	r9, r4, #4
 8008942:	f844 3c04 	str.w	r3, [r4, #-4]
 8008946:	f8cd b008 	str.w	fp, [sp, #8]
 800894a:	464c      	mov	r4, r9
 800894c:	461d      	mov	r5, r3
 800894e:	9a03      	ldr	r2, [sp, #12]
 8008950:	e7d7      	b.n	8008902 <__hexnan+0x2e>
 8008952:	2929      	cmp	r1, #41	; 0x29
 8008954:	d156      	bne.n	8008a04 <__hexnan+0x130>
 8008956:	3202      	adds	r2, #2
 8008958:	f8ca 2000 	str.w	r2, [sl]
 800895c:	f1bb 0f00 	cmp.w	fp, #0
 8008960:	d050      	beq.n	8008a04 <__hexnan+0x130>
 8008962:	454c      	cmp	r4, r9
 8008964:	d206      	bcs.n	8008974 <__hexnan+0xa0>
 8008966:	2d07      	cmp	r5, #7
 8008968:	dc04      	bgt.n	8008974 <__hexnan+0xa0>
 800896a:	462a      	mov	r2, r5
 800896c:	4649      	mov	r1, r9
 800896e:	4620      	mov	r0, r4
 8008970:	f7ff ff8a 	bl	8008888 <L_shift>
 8008974:	4544      	cmp	r4, r8
 8008976:	d934      	bls.n	80089e2 <__hexnan+0x10e>
 8008978:	f1a8 0204 	sub.w	r2, r8, #4
 800897c:	4623      	mov	r3, r4
 800897e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008982:	f842 1f04 	str.w	r1, [r2, #4]!
 8008986:	429f      	cmp	r7, r3
 8008988:	d2f9      	bcs.n	800897e <__hexnan+0xaa>
 800898a:	1b3b      	subs	r3, r7, r4
 800898c:	f023 0303 	bic.w	r3, r3, #3
 8008990:	3304      	adds	r3, #4
 8008992:	3401      	adds	r4, #1
 8008994:	3e03      	subs	r6, #3
 8008996:	42b4      	cmp	r4, r6
 8008998:	bf88      	it	hi
 800899a:	2304      	movhi	r3, #4
 800899c:	4443      	add	r3, r8
 800899e:	2200      	movs	r2, #0
 80089a0:	f843 2b04 	str.w	r2, [r3], #4
 80089a4:	429f      	cmp	r7, r3
 80089a6:	d2fb      	bcs.n	80089a0 <__hexnan+0xcc>
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	b91b      	cbnz	r3, 80089b4 <__hexnan+0xe0>
 80089ac:	4547      	cmp	r7, r8
 80089ae:	d127      	bne.n	8008a00 <__hexnan+0x12c>
 80089b0:	2301      	movs	r3, #1
 80089b2:	603b      	str	r3, [r7, #0]
 80089b4:	2005      	movs	r0, #5
 80089b6:	e026      	b.n	8008a06 <__hexnan+0x132>
 80089b8:	3501      	adds	r5, #1
 80089ba:	2d08      	cmp	r5, #8
 80089bc:	f10b 0b01 	add.w	fp, fp, #1
 80089c0:	dd06      	ble.n	80089d0 <__hexnan+0xfc>
 80089c2:	4544      	cmp	r4, r8
 80089c4:	d9c3      	bls.n	800894e <__hexnan+0x7a>
 80089c6:	2300      	movs	r3, #0
 80089c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80089cc:	2501      	movs	r5, #1
 80089ce:	3c04      	subs	r4, #4
 80089d0:	6822      	ldr	r2, [r4, #0]
 80089d2:	f000 000f 	and.w	r0, r0, #15
 80089d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80089da:	6022      	str	r2, [r4, #0]
 80089dc:	e7b7      	b.n	800894e <__hexnan+0x7a>
 80089de:	2508      	movs	r5, #8
 80089e0:	e7b5      	b.n	800894e <__hexnan+0x7a>
 80089e2:	9b01      	ldr	r3, [sp, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d0df      	beq.n	80089a8 <__hexnan+0xd4>
 80089e8:	f04f 32ff 	mov.w	r2, #4294967295
 80089ec:	f1c3 0320 	rsb	r3, r3, #32
 80089f0:	fa22 f303 	lsr.w	r3, r2, r3
 80089f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80089f8:	401a      	ands	r2, r3
 80089fa:	f846 2c04 	str.w	r2, [r6, #-4]
 80089fe:	e7d3      	b.n	80089a8 <__hexnan+0xd4>
 8008a00:	3f04      	subs	r7, #4
 8008a02:	e7d1      	b.n	80089a8 <__hexnan+0xd4>
 8008a04:	2004      	movs	r0, #4
 8008a06:	b007      	add	sp, #28
 8008a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a0c <_localeconv_r>:
 8008a0c:	4800      	ldr	r0, [pc, #0]	; (8008a10 <_localeconv_r+0x4>)
 8008a0e:	4770      	bx	lr
 8008a10:	20000170 	.word	0x20000170

08008a14 <malloc>:
 8008a14:	4b02      	ldr	r3, [pc, #8]	; (8008a20 <malloc+0xc>)
 8008a16:	4601      	mov	r1, r0
 8008a18:	6818      	ldr	r0, [r3, #0]
 8008a1a:	f000 bd63 	b.w	80094e4 <_malloc_r>
 8008a1e:	bf00      	nop
 8008a20:	20000018 	.word	0x20000018

08008a24 <__ascii_mbtowc>:
 8008a24:	b082      	sub	sp, #8
 8008a26:	b901      	cbnz	r1, 8008a2a <__ascii_mbtowc+0x6>
 8008a28:	a901      	add	r1, sp, #4
 8008a2a:	b142      	cbz	r2, 8008a3e <__ascii_mbtowc+0x1a>
 8008a2c:	b14b      	cbz	r3, 8008a42 <__ascii_mbtowc+0x1e>
 8008a2e:	7813      	ldrb	r3, [r2, #0]
 8008a30:	600b      	str	r3, [r1, #0]
 8008a32:	7812      	ldrb	r2, [r2, #0]
 8008a34:	1e10      	subs	r0, r2, #0
 8008a36:	bf18      	it	ne
 8008a38:	2001      	movne	r0, #1
 8008a3a:	b002      	add	sp, #8
 8008a3c:	4770      	bx	lr
 8008a3e:	4610      	mov	r0, r2
 8008a40:	e7fb      	b.n	8008a3a <__ascii_mbtowc+0x16>
 8008a42:	f06f 0001 	mvn.w	r0, #1
 8008a46:	e7f8      	b.n	8008a3a <__ascii_mbtowc+0x16>

08008a48 <memcpy>:
 8008a48:	440a      	add	r2, r1
 8008a4a:	4291      	cmp	r1, r2
 8008a4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a50:	d100      	bne.n	8008a54 <memcpy+0xc>
 8008a52:	4770      	bx	lr
 8008a54:	b510      	push	{r4, lr}
 8008a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a5e:	4291      	cmp	r1, r2
 8008a60:	d1f9      	bne.n	8008a56 <memcpy+0xe>
 8008a62:	bd10      	pop	{r4, pc}

08008a64 <_Balloc>:
 8008a64:	b570      	push	{r4, r5, r6, lr}
 8008a66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a68:	4604      	mov	r4, r0
 8008a6a:	460d      	mov	r5, r1
 8008a6c:	b976      	cbnz	r6, 8008a8c <_Balloc+0x28>
 8008a6e:	2010      	movs	r0, #16
 8008a70:	f7ff ffd0 	bl	8008a14 <malloc>
 8008a74:	4602      	mov	r2, r0
 8008a76:	6260      	str	r0, [r4, #36]	; 0x24
 8008a78:	b920      	cbnz	r0, 8008a84 <_Balloc+0x20>
 8008a7a:	4b18      	ldr	r3, [pc, #96]	; (8008adc <_Balloc+0x78>)
 8008a7c:	4818      	ldr	r0, [pc, #96]	; (8008ae0 <_Balloc+0x7c>)
 8008a7e:	2166      	movs	r1, #102	; 0x66
 8008a80:	f000 ff3c 	bl	80098fc <__assert_func>
 8008a84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a88:	6006      	str	r6, [r0, #0]
 8008a8a:	60c6      	str	r6, [r0, #12]
 8008a8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a8e:	68f3      	ldr	r3, [r6, #12]
 8008a90:	b183      	cbz	r3, 8008ab4 <_Balloc+0x50>
 8008a92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a9a:	b9b8      	cbnz	r0, 8008acc <_Balloc+0x68>
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	fa01 f605 	lsl.w	r6, r1, r5
 8008aa2:	1d72      	adds	r2, r6, #5
 8008aa4:	0092      	lsls	r2, r2, #2
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f000 fc9a 	bl	80093e0 <_calloc_r>
 8008aac:	b160      	cbz	r0, 8008ac8 <_Balloc+0x64>
 8008aae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ab2:	e00e      	b.n	8008ad2 <_Balloc+0x6e>
 8008ab4:	2221      	movs	r2, #33	; 0x21
 8008ab6:	2104      	movs	r1, #4
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f000 fc91 	bl	80093e0 <_calloc_r>
 8008abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ac0:	60f0      	str	r0, [r6, #12]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1e4      	bne.n	8008a92 <_Balloc+0x2e>
 8008ac8:	2000      	movs	r0, #0
 8008aca:	bd70      	pop	{r4, r5, r6, pc}
 8008acc:	6802      	ldr	r2, [r0, #0]
 8008ace:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ad8:	e7f7      	b.n	8008aca <_Balloc+0x66>
 8008ada:	bf00      	nop
 8008adc:	08030106 	.word	0x08030106
 8008ae0:	08030204 	.word	0x08030204

08008ae4 <_Bfree>:
 8008ae4:	b570      	push	{r4, r5, r6, lr}
 8008ae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ae8:	4605      	mov	r5, r0
 8008aea:	460c      	mov	r4, r1
 8008aec:	b976      	cbnz	r6, 8008b0c <_Bfree+0x28>
 8008aee:	2010      	movs	r0, #16
 8008af0:	f7ff ff90 	bl	8008a14 <malloc>
 8008af4:	4602      	mov	r2, r0
 8008af6:	6268      	str	r0, [r5, #36]	; 0x24
 8008af8:	b920      	cbnz	r0, 8008b04 <_Bfree+0x20>
 8008afa:	4b09      	ldr	r3, [pc, #36]	; (8008b20 <_Bfree+0x3c>)
 8008afc:	4809      	ldr	r0, [pc, #36]	; (8008b24 <_Bfree+0x40>)
 8008afe:	218a      	movs	r1, #138	; 0x8a
 8008b00:	f000 fefc 	bl	80098fc <__assert_func>
 8008b04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b08:	6006      	str	r6, [r0, #0]
 8008b0a:	60c6      	str	r6, [r0, #12]
 8008b0c:	b13c      	cbz	r4, 8008b1e <_Bfree+0x3a>
 8008b0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b10:	6862      	ldr	r2, [r4, #4]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b18:	6021      	str	r1, [r4, #0]
 8008b1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}
 8008b20:	08030106 	.word	0x08030106
 8008b24:	08030204 	.word	0x08030204

08008b28 <__multadd>:
 8008b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b2c:	690d      	ldr	r5, [r1, #16]
 8008b2e:	4607      	mov	r7, r0
 8008b30:	460c      	mov	r4, r1
 8008b32:	461e      	mov	r6, r3
 8008b34:	f101 0c14 	add.w	ip, r1, #20
 8008b38:	2000      	movs	r0, #0
 8008b3a:	f8dc 3000 	ldr.w	r3, [ip]
 8008b3e:	b299      	uxth	r1, r3
 8008b40:	fb02 6101 	mla	r1, r2, r1, r6
 8008b44:	0c1e      	lsrs	r6, r3, #16
 8008b46:	0c0b      	lsrs	r3, r1, #16
 8008b48:	fb02 3306 	mla	r3, r2, r6, r3
 8008b4c:	b289      	uxth	r1, r1
 8008b4e:	3001      	adds	r0, #1
 8008b50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b54:	4285      	cmp	r5, r0
 8008b56:	f84c 1b04 	str.w	r1, [ip], #4
 8008b5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b5e:	dcec      	bgt.n	8008b3a <__multadd+0x12>
 8008b60:	b30e      	cbz	r6, 8008ba6 <__multadd+0x7e>
 8008b62:	68a3      	ldr	r3, [r4, #8]
 8008b64:	42ab      	cmp	r3, r5
 8008b66:	dc19      	bgt.n	8008b9c <__multadd+0x74>
 8008b68:	6861      	ldr	r1, [r4, #4]
 8008b6a:	4638      	mov	r0, r7
 8008b6c:	3101      	adds	r1, #1
 8008b6e:	f7ff ff79 	bl	8008a64 <_Balloc>
 8008b72:	4680      	mov	r8, r0
 8008b74:	b928      	cbnz	r0, 8008b82 <__multadd+0x5a>
 8008b76:	4602      	mov	r2, r0
 8008b78:	4b0c      	ldr	r3, [pc, #48]	; (8008bac <__multadd+0x84>)
 8008b7a:	480d      	ldr	r0, [pc, #52]	; (8008bb0 <__multadd+0x88>)
 8008b7c:	21b5      	movs	r1, #181	; 0xb5
 8008b7e:	f000 febd 	bl	80098fc <__assert_func>
 8008b82:	6922      	ldr	r2, [r4, #16]
 8008b84:	3202      	adds	r2, #2
 8008b86:	f104 010c 	add.w	r1, r4, #12
 8008b8a:	0092      	lsls	r2, r2, #2
 8008b8c:	300c      	adds	r0, #12
 8008b8e:	f7ff ff5b 	bl	8008a48 <memcpy>
 8008b92:	4621      	mov	r1, r4
 8008b94:	4638      	mov	r0, r7
 8008b96:	f7ff ffa5 	bl	8008ae4 <_Bfree>
 8008b9a:	4644      	mov	r4, r8
 8008b9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ba0:	3501      	adds	r5, #1
 8008ba2:	615e      	str	r6, [r3, #20]
 8008ba4:	6125      	str	r5, [r4, #16]
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bac:	08030178 	.word	0x08030178
 8008bb0:	08030204 	.word	0x08030204

08008bb4 <__s2b>:
 8008bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bb8:	460c      	mov	r4, r1
 8008bba:	4615      	mov	r5, r2
 8008bbc:	461f      	mov	r7, r3
 8008bbe:	2209      	movs	r2, #9
 8008bc0:	3308      	adds	r3, #8
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bc8:	2100      	movs	r1, #0
 8008bca:	2201      	movs	r2, #1
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	db09      	blt.n	8008be4 <__s2b+0x30>
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	f7ff ff47 	bl	8008a64 <_Balloc>
 8008bd6:	b940      	cbnz	r0, 8008bea <__s2b+0x36>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	4b19      	ldr	r3, [pc, #100]	; (8008c40 <__s2b+0x8c>)
 8008bdc:	4819      	ldr	r0, [pc, #100]	; (8008c44 <__s2b+0x90>)
 8008bde:	21ce      	movs	r1, #206	; 0xce
 8008be0:	f000 fe8c 	bl	80098fc <__assert_func>
 8008be4:	0052      	lsls	r2, r2, #1
 8008be6:	3101      	adds	r1, #1
 8008be8:	e7f0      	b.n	8008bcc <__s2b+0x18>
 8008bea:	9b08      	ldr	r3, [sp, #32]
 8008bec:	6143      	str	r3, [r0, #20]
 8008bee:	2d09      	cmp	r5, #9
 8008bf0:	f04f 0301 	mov.w	r3, #1
 8008bf4:	6103      	str	r3, [r0, #16]
 8008bf6:	dd16      	ble.n	8008c26 <__s2b+0x72>
 8008bf8:	f104 0909 	add.w	r9, r4, #9
 8008bfc:	46c8      	mov	r8, r9
 8008bfe:	442c      	add	r4, r5
 8008c00:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008c04:	4601      	mov	r1, r0
 8008c06:	3b30      	subs	r3, #48	; 0x30
 8008c08:	220a      	movs	r2, #10
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f7ff ff8c 	bl	8008b28 <__multadd>
 8008c10:	45a0      	cmp	r8, r4
 8008c12:	d1f5      	bne.n	8008c00 <__s2b+0x4c>
 8008c14:	f1a5 0408 	sub.w	r4, r5, #8
 8008c18:	444c      	add	r4, r9
 8008c1a:	1b2d      	subs	r5, r5, r4
 8008c1c:	1963      	adds	r3, r4, r5
 8008c1e:	42bb      	cmp	r3, r7
 8008c20:	db04      	blt.n	8008c2c <__s2b+0x78>
 8008c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c26:	340a      	adds	r4, #10
 8008c28:	2509      	movs	r5, #9
 8008c2a:	e7f6      	b.n	8008c1a <__s2b+0x66>
 8008c2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c30:	4601      	mov	r1, r0
 8008c32:	3b30      	subs	r3, #48	; 0x30
 8008c34:	220a      	movs	r2, #10
 8008c36:	4630      	mov	r0, r6
 8008c38:	f7ff ff76 	bl	8008b28 <__multadd>
 8008c3c:	e7ee      	b.n	8008c1c <__s2b+0x68>
 8008c3e:	bf00      	nop
 8008c40:	08030178 	.word	0x08030178
 8008c44:	08030204 	.word	0x08030204

08008c48 <__hi0bits>:
 8008c48:	0c03      	lsrs	r3, r0, #16
 8008c4a:	041b      	lsls	r3, r3, #16
 8008c4c:	b9d3      	cbnz	r3, 8008c84 <__hi0bits+0x3c>
 8008c4e:	0400      	lsls	r0, r0, #16
 8008c50:	2310      	movs	r3, #16
 8008c52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008c56:	bf04      	itt	eq
 8008c58:	0200      	lsleq	r0, r0, #8
 8008c5a:	3308      	addeq	r3, #8
 8008c5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008c60:	bf04      	itt	eq
 8008c62:	0100      	lsleq	r0, r0, #4
 8008c64:	3304      	addeq	r3, #4
 8008c66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008c6a:	bf04      	itt	eq
 8008c6c:	0080      	lsleq	r0, r0, #2
 8008c6e:	3302      	addeq	r3, #2
 8008c70:	2800      	cmp	r0, #0
 8008c72:	db05      	blt.n	8008c80 <__hi0bits+0x38>
 8008c74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008c78:	f103 0301 	add.w	r3, r3, #1
 8008c7c:	bf08      	it	eq
 8008c7e:	2320      	moveq	r3, #32
 8008c80:	4618      	mov	r0, r3
 8008c82:	4770      	bx	lr
 8008c84:	2300      	movs	r3, #0
 8008c86:	e7e4      	b.n	8008c52 <__hi0bits+0xa>

08008c88 <__lo0bits>:
 8008c88:	6803      	ldr	r3, [r0, #0]
 8008c8a:	f013 0207 	ands.w	r2, r3, #7
 8008c8e:	4601      	mov	r1, r0
 8008c90:	d00b      	beq.n	8008caa <__lo0bits+0x22>
 8008c92:	07da      	lsls	r2, r3, #31
 8008c94:	d423      	bmi.n	8008cde <__lo0bits+0x56>
 8008c96:	0798      	lsls	r0, r3, #30
 8008c98:	bf49      	itett	mi
 8008c9a:	085b      	lsrmi	r3, r3, #1
 8008c9c:	089b      	lsrpl	r3, r3, #2
 8008c9e:	2001      	movmi	r0, #1
 8008ca0:	600b      	strmi	r3, [r1, #0]
 8008ca2:	bf5c      	itt	pl
 8008ca4:	600b      	strpl	r3, [r1, #0]
 8008ca6:	2002      	movpl	r0, #2
 8008ca8:	4770      	bx	lr
 8008caa:	b298      	uxth	r0, r3
 8008cac:	b9a8      	cbnz	r0, 8008cda <__lo0bits+0x52>
 8008cae:	0c1b      	lsrs	r3, r3, #16
 8008cb0:	2010      	movs	r0, #16
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	b90a      	cbnz	r2, 8008cba <__lo0bits+0x32>
 8008cb6:	3008      	adds	r0, #8
 8008cb8:	0a1b      	lsrs	r3, r3, #8
 8008cba:	071a      	lsls	r2, r3, #28
 8008cbc:	bf04      	itt	eq
 8008cbe:	091b      	lsreq	r3, r3, #4
 8008cc0:	3004      	addeq	r0, #4
 8008cc2:	079a      	lsls	r2, r3, #30
 8008cc4:	bf04      	itt	eq
 8008cc6:	089b      	lsreq	r3, r3, #2
 8008cc8:	3002      	addeq	r0, #2
 8008cca:	07da      	lsls	r2, r3, #31
 8008ccc:	d403      	bmi.n	8008cd6 <__lo0bits+0x4e>
 8008cce:	085b      	lsrs	r3, r3, #1
 8008cd0:	f100 0001 	add.w	r0, r0, #1
 8008cd4:	d005      	beq.n	8008ce2 <__lo0bits+0x5a>
 8008cd6:	600b      	str	r3, [r1, #0]
 8008cd8:	4770      	bx	lr
 8008cda:	4610      	mov	r0, r2
 8008cdc:	e7e9      	b.n	8008cb2 <__lo0bits+0x2a>
 8008cde:	2000      	movs	r0, #0
 8008ce0:	4770      	bx	lr
 8008ce2:	2020      	movs	r0, #32
 8008ce4:	4770      	bx	lr
	...

08008ce8 <__i2b>:
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	460c      	mov	r4, r1
 8008cec:	2101      	movs	r1, #1
 8008cee:	f7ff feb9 	bl	8008a64 <_Balloc>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	b928      	cbnz	r0, 8008d02 <__i2b+0x1a>
 8008cf6:	4b05      	ldr	r3, [pc, #20]	; (8008d0c <__i2b+0x24>)
 8008cf8:	4805      	ldr	r0, [pc, #20]	; (8008d10 <__i2b+0x28>)
 8008cfa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008cfe:	f000 fdfd 	bl	80098fc <__assert_func>
 8008d02:	2301      	movs	r3, #1
 8008d04:	6144      	str	r4, [r0, #20]
 8008d06:	6103      	str	r3, [r0, #16]
 8008d08:	bd10      	pop	{r4, pc}
 8008d0a:	bf00      	nop
 8008d0c:	08030178 	.word	0x08030178
 8008d10:	08030204 	.word	0x08030204

08008d14 <__multiply>:
 8008d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d18:	4691      	mov	r9, r2
 8008d1a:	690a      	ldr	r2, [r1, #16]
 8008d1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	bfb8      	it	lt
 8008d24:	460b      	movlt	r3, r1
 8008d26:	460c      	mov	r4, r1
 8008d28:	bfbc      	itt	lt
 8008d2a:	464c      	movlt	r4, r9
 8008d2c:	4699      	movlt	r9, r3
 8008d2e:	6927      	ldr	r7, [r4, #16]
 8008d30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d34:	68a3      	ldr	r3, [r4, #8]
 8008d36:	6861      	ldr	r1, [r4, #4]
 8008d38:	eb07 060a 	add.w	r6, r7, sl
 8008d3c:	42b3      	cmp	r3, r6
 8008d3e:	b085      	sub	sp, #20
 8008d40:	bfb8      	it	lt
 8008d42:	3101      	addlt	r1, #1
 8008d44:	f7ff fe8e 	bl	8008a64 <_Balloc>
 8008d48:	b930      	cbnz	r0, 8008d58 <__multiply+0x44>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	4b44      	ldr	r3, [pc, #272]	; (8008e60 <__multiply+0x14c>)
 8008d4e:	4845      	ldr	r0, [pc, #276]	; (8008e64 <__multiply+0x150>)
 8008d50:	f240 115d 	movw	r1, #349	; 0x15d
 8008d54:	f000 fdd2 	bl	80098fc <__assert_func>
 8008d58:	f100 0514 	add.w	r5, r0, #20
 8008d5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d60:	462b      	mov	r3, r5
 8008d62:	2200      	movs	r2, #0
 8008d64:	4543      	cmp	r3, r8
 8008d66:	d321      	bcc.n	8008dac <__multiply+0x98>
 8008d68:	f104 0314 	add.w	r3, r4, #20
 8008d6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008d70:	f109 0314 	add.w	r3, r9, #20
 8008d74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008d78:	9202      	str	r2, [sp, #8]
 8008d7a:	1b3a      	subs	r2, r7, r4
 8008d7c:	3a15      	subs	r2, #21
 8008d7e:	f022 0203 	bic.w	r2, r2, #3
 8008d82:	3204      	adds	r2, #4
 8008d84:	f104 0115 	add.w	r1, r4, #21
 8008d88:	428f      	cmp	r7, r1
 8008d8a:	bf38      	it	cc
 8008d8c:	2204      	movcc	r2, #4
 8008d8e:	9201      	str	r2, [sp, #4]
 8008d90:	9a02      	ldr	r2, [sp, #8]
 8008d92:	9303      	str	r3, [sp, #12]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d80c      	bhi.n	8008db2 <__multiply+0x9e>
 8008d98:	2e00      	cmp	r6, #0
 8008d9a:	dd03      	ble.n	8008da4 <__multiply+0x90>
 8008d9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d05a      	beq.n	8008e5a <__multiply+0x146>
 8008da4:	6106      	str	r6, [r0, #16]
 8008da6:	b005      	add	sp, #20
 8008da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dac:	f843 2b04 	str.w	r2, [r3], #4
 8008db0:	e7d8      	b.n	8008d64 <__multiply+0x50>
 8008db2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008db6:	f1ba 0f00 	cmp.w	sl, #0
 8008dba:	d024      	beq.n	8008e06 <__multiply+0xf2>
 8008dbc:	f104 0e14 	add.w	lr, r4, #20
 8008dc0:	46a9      	mov	r9, r5
 8008dc2:	f04f 0c00 	mov.w	ip, #0
 8008dc6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008dca:	f8d9 1000 	ldr.w	r1, [r9]
 8008dce:	fa1f fb82 	uxth.w	fp, r2
 8008dd2:	b289      	uxth	r1, r1
 8008dd4:	fb0a 110b 	mla	r1, sl, fp, r1
 8008dd8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008ddc:	f8d9 2000 	ldr.w	r2, [r9]
 8008de0:	4461      	add	r1, ip
 8008de2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008de6:	fb0a c20b 	mla	r2, sl, fp, ip
 8008dea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008dee:	b289      	uxth	r1, r1
 8008df0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008df4:	4577      	cmp	r7, lr
 8008df6:	f849 1b04 	str.w	r1, [r9], #4
 8008dfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008dfe:	d8e2      	bhi.n	8008dc6 <__multiply+0xb2>
 8008e00:	9a01      	ldr	r2, [sp, #4]
 8008e02:	f845 c002 	str.w	ip, [r5, r2]
 8008e06:	9a03      	ldr	r2, [sp, #12]
 8008e08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	f1b9 0f00 	cmp.w	r9, #0
 8008e12:	d020      	beq.n	8008e56 <__multiply+0x142>
 8008e14:	6829      	ldr	r1, [r5, #0]
 8008e16:	f104 0c14 	add.w	ip, r4, #20
 8008e1a:	46ae      	mov	lr, r5
 8008e1c:	f04f 0a00 	mov.w	sl, #0
 8008e20:	f8bc b000 	ldrh.w	fp, [ip]
 8008e24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008e28:	fb09 220b 	mla	r2, r9, fp, r2
 8008e2c:	4492      	add	sl, r2
 8008e2e:	b289      	uxth	r1, r1
 8008e30:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008e34:	f84e 1b04 	str.w	r1, [lr], #4
 8008e38:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008e3c:	f8be 1000 	ldrh.w	r1, [lr]
 8008e40:	0c12      	lsrs	r2, r2, #16
 8008e42:	fb09 1102 	mla	r1, r9, r2, r1
 8008e46:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008e4a:	4567      	cmp	r7, ip
 8008e4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e50:	d8e6      	bhi.n	8008e20 <__multiply+0x10c>
 8008e52:	9a01      	ldr	r2, [sp, #4]
 8008e54:	50a9      	str	r1, [r5, r2]
 8008e56:	3504      	adds	r5, #4
 8008e58:	e79a      	b.n	8008d90 <__multiply+0x7c>
 8008e5a:	3e01      	subs	r6, #1
 8008e5c:	e79c      	b.n	8008d98 <__multiply+0x84>
 8008e5e:	bf00      	nop
 8008e60:	08030178 	.word	0x08030178
 8008e64:	08030204 	.word	0x08030204

08008e68 <__pow5mult>:
 8008e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e6c:	4615      	mov	r5, r2
 8008e6e:	f012 0203 	ands.w	r2, r2, #3
 8008e72:	4606      	mov	r6, r0
 8008e74:	460f      	mov	r7, r1
 8008e76:	d007      	beq.n	8008e88 <__pow5mult+0x20>
 8008e78:	4c25      	ldr	r4, [pc, #148]	; (8008f10 <__pow5mult+0xa8>)
 8008e7a:	3a01      	subs	r2, #1
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e82:	f7ff fe51 	bl	8008b28 <__multadd>
 8008e86:	4607      	mov	r7, r0
 8008e88:	10ad      	asrs	r5, r5, #2
 8008e8a:	d03d      	beq.n	8008f08 <__pow5mult+0xa0>
 8008e8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e8e:	b97c      	cbnz	r4, 8008eb0 <__pow5mult+0x48>
 8008e90:	2010      	movs	r0, #16
 8008e92:	f7ff fdbf 	bl	8008a14 <malloc>
 8008e96:	4602      	mov	r2, r0
 8008e98:	6270      	str	r0, [r6, #36]	; 0x24
 8008e9a:	b928      	cbnz	r0, 8008ea8 <__pow5mult+0x40>
 8008e9c:	4b1d      	ldr	r3, [pc, #116]	; (8008f14 <__pow5mult+0xac>)
 8008e9e:	481e      	ldr	r0, [pc, #120]	; (8008f18 <__pow5mult+0xb0>)
 8008ea0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008ea4:	f000 fd2a 	bl	80098fc <__assert_func>
 8008ea8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008eac:	6004      	str	r4, [r0, #0]
 8008eae:	60c4      	str	r4, [r0, #12]
 8008eb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008eb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008eb8:	b94c      	cbnz	r4, 8008ece <__pow5mult+0x66>
 8008eba:	f240 2171 	movw	r1, #625	; 0x271
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f7ff ff12 	bl	8008ce8 <__i2b>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008eca:	4604      	mov	r4, r0
 8008ecc:	6003      	str	r3, [r0, #0]
 8008ece:	f04f 0900 	mov.w	r9, #0
 8008ed2:	07eb      	lsls	r3, r5, #31
 8008ed4:	d50a      	bpl.n	8008eec <__pow5mult+0x84>
 8008ed6:	4639      	mov	r1, r7
 8008ed8:	4622      	mov	r2, r4
 8008eda:	4630      	mov	r0, r6
 8008edc:	f7ff ff1a 	bl	8008d14 <__multiply>
 8008ee0:	4639      	mov	r1, r7
 8008ee2:	4680      	mov	r8, r0
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f7ff fdfd 	bl	8008ae4 <_Bfree>
 8008eea:	4647      	mov	r7, r8
 8008eec:	106d      	asrs	r5, r5, #1
 8008eee:	d00b      	beq.n	8008f08 <__pow5mult+0xa0>
 8008ef0:	6820      	ldr	r0, [r4, #0]
 8008ef2:	b938      	cbnz	r0, 8008f04 <__pow5mult+0x9c>
 8008ef4:	4622      	mov	r2, r4
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f7ff ff0b 	bl	8008d14 <__multiply>
 8008efe:	6020      	str	r0, [r4, #0]
 8008f00:	f8c0 9000 	str.w	r9, [r0]
 8008f04:	4604      	mov	r4, r0
 8008f06:	e7e4      	b.n	8008ed2 <__pow5mult+0x6a>
 8008f08:	4638      	mov	r0, r7
 8008f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f0e:	bf00      	nop
 8008f10:	08030350 	.word	0x08030350
 8008f14:	08030106 	.word	0x08030106
 8008f18:	08030204 	.word	0x08030204

08008f1c <__lshift>:
 8008f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f20:	460c      	mov	r4, r1
 8008f22:	6849      	ldr	r1, [r1, #4]
 8008f24:	6923      	ldr	r3, [r4, #16]
 8008f26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f2a:	68a3      	ldr	r3, [r4, #8]
 8008f2c:	4607      	mov	r7, r0
 8008f2e:	4691      	mov	r9, r2
 8008f30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f34:	f108 0601 	add.w	r6, r8, #1
 8008f38:	42b3      	cmp	r3, r6
 8008f3a:	db0b      	blt.n	8008f54 <__lshift+0x38>
 8008f3c:	4638      	mov	r0, r7
 8008f3e:	f7ff fd91 	bl	8008a64 <_Balloc>
 8008f42:	4605      	mov	r5, r0
 8008f44:	b948      	cbnz	r0, 8008f5a <__lshift+0x3e>
 8008f46:	4602      	mov	r2, r0
 8008f48:	4b2a      	ldr	r3, [pc, #168]	; (8008ff4 <__lshift+0xd8>)
 8008f4a:	482b      	ldr	r0, [pc, #172]	; (8008ff8 <__lshift+0xdc>)
 8008f4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008f50:	f000 fcd4 	bl	80098fc <__assert_func>
 8008f54:	3101      	adds	r1, #1
 8008f56:	005b      	lsls	r3, r3, #1
 8008f58:	e7ee      	b.n	8008f38 <__lshift+0x1c>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	f100 0114 	add.w	r1, r0, #20
 8008f60:	f100 0210 	add.w	r2, r0, #16
 8008f64:	4618      	mov	r0, r3
 8008f66:	4553      	cmp	r3, sl
 8008f68:	db37      	blt.n	8008fda <__lshift+0xbe>
 8008f6a:	6920      	ldr	r0, [r4, #16]
 8008f6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f70:	f104 0314 	add.w	r3, r4, #20
 8008f74:	f019 091f 	ands.w	r9, r9, #31
 8008f78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008f80:	d02f      	beq.n	8008fe2 <__lshift+0xc6>
 8008f82:	f1c9 0e20 	rsb	lr, r9, #32
 8008f86:	468a      	mov	sl, r1
 8008f88:	f04f 0c00 	mov.w	ip, #0
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	fa02 f209 	lsl.w	r2, r2, r9
 8008f92:	ea42 020c 	orr.w	r2, r2, ip
 8008f96:	f84a 2b04 	str.w	r2, [sl], #4
 8008f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f9e:	4298      	cmp	r0, r3
 8008fa0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008fa4:	d8f2      	bhi.n	8008f8c <__lshift+0x70>
 8008fa6:	1b03      	subs	r3, r0, r4
 8008fa8:	3b15      	subs	r3, #21
 8008faa:	f023 0303 	bic.w	r3, r3, #3
 8008fae:	3304      	adds	r3, #4
 8008fb0:	f104 0215 	add.w	r2, r4, #21
 8008fb4:	4290      	cmp	r0, r2
 8008fb6:	bf38      	it	cc
 8008fb8:	2304      	movcc	r3, #4
 8008fba:	f841 c003 	str.w	ip, [r1, r3]
 8008fbe:	f1bc 0f00 	cmp.w	ip, #0
 8008fc2:	d001      	beq.n	8008fc8 <__lshift+0xac>
 8008fc4:	f108 0602 	add.w	r6, r8, #2
 8008fc8:	3e01      	subs	r6, #1
 8008fca:	4638      	mov	r0, r7
 8008fcc:	612e      	str	r6, [r5, #16]
 8008fce:	4621      	mov	r1, r4
 8008fd0:	f7ff fd88 	bl	8008ae4 <_Bfree>
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fda:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fde:	3301      	adds	r3, #1
 8008fe0:	e7c1      	b.n	8008f66 <__lshift+0x4a>
 8008fe2:	3904      	subs	r1, #4
 8008fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fe8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fec:	4298      	cmp	r0, r3
 8008fee:	d8f9      	bhi.n	8008fe4 <__lshift+0xc8>
 8008ff0:	e7ea      	b.n	8008fc8 <__lshift+0xac>
 8008ff2:	bf00      	nop
 8008ff4:	08030178 	.word	0x08030178
 8008ff8:	08030204 	.word	0x08030204

08008ffc <__mcmp>:
 8008ffc:	b530      	push	{r4, r5, lr}
 8008ffe:	6902      	ldr	r2, [r0, #16]
 8009000:	690c      	ldr	r4, [r1, #16]
 8009002:	1b12      	subs	r2, r2, r4
 8009004:	d10e      	bne.n	8009024 <__mcmp+0x28>
 8009006:	f100 0314 	add.w	r3, r0, #20
 800900a:	3114      	adds	r1, #20
 800900c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009010:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009014:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009018:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800901c:	42a5      	cmp	r5, r4
 800901e:	d003      	beq.n	8009028 <__mcmp+0x2c>
 8009020:	d305      	bcc.n	800902e <__mcmp+0x32>
 8009022:	2201      	movs	r2, #1
 8009024:	4610      	mov	r0, r2
 8009026:	bd30      	pop	{r4, r5, pc}
 8009028:	4283      	cmp	r3, r0
 800902a:	d3f3      	bcc.n	8009014 <__mcmp+0x18>
 800902c:	e7fa      	b.n	8009024 <__mcmp+0x28>
 800902e:	f04f 32ff 	mov.w	r2, #4294967295
 8009032:	e7f7      	b.n	8009024 <__mcmp+0x28>

08009034 <__mdiff>:
 8009034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009038:	460c      	mov	r4, r1
 800903a:	4606      	mov	r6, r0
 800903c:	4611      	mov	r1, r2
 800903e:	4620      	mov	r0, r4
 8009040:	4690      	mov	r8, r2
 8009042:	f7ff ffdb 	bl	8008ffc <__mcmp>
 8009046:	1e05      	subs	r5, r0, #0
 8009048:	d110      	bne.n	800906c <__mdiff+0x38>
 800904a:	4629      	mov	r1, r5
 800904c:	4630      	mov	r0, r6
 800904e:	f7ff fd09 	bl	8008a64 <_Balloc>
 8009052:	b930      	cbnz	r0, 8009062 <__mdiff+0x2e>
 8009054:	4b3a      	ldr	r3, [pc, #232]	; (8009140 <__mdiff+0x10c>)
 8009056:	4602      	mov	r2, r0
 8009058:	f240 2132 	movw	r1, #562	; 0x232
 800905c:	4839      	ldr	r0, [pc, #228]	; (8009144 <__mdiff+0x110>)
 800905e:	f000 fc4d 	bl	80098fc <__assert_func>
 8009062:	2301      	movs	r3, #1
 8009064:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906c:	bfa4      	itt	ge
 800906e:	4643      	movge	r3, r8
 8009070:	46a0      	movge	r8, r4
 8009072:	4630      	mov	r0, r6
 8009074:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009078:	bfa6      	itte	ge
 800907a:	461c      	movge	r4, r3
 800907c:	2500      	movge	r5, #0
 800907e:	2501      	movlt	r5, #1
 8009080:	f7ff fcf0 	bl	8008a64 <_Balloc>
 8009084:	b920      	cbnz	r0, 8009090 <__mdiff+0x5c>
 8009086:	4b2e      	ldr	r3, [pc, #184]	; (8009140 <__mdiff+0x10c>)
 8009088:	4602      	mov	r2, r0
 800908a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800908e:	e7e5      	b.n	800905c <__mdiff+0x28>
 8009090:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009094:	6926      	ldr	r6, [r4, #16]
 8009096:	60c5      	str	r5, [r0, #12]
 8009098:	f104 0914 	add.w	r9, r4, #20
 800909c:	f108 0514 	add.w	r5, r8, #20
 80090a0:	f100 0e14 	add.w	lr, r0, #20
 80090a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80090a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80090ac:	f108 0210 	add.w	r2, r8, #16
 80090b0:	46f2      	mov	sl, lr
 80090b2:	2100      	movs	r1, #0
 80090b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80090b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80090bc:	fa1f f883 	uxth.w	r8, r3
 80090c0:	fa11 f18b 	uxtah	r1, r1, fp
 80090c4:	0c1b      	lsrs	r3, r3, #16
 80090c6:	eba1 0808 	sub.w	r8, r1, r8
 80090ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80090ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80090d2:	fa1f f888 	uxth.w	r8, r8
 80090d6:	1419      	asrs	r1, r3, #16
 80090d8:	454e      	cmp	r6, r9
 80090da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80090de:	f84a 3b04 	str.w	r3, [sl], #4
 80090e2:	d8e7      	bhi.n	80090b4 <__mdiff+0x80>
 80090e4:	1b33      	subs	r3, r6, r4
 80090e6:	3b15      	subs	r3, #21
 80090e8:	f023 0303 	bic.w	r3, r3, #3
 80090ec:	3304      	adds	r3, #4
 80090ee:	3415      	adds	r4, #21
 80090f0:	42a6      	cmp	r6, r4
 80090f2:	bf38      	it	cc
 80090f4:	2304      	movcc	r3, #4
 80090f6:	441d      	add	r5, r3
 80090f8:	4473      	add	r3, lr
 80090fa:	469e      	mov	lr, r3
 80090fc:	462e      	mov	r6, r5
 80090fe:	4566      	cmp	r6, ip
 8009100:	d30e      	bcc.n	8009120 <__mdiff+0xec>
 8009102:	f10c 0203 	add.w	r2, ip, #3
 8009106:	1b52      	subs	r2, r2, r5
 8009108:	f022 0203 	bic.w	r2, r2, #3
 800910c:	3d03      	subs	r5, #3
 800910e:	45ac      	cmp	ip, r5
 8009110:	bf38      	it	cc
 8009112:	2200      	movcc	r2, #0
 8009114:	441a      	add	r2, r3
 8009116:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800911a:	b17b      	cbz	r3, 800913c <__mdiff+0x108>
 800911c:	6107      	str	r7, [r0, #16]
 800911e:	e7a3      	b.n	8009068 <__mdiff+0x34>
 8009120:	f856 8b04 	ldr.w	r8, [r6], #4
 8009124:	fa11 f288 	uxtah	r2, r1, r8
 8009128:	1414      	asrs	r4, r2, #16
 800912a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800912e:	b292      	uxth	r2, r2
 8009130:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009134:	f84e 2b04 	str.w	r2, [lr], #4
 8009138:	1421      	asrs	r1, r4, #16
 800913a:	e7e0      	b.n	80090fe <__mdiff+0xca>
 800913c:	3f01      	subs	r7, #1
 800913e:	e7ea      	b.n	8009116 <__mdiff+0xe2>
 8009140:	08030178 	.word	0x08030178
 8009144:	08030204 	.word	0x08030204

08009148 <__ulp>:
 8009148:	b082      	sub	sp, #8
 800914a:	ed8d 0b00 	vstr	d0, [sp]
 800914e:	9b01      	ldr	r3, [sp, #4]
 8009150:	4912      	ldr	r1, [pc, #72]	; (800919c <__ulp+0x54>)
 8009152:	4019      	ands	r1, r3
 8009154:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009158:	2900      	cmp	r1, #0
 800915a:	dd05      	ble.n	8009168 <__ulp+0x20>
 800915c:	2200      	movs	r2, #0
 800915e:	460b      	mov	r3, r1
 8009160:	ec43 2b10 	vmov	d0, r2, r3
 8009164:	b002      	add	sp, #8
 8009166:	4770      	bx	lr
 8009168:	4249      	negs	r1, r1
 800916a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800916e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009172:	f04f 0200 	mov.w	r2, #0
 8009176:	f04f 0300 	mov.w	r3, #0
 800917a:	da04      	bge.n	8009186 <__ulp+0x3e>
 800917c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009180:	fa41 f300 	asr.w	r3, r1, r0
 8009184:	e7ec      	b.n	8009160 <__ulp+0x18>
 8009186:	f1a0 0114 	sub.w	r1, r0, #20
 800918a:	291e      	cmp	r1, #30
 800918c:	bfda      	itte	le
 800918e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009192:	fa20 f101 	lsrle.w	r1, r0, r1
 8009196:	2101      	movgt	r1, #1
 8009198:	460a      	mov	r2, r1
 800919a:	e7e1      	b.n	8009160 <__ulp+0x18>
 800919c:	7ff00000 	.word	0x7ff00000

080091a0 <__b2d>:
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a2:	6905      	ldr	r5, [r0, #16]
 80091a4:	f100 0714 	add.w	r7, r0, #20
 80091a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80091ac:	1f2e      	subs	r6, r5, #4
 80091ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80091b2:	4620      	mov	r0, r4
 80091b4:	f7ff fd48 	bl	8008c48 <__hi0bits>
 80091b8:	f1c0 0320 	rsb	r3, r0, #32
 80091bc:	280a      	cmp	r0, #10
 80091be:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800923c <__b2d+0x9c>
 80091c2:	600b      	str	r3, [r1, #0]
 80091c4:	dc14      	bgt.n	80091f0 <__b2d+0x50>
 80091c6:	f1c0 0e0b 	rsb	lr, r0, #11
 80091ca:	fa24 f10e 	lsr.w	r1, r4, lr
 80091ce:	42b7      	cmp	r7, r6
 80091d0:	ea41 030c 	orr.w	r3, r1, ip
 80091d4:	bf34      	ite	cc
 80091d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80091da:	2100      	movcs	r1, #0
 80091dc:	3015      	adds	r0, #21
 80091de:	fa04 f000 	lsl.w	r0, r4, r0
 80091e2:	fa21 f10e 	lsr.w	r1, r1, lr
 80091e6:	ea40 0201 	orr.w	r2, r0, r1
 80091ea:	ec43 2b10 	vmov	d0, r2, r3
 80091ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091f0:	42b7      	cmp	r7, r6
 80091f2:	bf3a      	itte	cc
 80091f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80091f8:	f1a5 0608 	subcc.w	r6, r5, #8
 80091fc:	2100      	movcs	r1, #0
 80091fe:	380b      	subs	r0, #11
 8009200:	d017      	beq.n	8009232 <__b2d+0x92>
 8009202:	f1c0 0c20 	rsb	ip, r0, #32
 8009206:	fa04 f500 	lsl.w	r5, r4, r0
 800920a:	42be      	cmp	r6, r7
 800920c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009210:	ea45 0504 	orr.w	r5, r5, r4
 8009214:	bf8c      	ite	hi
 8009216:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800921a:	2400      	movls	r4, #0
 800921c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009220:	fa01 f000 	lsl.w	r0, r1, r0
 8009224:	fa24 f40c 	lsr.w	r4, r4, ip
 8009228:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800922c:	ea40 0204 	orr.w	r2, r0, r4
 8009230:	e7db      	b.n	80091ea <__b2d+0x4a>
 8009232:	ea44 030c 	orr.w	r3, r4, ip
 8009236:	460a      	mov	r2, r1
 8009238:	e7d7      	b.n	80091ea <__b2d+0x4a>
 800923a:	bf00      	nop
 800923c:	3ff00000 	.word	0x3ff00000

08009240 <__d2b>:
 8009240:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009244:	4689      	mov	r9, r1
 8009246:	2101      	movs	r1, #1
 8009248:	ec57 6b10 	vmov	r6, r7, d0
 800924c:	4690      	mov	r8, r2
 800924e:	f7ff fc09 	bl	8008a64 <_Balloc>
 8009252:	4604      	mov	r4, r0
 8009254:	b930      	cbnz	r0, 8009264 <__d2b+0x24>
 8009256:	4602      	mov	r2, r0
 8009258:	4b25      	ldr	r3, [pc, #148]	; (80092f0 <__d2b+0xb0>)
 800925a:	4826      	ldr	r0, [pc, #152]	; (80092f4 <__d2b+0xb4>)
 800925c:	f240 310a 	movw	r1, #778	; 0x30a
 8009260:	f000 fb4c 	bl	80098fc <__assert_func>
 8009264:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009268:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800926c:	bb35      	cbnz	r5, 80092bc <__d2b+0x7c>
 800926e:	2e00      	cmp	r6, #0
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	d028      	beq.n	80092c6 <__d2b+0x86>
 8009274:	4668      	mov	r0, sp
 8009276:	9600      	str	r6, [sp, #0]
 8009278:	f7ff fd06 	bl	8008c88 <__lo0bits>
 800927c:	9900      	ldr	r1, [sp, #0]
 800927e:	b300      	cbz	r0, 80092c2 <__d2b+0x82>
 8009280:	9a01      	ldr	r2, [sp, #4]
 8009282:	f1c0 0320 	rsb	r3, r0, #32
 8009286:	fa02 f303 	lsl.w	r3, r2, r3
 800928a:	430b      	orrs	r3, r1
 800928c:	40c2      	lsrs	r2, r0
 800928e:	6163      	str	r3, [r4, #20]
 8009290:	9201      	str	r2, [sp, #4]
 8009292:	9b01      	ldr	r3, [sp, #4]
 8009294:	61a3      	str	r3, [r4, #24]
 8009296:	2b00      	cmp	r3, #0
 8009298:	bf14      	ite	ne
 800929a:	2202      	movne	r2, #2
 800929c:	2201      	moveq	r2, #1
 800929e:	6122      	str	r2, [r4, #16]
 80092a0:	b1d5      	cbz	r5, 80092d8 <__d2b+0x98>
 80092a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80092a6:	4405      	add	r5, r0
 80092a8:	f8c9 5000 	str.w	r5, [r9]
 80092ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80092b0:	f8c8 0000 	str.w	r0, [r8]
 80092b4:	4620      	mov	r0, r4
 80092b6:	b003      	add	sp, #12
 80092b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092c0:	e7d5      	b.n	800926e <__d2b+0x2e>
 80092c2:	6161      	str	r1, [r4, #20]
 80092c4:	e7e5      	b.n	8009292 <__d2b+0x52>
 80092c6:	a801      	add	r0, sp, #4
 80092c8:	f7ff fcde 	bl	8008c88 <__lo0bits>
 80092cc:	9b01      	ldr	r3, [sp, #4]
 80092ce:	6163      	str	r3, [r4, #20]
 80092d0:	2201      	movs	r2, #1
 80092d2:	6122      	str	r2, [r4, #16]
 80092d4:	3020      	adds	r0, #32
 80092d6:	e7e3      	b.n	80092a0 <__d2b+0x60>
 80092d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80092dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80092e0:	f8c9 0000 	str.w	r0, [r9]
 80092e4:	6918      	ldr	r0, [r3, #16]
 80092e6:	f7ff fcaf 	bl	8008c48 <__hi0bits>
 80092ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092ee:	e7df      	b.n	80092b0 <__d2b+0x70>
 80092f0:	08030178 	.word	0x08030178
 80092f4:	08030204 	.word	0x08030204

080092f8 <__ratio>:
 80092f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fc:	4688      	mov	r8, r1
 80092fe:	4669      	mov	r1, sp
 8009300:	4681      	mov	r9, r0
 8009302:	f7ff ff4d 	bl	80091a0 <__b2d>
 8009306:	a901      	add	r1, sp, #4
 8009308:	4640      	mov	r0, r8
 800930a:	ec55 4b10 	vmov	r4, r5, d0
 800930e:	ee10 aa10 	vmov	sl, s0
 8009312:	f7ff ff45 	bl	80091a0 <__b2d>
 8009316:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800931a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800931e:	1a59      	subs	r1, r3, r1
 8009320:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800932a:	ec57 6b10 	vmov	r6, r7, d0
 800932e:	2b00      	cmp	r3, #0
 8009330:	bfd6      	itet	le
 8009332:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009336:	462a      	movgt	r2, r5
 8009338:	463a      	movle	r2, r7
 800933a:	46ab      	mov	fp, r5
 800933c:	bfd6      	itet	le
 800933e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8009342:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009346:	ee00 3a90 	vmovle	s1, r3
 800934a:	ec4b ab17 	vmov	d7, sl, fp
 800934e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8009352:	b003      	add	sp, #12
 8009354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009358 <__copybits>:
 8009358:	3901      	subs	r1, #1
 800935a:	b570      	push	{r4, r5, r6, lr}
 800935c:	1149      	asrs	r1, r1, #5
 800935e:	6914      	ldr	r4, [r2, #16]
 8009360:	3101      	adds	r1, #1
 8009362:	f102 0314 	add.w	r3, r2, #20
 8009366:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800936a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800936e:	1f05      	subs	r5, r0, #4
 8009370:	42a3      	cmp	r3, r4
 8009372:	d30c      	bcc.n	800938e <__copybits+0x36>
 8009374:	1aa3      	subs	r3, r4, r2
 8009376:	3b11      	subs	r3, #17
 8009378:	f023 0303 	bic.w	r3, r3, #3
 800937c:	3211      	adds	r2, #17
 800937e:	42a2      	cmp	r2, r4
 8009380:	bf88      	it	hi
 8009382:	2300      	movhi	r3, #0
 8009384:	4418      	add	r0, r3
 8009386:	2300      	movs	r3, #0
 8009388:	4288      	cmp	r0, r1
 800938a:	d305      	bcc.n	8009398 <__copybits+0x40>
 800938c:	bd70      	pop	{r4, r5, r6, pc}
 800938e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009392:	f845 6f04 	str.w	r6, [r5, #4]!
 8009396:	e7eb      	b.n	8009370 <__copybits+0x18>
 8009398:	f840 3b04 	str.w	r3, [r0], #4
 800939c:	e7f4      	b.n	8009388 <__copybits+0x30>

0800939e <__any_on>:
 800939e:	f100 0214 	add.w	r2, r0, #20
 80093a2:	6900      	ldr	r0, [r0, #16]
 80093a4:	114b      	asrs	r3, r1, #5
 80093a6:	4298      	cmp	r0, r3
 80093a8:	b510      	push	{r4, lr}
 80093aa:	db11      	blt.n	80093d0 <__any_on+0x32>
 80093ac:	dd0a      	ble.n	80093c4 <__any_on+0x26>
 80093ae:	f011 011f 	ands.w	r1, r1, #31
 80093b2:	d007      	beq.n	80093c4 <__any_on+0x26>
 80093b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80093b8:	fa24 f001 	lsr.w	r0, r4, r1
 80093bc:	fa00 f101 	lsl.w	r1, r0, r1
 80093c0:	428c      	cmp	r4, r1
 80093c2:	d10b      	bne.n	80093dc <__any_on+0x3e>
 80093c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d803      	bhi.n	80093d4 <__any_on+0x36>
 80093cc:	2000      	movs	r0, #0
 80093ce:	bd10      	pop	{r4, pc}
 80093d0:	4603      	mov	r3, r0
 80093d2:	e7f7      	b.n	80093c4 <__any_on+0x26>
 80093d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80093d8:	2900      	cmp	r1, #0
 80093da:	d0f5      	beq.n	80093c8 <__any_on+0x2a>
 80093dc:	2001      	movs	r0, #1
 80093de:	e7f6      	b.n	80093ce <__any_on+0x30>

080093e0 <_calloc_r>:
 80093e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093e2:	fba1 2402 	umull	r2, r4, r1, r2
 80093e6:	b94c      	cbnz	r4, 80093fc <_calloc_r+0x1c>
 80093e8:	4611      	mov	r1, r2
 80093ea:	9201      	str	r2, [sp, #4]
 80093ec:	f000 f87a 	bl	80094e4 <_malloc_r>
 80093f0:	9a01      	ldr	r2, [sp, #4]
 80093f2:	4605      	mov	r5, r0
 80093f4:	b930      	cbnz	r0, 8009404 <_calloc_r+0x24>
 80093f6:	4628      	mov	r0, r5
 80093f8:	b003      	add	sp, #12
 80093fa:	bd30      	pop	{r4, r5, pc}
 80093fc:	220c      	movs	r2, #12
 80093fe:	6002      	str	r2, [r0, #0]
 8009400:	2500      	movs	r5, #0
 8009402:	e7f8      	b.n	80093f6 <_calloc_r+0x16>
 8009404:	4621      	mov	r1, r4
 8009406:	f7fc fcc7 	bl	8005d98 <memset>
 800940a:	e7f4      	b.n	80093f6 <_calloc_r+0x16>

0800940c <_free_r>:
 800940c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800940e:	2900      	cmp	r1, #0
 8009410:	d044      	beq.n	800949c <_free_r+0x90>
 8009412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009416:	9001      	str	r0, [sp, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	f1a1 0404 	sub.w	r4, r1, #4
 800941e:	bfb8      	it	lt
 8009420:	18e4      	addlt	r4, r4, r3
 8009422:	f000 fab5 	bl	8009990 <__malloc_lock>
 8009426:	4a1e      	ldr	r2, [pc, #120]	; (80094a0 <_free_r+0x94>)
 8009428:	9801      	ldr	r0, [sp, #4]
 800942a:	6813      	ldr	r3, [r2, #0]
 800942c:	b933      	cbnz	r3, 800943c <_free_r+0x30>
 800942e:	6063      	str	r3, [r4, #4]
 8009430:	6014      	str	r4, [r2, #0]
 8009432:	b003      	add	sp, #12
 8009434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009438:	f000 bab0 	b.w	800999c <__malloc_unlock>
 800943c:	42a3      	cmp	r3, r4
 800943e:	d908      	bls.n	8009452 <_free_r+0x46>
 8009440:	6825      	ldr	r5, [r4, #0]
 8009442:	1961      	adds	r1, r4, r5
 8009444:	428b      	cmp	r3, r1
 8009446:	bf01      	itttt	eq
 8009448:	6819      	ldreq	r1, [r3, #0]
 800944a:	685b      	ldreq	r3, [r3, #4]
 800944c:	1949      	addeq	r1, r1, r5
 800944e:	6021      	streq	r1, [r4, #0]
 8009450:	e7ed      	b.n	800942e <_free_r+0x22>
 8009452:	461a      	mov	r2, r3
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	b10b      	cbz	r3, 800945c <_free_r+0x50>
 8009458:	42a3      	cmp	r3, r4
 800945a:	d9fa      	bls.n	8009452 <_free_r+0x46>
 800945c:	6811      	ldr	r1, [r2, #0]
 800945e:	1855      	adds	r5, r2, r1
 8009460:	42a5      	cmp	r5, r4
 8009462:	d10b      	bne.n	800947c <_free_r+0x70>
 8009464:	6824      	ldr	r4, [r4, #0]
 8009466:	4421      	add	r1, r4
 8009468:	1854      	adds	r4, r2, r1
 800946a:	42a3      	cmp	r3, r4
 800946c:	6011      	str	r1, [r2, #0]
 800946e:	d1e0      	bne.n	8009432 <_free_r+0x26>
 8009470:	681c      	ldr	r4, [r3, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	6053      	str	r3, [r2, #4]
 8009476:	4421      	add	r1, r4
 8009478:	6011      	str	r1, [r2, #0]
 800947a:	e7da      	b.n	8009432 <_free_r+0x26>
 800947c:	d902      	bls.n	8009484 <_free_r+0x78>
 800947e:	230c      	movs	r3, #12
 8009480:	6003      	str	r3, [r0, #0]
 8009482:	e7d6      	b.n	8009432 <_free_r+0x26>
 8009484:	6825      	ldr	r5, [r4, #0]
 8009486:	1961      	adds	r1, r4, r5
 8009488:	428b      	cmp	r3, r1
 800948a:	bf04      	itt	eq
 800948c:	6819      	ldreq	r1, [r3, #0]
 800948e:	685b      	ldreq	r3, [r3, #4]
 8009490:	6063      	str	r3, [r4, #4]
 8009492:	bf04      	itt	eq
 8009494:	1949      	addeq	r1, r1, r5
 8009496:	6021      	streq	r1, [r4, #0]
 8009498:	6054      	str	r4, [r2, #4]
 800949a:	e7ca      	b.n	8009432 <_free_r+0x26>
 800949c:	b003      	add	sp, #12
 800949e:	bd30      	pop	{r4, r5, pc}
 80094a0:	2000032c 	.word	0x2000032c

080094a4 <sbrk_aligned>:
 80094a4:	b570      	push	{r4, r5, r6, lr}
 80094a6:	4e0e      	ldr	r6, [pc, #56]	; (80094e0 <sbrk_aligned+0x3c>)
 80094a8:	460c      	mov	r4, r1
 80094aa:	6831      	ldr	r1, [r6, #0]
 80094ac:	4605      	mov	r5, r0
 80094ae:	b911      	cbnz	r1, 80094b6 <sbrk_aligned+0x12>
 80094b0:	f000 f9f2 	bl	8009898 <_sbrk_r>
 80094b4:	6030      	str	r0, [r6, #0]
 80094b6:	4621      	mov	r1, r4
 80094b8:	4628      	mov	r0, r5
 80094ba:	f000 f9ed 	bl	8009898 <_sbrk_r>
 80094be:	1c43      	adds	r3, r0, #1
 80094c0:	d00a      	beq.n	80094d8 <sbrk_aligned+0x34>
 80094c2:	1cc4      	adds	r4, r0, #3
 80094c4:	f024 0403 	bic.w	r4, r4, #3
 80094c8:	42a0      	cmp	r0, r4
 80094ca:	d007      	beq.n	80094dc <sbrk_aligned+0x38>
 80094cc:	1a21      	subs	r1, r4, r0
 80094ce:	4628      	mov	r0, r5
 80094d0:	f000 f9e2 	bl	8009898 <_sbrk_r>
 80094d4:	3001      	adds	r0, #1
 80094d6:	d101      	bne.n	80094dc <sbrk_aligned+0x38>
 80094d8:	f04f 34ff 	mov.w	r4, #4294967295
 80094dc:	4620      	mov	r0, r4
 80094de:	bd70      	pop	{r4, r5, r6, pc}
 80094e0:	20000330 	.word	0x20000330

080094e4 <_malloc_r>:
 80094e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e8:	1ccd      	adds	r5, r1, #3
 80094ea:	f025 0503 	bic.w	r5, r5, #3
 80094ee:	3508      	adds	r5, #8
 80094f0:	2d0c      	cmp	r5, #12
 80094f2:	bf38      	it	cc
 80094f4:	250c      	movcc	r5, #12
 80094f6:	2d00      	cmp	r5, #0
 80094f8:	4607      	mov	r7, r0
 80094fa:	db01      	blt.n	8009500 <_malloc_r+0x1c>
 80094fc:	42a9      	cmp	r1, r5
 80094fe:	d905      	bls.n	800950c <_malloc_r+0x28>
 8009500:	230c      	movs	r3, #12
 8009502:	603b      	str	r3, [r7, #0]
 8009504:	2600      	movs	r6, #0
 8009506:	4630      	mov	r0, r6
 8009508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800950c:	4e2e      	ldr	r6, [pc, #184]	; (80095c8 <_malloc_r+0xe4>)
 800950e:	f000 fa3f 	bl	8009990 <__malloc_lock>
 8009512:	6833      	ldr	r3, [r6, #0]
 8009514:	461c      	mov	r4, r3
 8009516:	bb34      	cbnz	r4, 8009566 <_malloc_r+0x82>
 8009518:	4629      	mov	r1, r5
 800951a:	4638      	mov	r0, r7
 800951c:	f7ff ffc2 	bl	80094a4 <sbrk_aligned>
 8009520:	1c43      	adds	r3, r0, #1
 8009522:	4604      	mov	r4, r0
 8009524:	d14d      	bne.n	80095c2 <_malloc_r+0xde>
 8009526:	6834      	ldr	r4, [r6, #0]
 8009528:	4626      	mov	r6, r4
 800952a:	2e00      	cmp	r6, #0
 800952c:	d140      	bne.n	80095b0 <_malloc_r+0xcc>
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	4631      	mov	r1, r6
 8009532:	4638      	mov	r0, r7
 8009534:	eb04 0803 	add.w	r8, r4, r3
 8009538:	f000 f9ae 	bl	8009898 <_sbrk_r>
 800953c:	4580      	cmp	r8, r0
 800953e:	d13a      	bne.n	80095b6 <_malloc_r+0xd2>
 8009540:	6821      	ldr	r1, [r4, #0]
 8009542:	3503      	adds	r5, #3
 8009544:	1a6d      	subs	r5, r5, r1
 8009546:	f025 0503 	bic.w	r5, r5, #3
 800954a:	3508      	adds	r5, #8
 800954c:	2d0c      	cmp	r5, #12
 800954e:	bf38      	it	cc
 8009550:	250c      	movcc	r5, #12
 8009552:	4629      	mov	r1, r5
 8009554:	4638      	mov	r0, r7
 8009556:	f7ff ffa5 	bl	80094a4 <sbrk_aligned>
 800955a:	3001      	adds	r0, #1
 800955c:	d02b      	beq.n	80095b6 <_malloc_r+0xd2>
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	442b      	add	r3, r5
 8009562:	6023      	str	r3, [r4, #0]
 8009564:	e00e      	b.n	8009584 <_malloc_r+0xa0>
 8009566:	6822      	ldr	r2, [r4, #0]
 8009568:	1b52      	subs	r2, r2, r5
 800956a:	d41e      	bmi.n	80095aa <_malloc_r+0xc6>
 800956c:	2a0b      	cmp	r2, #11
 800956e:	d916      	bls.n	800959e <_malloc_r+0xba>
 8009570:	1961      	adds	r1, r4, r5
 8009572:	42a3      	cmp	r3, r4
 8009574:	6025      	str	r5, [r4, #0]
 8009576:	bf18      	it	ne
 8009578:	6059      	strne	r1, [r3, #4]
 800957a:	6863      	ldr	r3, [r4, #4]
 800957c:	bf08      	it	eq
 800957e:	6031      	streq	r1, [r6, #0]
 8009580:	5162      	str	r2, [r4, r5]
 8009582:	604b      	str	r3, [r1, #4]
 8009584:	4638      	mov	r0, r7
 8009586:	f104 060b 	add.w	r6, r4, #11
 800958a:	f000 fa07 	bl	800999c <__malloc_unlock>
 800958e:	f026 0607 	bic.w	r6, r6, #7
 8009592:	1d23      	adds	r3, r4, #4
 8009594:	1af2      	subs	r2, r6, r3
 8009596:	d0b6      	beq.n	8009506 <_malloc_r+0x22>
 8009598:	1b9b      	subs	r3, r3, r6
 800959a:	50a3      	str	r3, [r4, r2]
 800959c:	e7b3      	b.n	8009506 <_malloc_r+0x22>
 800959e:	6862      	ldr	r2, [r4, #4]
 80095a0:	42a3      	cmp	r3, r4
 80095a2:	bf0c      	ite	eq
 80095a4:	6032      	streq	r2, [r6, #0]
 80095a6:	605a      	strne	r2, [r3, #4]
 80095a8:	e7ec      	b.n	8009584 <_malloc_r+0xa0>
 80095aa:	4623      	mov	r3, r4
 80095ac:	6864      	ldr	r4, [r4, #4]
 80095ae:	e7b2      	b.n	8009516 <_malloc_r+0x32>
 80095b0:	4634      	mov	r4, r6
 80095b2:	6876      	ldr	r6, [r6, #4]
 80095b4:	e7b9      	b.n	800952a <_malloc_r+0x46>
 80095b6:	230c      	movs	r3, #12
 80095b8:	603b      	str	r3, [r7, #0]
 80095ba:	4638      	mov	r0, r7
 80095bc:	f000 f9ee 	bl	800999c <__malloc_unlock>
 80095c0:	e7a1      	b.n	8009506 <_malloc_r+0x22>
 80095c2:	6025      	str	r5, [r4, #0]
 80095c4:	e7de      	b.n	8009584 <_malloc_r+0xa0>
 80095c6:	bf00      	nop
 80095c8:	2000032c 	.word	0x2000032c

080095cc <__ssputs_r>:
 80095cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d0:	688e      	ldr	r6, [r1, #8]
 80095d2:	429e      	cmp	r6, r3
 80095d4:	4682      	mov	sl, r0
 80095d6:	460c      	mov	r4, r1
 80095d8:	4690      	mov	r8, r2
 80095da:	461f      	mov	r7, r3
 80095dc:	d838      	bhi.n	8009650 <__ssputs_r+0x84>
 80095de:	898a      	ldrh	r2, [r1, #12]
 80095e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095e4:	d032      	beq.n	800964c <__ssputs_r+0x80>
 80095e6:	6825      	ldr	r5, [r4, #0]
 80095e8:	6909      	ldr	r1, [r1, #16]
 80095ea:	eba5 0901 	sub.w	r9, r5, r1
 80095ee:	6965      	ldr	r5, [r4, #20]
 80095f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095f8:	3301      	adds	r3, #1
 80095fa:	444b      	add	r3, r9
 80095fc:	106d      	asrs	r5, r5, #1
 80095fe:	429d      	cmp	r5, r3
 8009600:	bf38      	it	cc
 8009602:	461d      	movcc	r5, r3
 8009604:	0553      	lsls	r3, r2, #21
 8009606:	d531      	bpl.n	800966c <__ssputs_r+0xa0>
 8009608:	4629      	mov	r1, r5
 800960a:	f7ff ff6b 	bl	80094e4 <_malloc_r>
 800960e:	4606      	mov	r6, r0
 8009610:	b950      	cbnz	r0, 8009628 <__ssputs_r+0x5c>
 8009612:	230c      	movs	r3, #12
 8009614:	f8ca 3000 	str.w	r3, [sl]
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800961e:	81a3      	strh	r3, [r4, #12]
 8009620:	f04f 30ff 	mov.w	r0, #4294967295
 8009624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009628:	6921      	ldr	r1, [r4, #16]
 800962a:	464a      	mov	r2, r9
 800962c:	f7ff fa0c 	bl	8008a48 <memcpy>
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800963a:	81a3      	strh	r3, [r4, #12]
 800963c:	6126      	str	r6, [r4, #16]
 800963e:	6165      	str	r5, [r4, #20]
 8009640:	444e      	add	r6, r9
 8009642:	eba5 0509 	sub.w	r5, r5, r9
 8009646:	6026      	str	r6, [r4, #0]
 8009648:	60a5      	str	r5, [r4, #8]
 800964a:	463e      	mov	r6, r7
 800964c:	42be      	cmp	r6, r7
 800964e:	d900      	bls.n	8009652 <__ssputs_r+0x86>
 8009650:	463e      	mov	r6, r7
 8009652:	6820      	ldr	r0, [r4, #0]
 8009654:	4632      	mov	r2, r6
 8009656:	4641      	mov	r1, r8
 8009658:	f000 f980 	bl	800995c <memmove>
 800965c:	68a3      	ldr	r3, [r4, #8]
 800965e:	1b9b      	subs	r3, r3, r6
 8009660:	60a3      	str	r3, [r4, #8]
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	4433      	add	r3, r6
 8009666:	6023      	str	r3, [r4, #0]
 8009668:	2000      	movs	r0, #0
 800966a:	e7db      	b.n	8009624 <__ssputs_r+0x58>
 800966c:	462a      	mov	r2, r5
 800966e:	f000 f99b 	bl	80099a8 <_realloc_r>
 8009672:	4606      	mov	r6, r0
 8009674:	2800      	cmp	r0, #0
 8009676:	d1e1      	bne.n	800963c <__ssputs_r+0x70>
 8009678:	6921      	ldr	r1, [r4, #16]
 800967a:	4650      	mov	r0, sl
 800967c:	f7ff fec6 	bl	800940c <_free_r>
 8009680:	e7c7      	b.n	8009612 <__ssputs_r+0x46>
	...

08009684 <_svfiprintf_r>:
 8009684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009688:	4698      	mov	r8, r3
 800968a:	898b      	ldrh	r3, [r1, #12]
 800968c:	061b      	lsls	r3, r3, #24
 800968e:	b09d      	sub	sp, #116	; 0x74
 8009690:	4607      	mov	r7, r0
 8009692:	460d      	mov	r5, r1
 8009694:	4614      	mov	r4, r2
 8009696:	d50e      	bpl.n	80096b6 <_svfiprintf_r+0x32>
 8009698:	690b      	ldr	r3, [r1, #16]
 800969a:	b963      	cbnz	r3, 80096b6 <_svfiprintf_r+0x32>
 800969c:	2140      	movs	r1, #64	; 0x40
 800969e:	f7ff ff21 	bl	80094e4 <_malloc_r>
 80096a2:	6028      	str	r0, [r5, #0]
 80096a4:	6128      	str	r0, [r5, #16]
 80096a6:	b920      	cbnz	r0, 80096b2 <_svfiprintf_r+0x2e>
 80096a8:	230c      	movs	r3, #12
 80096aa:	603b      	str	r3, [r7, #0]
 80096ac:	f04f 30ff 	mov.w	r0, #4294967295
 80096b0:	e0d1      	b.n	8009856 <_svfiprintf_r+0x1d2>
 80096b2:	2340      	movs	r3, #64	; 0x40
 80096b4:	616b      	str	r3, [r5, #20]
 80096b6:	2300      	movs	r3, #0
 80096b8:	9309      	str	r3, [sp, #36]	; 0x24
 80096ba:	2320      	movs	r3, #32
 80096bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80096c4:	2330      	movs	r3, #48	; 0x30
 80096c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009870 <_svfiprintf_r+0x1ec>
 80096ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096ce:	f04f 0901 	mov.w	r9, #1
 80096d2:	4623      	mov	r3, r4
 80096d4:	469a      	mov	sl, r3
 80096d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096da:	b10a      	cbz	r2, 80096e0 <_svfiprintf_r+0x5c>
 80096dc:	2a25      	cmp	r2, #37	; 0x25
 80096de:	d1f9      	bne.n	80096d4 <_svfiprintf_r+0x50>
 80096e0:	ebba 0b04 	subs.w	fp, sl, r4
 80096e4:	d00b      	beq.n	80096fe <_svfiprintf_r+0x7a>
 80096e6:	465b      	mov	r3, fp
 80096e8:	4622      	mov	r2, r4
 80096ea:	4629      	mov	r1, r5
 80096ec:	4638      	mov	r0, r7
 80096ee:	f7ff ff6d 	bl	80095cc <__ssputs_r>
 80096f2:	3001      	adds	r0, #1
 80096f4:	f000 80aa 	beq.w	800984c <_svfiprintf_r+0x1c8>
 80096f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096fa:	445a      	add	r2, fp
 80096fc:	9209      	str	r2, [sp, #36]	; 0x24
 80096fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009702:	2b00      	cmp	r3, #0
 8009704:	f000 80a2 	beq.w	800984c <_svfiprintf_r+0x1c8>
 8009708:	2300      	movs	r3, #0
 800970a:	f04f 32ff 	mov.w	r2, #4294967295
 800970e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009712:	f10a 0a01 	add.w	sl, sl, #1
 8009716:	9304      	str	r3, [sp, #16]
 8009718:	9307      	str	r3, [sp, #28]
 800971a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800971e:	931a      	str	r3, [sp, #104]	; 0x68
 8009720:	4654      	mov	r4, sl
 8009722:	2205      	movs	r2, #5
 8009724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009728:	4851      	ldr	r0, [pc, #324]	; (8009870 <_svfiprintf_r+0x1ec>)
 800972a:	f7f6 fd91 	bl	8000250 <memchr>
 800972e:	9a04      	ldr	r2, [sp, #16]
 8009730:	b9d8      	cbnz	r0, 800976a <_svfiprintf_r+0xe6>
 8009732:	06d0      	lsls	r0, r2, #27
 8009734:	bf44      	itt	mi
 8009736:	2320      	movmi	r3, #32
 8009738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800973c:	0711      	lsls	r1, r2, #28
 800973e:	bf44      	itt	mi
 8009740:	232b      	movmi	r3, #43	; 0x2b
 8009742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009746:	f89a 3000 	ldrb.w	r3, [sl]
 800974a:	2b2a      	cmp	r3, #42	; 0x2a
 800974c:	d015      	beq.n	800977a <_svfiprintf_r+0xf6>
 800974e:	9a07      	ldr	r2, [sp, #28]
 8009750:	4654      	mov	r4, sl
 8009752:	2000      	movs	r0, #0
 8009754:	f04f 0c0a 	mov.w	ip, #10
 8009758:	4621      	mov	r1, r4
 800975a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800975e:	3b30      	subs	r3, #48	; 0x30
 8009760:	2b09      	cmp	r3, #9
 8009762:	d94e      	bls.n	8009802 <_svfiprintf_r+0x17e>
 8009764:	b1b0      	cbz	r0, 8009794 <_svfiprintf_r+0x110>
 8009766:	9207      	str	r2, [sp, #28]
 8009768:	e014      	b.n	8009794 <_svfiprintf_r+0x110>
 800976a:	eba0 0308 	sub.w	r3, r0, r8
 800976e:	fa09 f303 	lsl.w	r3, r9, r3
 8009772:	4313      	orrs	r3, r2
 8009774:	9304      	str	r3, [sp, #16]
 8009776:	46a2      	mov	sl, r4
 8009778:	e7d2      	b.n	8009720 <_svfiprintf_r+0x9c>
 800977a:	9b03      	ldr	r3, [sp, #12]
 800977c:	1d19      	adds	r1, r3, #4
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	9103      	str	r1, [sp, #12]
 8009782:	2b00      	cmp	r3, #0
 8009784:	bfbb      	ittet	lt
 8009786:	425b      	neglt	r3, r3
 8009788:	f042 0202 	orrlt.w	r2, r2, #2
 800978c:	9307      	strge	r3, [sp, #28]
 800978e:	9307      	strlt	r3, [sp, #28]
 8009790:	bfb8      	it	lt
 8009792:	9204      	strlt	r2, [sp, #16]
 8009794:	7823      	ldrb	r3, [r4, #0]
 8009796:	2b2e      	cmp	r3, #46	; 0x2e
 8009798:	d10c      	bne.n	80097b4 <_svfiprintf_r+0x130>
 800979a:	7863      	ldrb	r3, [r4, #1]
 800979c:	2b2a      	cmp	r3, #42	; 0x2a
 800979e:	d135      	bne.n	800980c <_svfiprintf_r+0x188>
 80097a0:	9b03      	ldr	r3, [sp, #12]
 80097a2:	1d1a      	adds	r2, r3, #4
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	9203      	str	r2, [sp, #12]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	bfb8      	it	lt
 80097ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80097b0:	3402      	adds	r4, #2
 80097b2:	9305      	str	r3, [sp, #20]
 80097b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009880 <_svfiprintf_r+0x1fc>
 80097b8:	7821      	ldrb	r1, [r4, #0]
 80097ba:	2203      	movs	r2, #3
 80097bc:	4650      	mov	r0, sl
 80097be:	f7f6 fd47 	bl	8000250 <memchr>
 80097c2:	b140      	cbz	r0, 80097d6 <_svfiprintf_r+0x152>
 80097c4:	2340      	movs	r3, #64	; 0x40
 80097c6:	eba0 000a 	sub.w	r0, r0, sl
 80097ca:	fa03 f000 	lsl.w	r0, r3, r0
 80097ce:	9b04      	ldr	r3, [sp, #16]
 80097d0:	4303      	orrs	r3, r0
 80097d2:	3401      	adds	r4, #1
 80097d4:	9304      	str	r3, [sp, #16]
 80097d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097da:	4826      	ldr	r0, [pc, #152]	; (8009874 <_svfiprintf_r+0x1f0>)
 80097dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097e0:	2206      	movs	r2, #6
 80097e2:	f7f6 fd35 	bl	8000250 <memchr>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d038      	beq.n	800985c <_svfiprintf_r+0x1d8>
 80097ea:	4b23      	ldr	r3, [pc, #140]	; (8009878 <_svfiprintf_r+0x1f4>)
 80097ec:	bb1b      	cbnz	r3, 8009836 <_svfiprintf_r+0x1b2>
 80097ee:	9b03      	ldr	r3, [sp, #12]
 80097f0:	3307      	adds	r3, #7
 80097f2:	f023 0307 	bic.w	r3, r3, #7
 80097f6:	3308      	adds	r3, #8
 80097f8:	9303      	str	r3, [sp, #12]
 80097fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097fc:	4433      	add	r3, r6
 80097fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009800:	e767      	b.n	80096d2 <_svfiprintf_r+0x4e>
 8009802:	fb0c 3202 	mla	r2, ip, r2, r3
 8009806:	460c      	mov	r4, r1
 8009808:	2001      	movs	r0, #1
 800980a:	e7a5      	b.n	8009758 <_svfiprintf_r+0xd4>
 800980c:	2300      	movs	r3, #0
 800980e:	3401      	adds	r4, #1
 8009810:	9305      	str	r3, [sp, #20]
 8009812:	4619      	mov	r1, r3
 8009814:	f04f 0c0a 	mov.w	ip, #10
 8009818:	4620      	mov	r0, r4
 800981a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800981e:	3a30      	subs	r2, #48	; 0x30
 8009820:	2a09      	cmp	r2, #9
 8009822:	d903      	bls.n	800982c <_svfiprintf_r+0x1a8>
 8009824:	2b00      	cmp	r3, #0
 8009826:	d0c5      	beq.n	80097b4 <_svfiprintf_r+0x130>
 8009828:	9105      	str	r1, [sp, #20]
 800982a:	e7c3      	b.n	80097b4 <_svfiprintf_r+0x130>
 800982c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009830:	4604      	mov	r4, r0
 8009832:	2301      	movs	r3, #1
 8009834:	e7f0      	b.n	8009818 <_svfiprintf_r+0x194>
 8009836:	ab03      	add	r3, sp, #12
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	462a      	mov	r2, r5
 800983c:	4b0f      	ldr	r3, [pc, #60]	; (800987c <_svfiprintf_r+0x1f8>)
 800983e:	a904      	add	r1, sp, #16
 8009840:	4638      	mov	r0, r7
 8009842:	f7fc fb41 	bl	8005ec8 <_printf_float>
 8009846:	1c42      	adds	r2, r0, #1
 8009848:	4606      	mov	r6, r0
 800984a:	d1d6      	bne.n	80097fa <_svfiprintf_r+0x176>
 800984c:	89ab      	ldrh	r3, [r5, #12]
 800984e:	065b      	lsls	r3, r3, #25
 8009850:	f53f af2c 	bmi.w	80096ac <_svfiprintf_r+0x28>
 8009854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009856:	b01d      	add	sp, #116	; 0x74
 8009858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985c:	ab03      	add	r3, sp, #12
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	462a      	mov	r2, r5
 8009862:	4b06      	ldr	r3, [pc, #24]	; (800987c <_svfiprintf_r+0x1f8>)
 8009864:	a904      	add	r1, sp, #16
 8009866:	4638      	mov	r0, r7
 8009868:	f7fc fdba 	bl	80063e0 <_printf_i>
 800986c:	e7eb      	b.n	8009846 <_svfiprintf_r+0x1c2>
 800986e:	bf00      	nop
 8009870:	0803035c 	.word	0x0803035c
 8009874:	08030366 	.word	0x08030366
 8009878:	08005ec9 	.word	0x08005ec9
 800987c:	080095cd 	.word	0x080095cd
 8009880:	08030362 	.word	0x08030362
 8009884:	00000000 	.word	0x00000000

08009888 <nan>:
 8009888:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009890 <nan+0x8>
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	00000000 	.word	0x00000000
 8009894:	7ff80000 	.word	0x7ff80000

08009898 <_sbrk_r>:
 8009898:	b538      	push	{r3, r4, r5, lr}
 800989a:	4d06      	ldr	r5, [pc, #24]	; (80098b4 <_sbrk_r+0x1c>)
 800989c:	2300      	movs	r3, #0
 800989e:	4604      	mov	r4, r0
 80098a0:	4608      	mov	r0, r1
 80098a2:	602b      	str	r3, [r5, #0]
 80098a4:	f7f9 f908 	bl	8002ab8 <_sbrk>
 80098a8:	1c43      	adds	r3, r0, #1
 80098aa:	d102      	bne.n	80098b2 <_sbrk_r+0x1a>
 80098ac:	682b      	ldr	r3, [r5, #0]
 80098ae:	b103      	cbz	r3, 80098b2 <_sbrk_r+0x1a>
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	bd38      	pop	{r3, r4, r5, pc}
 80098b4:	20000334 	.word	0x20000334

080098b8 <strncmp>:
 80098b8:	b510      	push	{r4, lr}
 80098ba:	b17a      	cbz	r2, 80098dc <strncmp+0x24>
 80098bc:	4603      	mov	r3, r0
 80098be:	3901      	subs	r1, #1
 80098c0:	1884      	adds	r4, r0, r2
 80098c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80098c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80098ca:	4290      	cmp	r0, r2
 80098cc:	d101      	bne.n	80098d2 <strncmp+0x1a>
 80098ce:	42a3      	cmp	r3, r4
 80098d0:	d101      	bne.n	80098d6 <strncmp+0x1e>
 80098d2:	1a80      	subs	r0, r0, r2
 80098d4:	bd10      	pop	{r4, pc}
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d1f3      	bne.n	80098c2 <strncmp+0xa>
 80098da:	e7fa      	b.n	80098d2 <strncmp+0x1a>
 80098dc:	4610      	mov	r0, r2
 80098de:	e7f9      	b.n	80098d4 <strncmp+0x1c>

080098e0 <__ascii_wctomb>:
 80098e0:	b149      	cbz	r1, 80098f6 <__ascii_wctomb+0x16>
 80098e2:	2aff      	cmp	r2, #255	; 0xff
 80098e4:	bf85      	ittet	hi
 80098e6:	238a      	movhi	r3, #138	; 0x8a
 80098e8:	6003      	strhi	r3, [r0, #0]
 80098ea:	700a      	strbls	r2, [r1, #0]
 80098ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80098f0:	bf98      	it	ls
 80098f2:	2001      	movls	r0, #1
 80098f4:	4770      	bx	lr
 80098f6:	4608      	mov	r0, r1
 80098f8:	4770      	bx	lr
	...

080098fc <__assert_func>:
 80098fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098fe:	4614      	mov	r4, r2
 8009900:	461a      	mov	r2, r3
 8009902:	4b09      	ldr	r3, [pc, #36]	; (8009928 <__assert_func+0x2c>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4605      	mov	r5, r0
 8009908:	68d8      	ldr	r0, [r3, #12]
 800990a:	b14c      	cbz	r4, 8009920 <__assert_func+0x24>
 800990c:	4b07      	ldr	r3, [pc, #28]	; (800992c <__assert_func+0x30>)
 800990e:	9100      	str	r1, [sp, #0]
 8009910:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009914:	4906      	ldr	r1, [pc, #24]	; (8009930 <__assert_func+0x34>)
 8009916:	462b      	mov	r3, r5
 8009918:	f000 f80e 	bl	8009938 <fiprintf>
 800991c:	f000 fa8c 	bl	8009e38 <abort>
 8009920:	4b04      	ldr	r3, [pc, #16]	; (8009934 <__assert_func+0x38>)
 8009922:	461c      	mov	r4, r3
 8009924:	e7f3      	b.n	800990e <__assert_func+0x12>
 8009926:	bf00      	nop
 8009928:	20000018 	.word	0x20000018
 800992c:	0803036d 	.word	0x0803036d
 8009930:	0803037a 	.word	0x0803037a
 8009934:	080303a8 	.word	0x080303a8

08009938 <fiprintf>:
 8009938:	b40e      	push	{r1, r2, r3}
 800993a:	b503      	push	{r0, r1, lr}
 800993c:	4601      	mov	r1, r0
 800993e:	ab03      	add	r3, sp, #12
 8009940:	4805      	ldr	r0, [pc, #20]	; (8009958 <fiprintf+0x20>)
 8009942:	f853 2b04 	ldr.w	r2, [r3], #4
 8009946:	6800      	ldr	r0, [r0, #0]
 8009948:	9301      	str	r3, [sp, #4]
 800994a:	f000 f885 	bl	8009a58 <_vfiprintf_r>
 800994e:	b002      	add	sp, #8
 8009950:	f85d eb04 	ldr.w	lr, [sp], #4
 8009954:	b003      	add	sp, #12
 8009956:	4770      	bx	lr
 8009958:	20000018 	.word	0x20000018

0800995c <memmove>:
 800995c:	4288      	cmp	r0, r1
 800995e:	b510      	push	{r4, lr}
 8009960:	eb01 0402 	add.w	r4, r1, r2
 8009964:	d902      	bls.n	800996c <memmove+0x10>
 8009966:	4284      	cmp	r4, r0
 8009968:	4623      	mov	r3, r4
 800996a:	d807      	bhi.n	800997c <memmove+0x20>
 800996c:	1e43      	subs	r3, r0, #1
 800996e:	42a1      	cmp	r1, r4
 8009970:	d008      	beq.n	8009984 <memmove+0x28>
 8009972:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009976:	f803 2f01 	strb.w	r2, [r3, #1]!
 800997a:	e7f8      	b.n	800996e <memmove+0x12>
 800997c:	4402      	add	r2, r0
 800997e:	4601      	mov	r1, r0
 8009980:	428a      	cmp	r2, r1
 8009982:	d100      	bne.n	8009986 <memmove+0x2a>
 8009984:	bd10      	pop	{r4, pc}
 8009986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800998a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800998e:	e7f7      	b.n	8009980 <memmove+0x24>

08009990 <__malloc_lock>:
 8009990:	4801      	ldr	r0, [pc, #4]	; (8009998 <__malloc_lock+0x8>)
 8009992:	f000 bc11 	b.w	800a1b8 <__retarget_lock_acquire_recursive>
 8009996:	bf00      	nop
 8009998:	20000338 	.word	0x20000338

0800999c <__malloc_unlock>:
 800999c:	4801      	ldr	r0, [pc, #4]	; (80099a4 <__malloc_unlock+0x8>)
 800999e:	f000 bc0c 	b.w	800a1ba <__retarget_lock_release_recursive>
 80099a2:	bf00      	nop
 80099a4:	20000338 	.word	0x20000338

080099a8 <_realloc_r>:
 80099a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ac:	4680      	mov	r8, r0
 80099ae:	4614      	mov	r4, r2
 80099b0:	460e      	mov	r6, r1
 80099b2:	b921      	cbnz	r1, 80099be <_realloc_r+0x16>
 80099b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099b8:	4611      	mov	r1, r2
 80099ba:	f7ff bd93 	b.w	80094e4 <_malloc_r>
 80099be:	b92a      	cbnz	r2, 80099cc <_realloc_r+0x24>
 80099c0:	f7ff fd24 	bl	800940c <_free_r>
 80099c4:	4625      	mov	r5, r4
 80099c6:	4628      	mov	r0, r5
 80099c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099cc:	f000 fc5c 	bl	800a288 <_malloc_usable_size_r>
 80099d0:	4284      	cmp	r4, r0
 80099d2:	4607      	mov	r7, r0
 80099d4:	d802      	bhi.n	80099dc <_realloc_r+0x34>
 80099d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099da:	d812      	bhi.n	8009a02 <_realloc_r+0x5a>
 80099dc:	4621      	mov	r1, r4
 80099de:	4640      	mov	r0, r8
 80099e0:	f7ff fd80 	bl	80094e4 <_malloc_r>
 80099e4:	4605      	mov	r5, r0
 80099e6:	2800      	cmp	r0, #0
 80099e8:	d0ed      	beq.n	80099c6 <_realloc_r+0x1e>
 80099ea:	42bc      	cmp	r4, r7
 80099ec:	4622      	mov	r2, r4
 80099ee:	4631      	mov	r1, r6
 80099f0:	bf28      	it	cs
 80099f2:	463a      	movcs	r2, r7
 80099f4:	f7ff f828 	bl	8008a48 <memcpy>
 80099f8:	4631      	mov	r1, r6
 80099fa:	4640      	mov	r0, r8
 80099fc:	f7ff fd06 	bl	800940c <_free_r>
 8009a00:	e7e1      	b.n	80099c6 <_realloc_r+0x1e>
 8009a02:	4635      	mov	r5, r6
 8009a04:	e7df      	b.n	80099c6 <_realloc_r+0x1e>

08009a06 <__sfputc_r>:
 8009a06:	6893      	ldr	r3, [r2, #8]
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	b410      	push	{r4}
 8009a0e:	6093      	str	r3, [r2, #8]
 8009a10:	da08      	bge.n	8009a24 <__sfputc_r+0x1e>
 8009a12:	6994      	ldr	r4, [r2, #24]
 8009a14:	42a3      	cmp	r3, r4
 8009a16:	db01      	blt.n	8009a1c <__sfputc_r+0x16>
 8009a18:	290a      	cmp	r1, #10
 8009a1a:	d103      	bne.n	8009a24 <__sfputc_r+0x1e>
 8009a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a20:	f000 b94a 	b.w	8009cb8 <__swbuf_r>
 8009a24:	6813      	ldr	r3, [r2, #0]
 8009a26:	1c58      	adds	r0, r3, #1
 8009a28:	6010      	str	r0, [r2, #0]
 8009a2a:	7019      	strb	r1, [r3, #0]
 8009a2c:	4608      	mov	r0, r1
 8009a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <__sfputs_r>:
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	4606      	mov	r6, r0
 8009a38:	460f      	mov	r7, r1
 8009a3a:	4614      	mov	r4, r2
 8009a3c:	18d5      	adds	r5, r2, r3
 8009a3e:	42ac      	cmp	r4, r5
 8009a40:	d101      	bne.n	8009a46 <__sfputs_r+0x12>
 8009a42:	2000      	movs	r0, #0
 8009a44:	e007      	b.n	8009a56 <__sfputs_r+0x22>
 8009a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a4a:	463a      	mov	r2, r7
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f7ff ffda 	bl	8009a06 <__sfputc_r>
 8009a52:	1c43      	adds	r3, r0, #1
 8009a54:	d1f3      	bne.n	8009a3e <__sfputs_r+0xa>
 8009a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a58 <_vfiprintf_r>:
 8009a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	460d      	mov	r5, r1
 8009a5e:	b09d      	sub	sp, #116	; 0x74
 8009a60:	4614      	mov	r4, r2
 8009a62:	4698      	mov	r8, r3
 8009a64:	4606      	mov	r6, r0
 8009a66:	b118      	cbz	r0, 8009a70 <_vfiprintf_r+0x18>
 8009a68:	6983      	ldr	r3, [r0, #24]
 8009a6a:	b90b      	cbnz	r3, 8009a70 <_vfiprintf_r+0x18>
 8009a6c:	f000 fb06 	bl	800a07c <__sinit>
 8009a70:	4b89      	ldr	r3, [pc, #548]	; (8009c98 <_vfiprintf_r+0x240>)
 8009a72:	429d      	cmp	r5, r3
 8009a74:	d11b      	bne.n	8009aae <_vfiprintf_r+0x56>
 8009a76:	6875      	ldr	r5, [r6, #4]
 8009a78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a7a:	07d9      	lsls	r1, r3, #31
 8009a7c:	d405      	bmi.n	8009a8a <_vfiprintf_r+0x32>
 8009a7e:	89ab      	ldrh	r3, [r5, #12]
 8009a80:	059a      	lsls	r2, r3, #22
 8009a82:	d402      	bmi.n	8009a8a <_vfiprintf_r+0x32>
 8009a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a86:	f000 fb97 	bl	800a1b8 <__retarget_lock_acquire_recursive>
 8009a8a:	89ab      	ldrh	r3, [r5, #12]
 8009a8c:	071b      	lsls	r3, r3, #28
 8009a8e:	d501      	bpl.n	8009a94 <_vfiprintf_r+0x3c>
 8009a90:	692b      	ldr	r3, [r5, #16]
 8009a92:	b9eb      	cbnz	r3, 8009ad0 <_vfiprintf_r+0x78>
 8009a94:	4629      	mov	r1, r5
 8009a96:	4630      	mov	r0, r6
 8009a98:	f000 f960 	bl	8009d5c <__swsetup_r>
 8009a9c:	b1c0      	cbz	r0, 8009ad0 <_vfiprintf_r+0x78>
 8009a9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009aa0:	07dc      	lsls	r4, r3, #31
 8009aa2:	d50e      	bpl.n	8009ac2 <_vfiprintf_r+0x6a>
 8009aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa8:	b01d      	add	sp, #116	; 0x74
 8009aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aae:	4b7b      	ldr	r3, [pc, #492]	; (8009c9c <_vfiprintf_r+0x244>)
 8009ab0:	429d      	cmp	r5, r3
 8009ab2:	d101      	bne.n	8009ab8 <_vfiprintf_r+0x60>
 8009ab4:	68b5      	ldr	r5, [r6, #8]
 8009ab6:	e7df      	b.n	8009a78 <_vfiprintf_r+0x20>
 8009ab8:	4b79      	ldr	r3, [pc, #484]	; (8009ca0 <_vfiprintf_r+0x248>)
 8009aba:	429d      	cmp	r5, r3
 8009abc:	bf08      	it	eq
 8009abe:	68f5      	ldreq	r5, [r6, #12]
 8009ac0:	e7da      	b.n	8009a78 <_vfiprintf_r+0x20>
 8009ac2:	89ab      	ldrh	r3, [r5, #12]
 8009ac4:	0598      	lsls	r0, r3, #22
 8009ac6:	d4ed      	bmi.n	8009aa4 <_vfiprintf_r+0x4c>
 8009ac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aca:	f000 fb76 	bl	800a1ba <__retarget_lock_release_recursive>
 8009ace:	e7e9      	b.n	8009aa4 <_vfiprintf_r+0x4c>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad4:	2320      	movs	r3, #32
 8009ad6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ada:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ade:	2330      	movs	r3, #48	; 0x30
 8009ae0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ca4 <_vfiprintf_r+0x24c>
 8009ae4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ae8:	f04f 0901 	mov.w	r9, #1
 8009aec:	4623      	mov	r3, r4
 8009aee:	469a      	mov	sl, r3
 8009af0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009af4:	b10a      	cbz	r2, 8009afa <_vfiprintf_r+0xa2>
 8009af6:	2a25      	cmp	r2, #37	; 0x25
 8009af8:	d1f9      	bne.n	8009aee <_vfiprintf_r+0x96>
 8009afa:	ebba 0b04 	subs.w	fp, sl, r4
 8009afe:	d00b      	beq.n	8009b18 <_vfiprintf_r+0xc0>
 8009b00:	465b      	mov	r3, fp
 8009b02:	4622      	mov	r2, r4
 8009b04:	4629      	mov	r1, r5
 8009b06:	4630      	mov	r0, r6
 8009b08:	f7ff ff94 	bl	8009a34 <__sfputs_r>
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	f000 80aa 	beq.w	8009c66 <_vfiprintf_r+0x20e>
 8009b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b14:	445a      	add	r2, fp
 8009b16:	9209      	str	r2, [sp, #36]	; 0x24
 8009b18:	f89a 3000 	ldrb.w	r3, [sl]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f000 80a2 	beq.w	8009c66 <_vfiprintf_r+0x20e>
 8009b22:	2300      	movs	r3, #0
 8009b24:	f04f 32ff 	mov.w	r2, #4294967295
 8009b28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b2c:	f10a 0a01 	add.w	sl, sl, #1
 8009b30:	9304      	str	r3, [sp, #16]
 8009b32:	9307      	str	r3, [sp, #28]
 8009b34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b38:	931a      	str	r3, [sp, #104]	; 0x68
 8009b3a:	4654      	mov	r4, sl
 8009b3c:	2205      	movs	r2, #5
 8009b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b42:	4858      	ldr	r0, [pc, #352]	; (8009ca4 <_vfiprintf_r+0x24c>)
 8009b44:	f7f6 fb84 	bl	8000250 <memchr>
 8009b48:	9a04      	ldr	r2, [sp, #16]
 8009b4a:	b9d8      	cbnz	r0, 8009b84 <_vfiprintf_r+0x12c>
 8009b4c:	06d1      	lsls	r1, r2, #27
 8009b4e:	bf44      	itt	mi
 8009b50:	2320      	movmi	r3, #32
 8009b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b56:	0713      	lsls	r3, r2, #28
 8009b58:	bf44      	itt	mi
 8009b5a:	232b      	movmi	r3, #43	; 0x2b
 8009b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b60:	f89a 3000 	ldrb.w	r3, [sl]
 8009b64:	2b2a      	cmp	r3, #42	; 0x2a
 8009b66:	d015      	beq.n	8009b94 <_vfiprintf_r+0x13c>
 8009b68:	9a07      	ldr	r2, [sp, #28]
 8009b6a:	4654      	mov	r4, sl
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	f04f 0c0a 	mov.w	ip, #10
 8009b72:	4621      	mov	r1, r4
 8009b74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b78:	3b30      	subs	r3, #48	; 0x30
 8009b7a:	2b09      	cmp	r3, #9
 8009b7c:	d94e      	bls.n	8009c1c <_vfiprintf_r+0x1c4>
 8009b7e:	b1b0      	cbz	r0, 8009bae <_vfiprintf_r+0x156>
 8009b80:	9207      	str	r2, [sp, #28]
 8009b82:	e014      	b.n	8009bae <_vfiprintf_r+0x156>
 8009b84:	eba0 0308 	sub.w	r3, r0, r8
 8009b88:	fa09 f303 	lsl.w	r3, r9, r3
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	9304      	str	r3, [sp, #16]
 8009b90:	46a2      	mov	sl, r4
 8009b92:	e7d2      	b.n	8009b3a <_vfiprintf_r+0xe2>
 8009b94:	9b03      	ldr	r3, [sp, #12]
 8009b96:	1d19      	adds	r1, r3, #4
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	9103      	str	r1, [sp, #12]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	bfbb      	ittet	lt
 8009ba0:	425b      	neglt	r3, r3
 8009ba2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ba6:	9307      	strge	r3, [sp, #28]
 8009ba8:	9307      	strlt	r3, [sp, #28]
 8009baa:	bfb8      	it	lt
 8009bac:	9204      	strlt	r2, [sp, #16]
 8009bae:	7823      	ldrb	r3, [r4, #0]
 8009bb0:	2b2e      	cmp	r3, #46	; 0x2e
 8009bb2:	d10c      	bne.n	8009bce <_vfiprintf_r+0x176>
 8009bb4:	7863      	ldrb	r3, [r4, #1]
 8009bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8009bb8:	d135      	bne.n	8009c26 <_vfiprintf_r+0x1ce>
 8009bba:	9b03      	ldr	r3, [sp, #12]
 8009bbc:	1d1a      	adds	r2, r3, #4
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	9203      	str	r2, [sp, #12]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	bfb8      	it	lt
 8009bc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bca:	3402      	adds	r4, #2
 8009bcc:	9305      	str	r3, [sp, #20]
 8009bce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009cb4 <_vfiprintf_r+0x25c>
 8009bd2:	7821      	ldrb	r1, [r4, #0]
 8009bd4:	2203      	movs	r2, #3
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	f7f6 fb3a 	bl	8000250 <memchr>
 8009bdc:	b140      	cbz	r0, 8009bf0 <_vfiprintf_r+0x198>
 8009bde:	2340      	movs	r3, #64	; 0x40
 8009be0:	eba0 000a 	sub.w	r0, r0, sl
 8009be4:	fa03 f000 	lsl.w	r0, r3, r0
 8009be8:	9b04      	ldr	r3, [sp, #16]
 8009bea:	4303      	orrs	r3, r0
 8009bec:	3401      	adds	r4, #1
 8009bee:	9304      	str	r3, [sp, #16]
 8009bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bf4:	482c      	ldr	r0, [pc, #176]	; (8009ca8 <_vfiprintf_r+0x250>)
 8009bf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bfa:	2206      	movs	r2, #6
 8009bfc:	f7f6 fb28 	bl	8000250 <memchr>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d03f      	beq.n	8009c84 <_vfiprintf_r+0x22c>
 8009c04:	4b29      	ldr	r3, [pc, #164]	; (8009cac <_vfiprintf_r+0x254>)
 8009c06:	bb1b      	cbnz	r3, 8009c50 <_vfiprintf_r+0x1f8>
 8009c08:	9b03      	ldr	r3, [sp, #12]
 8009c0a:	3307      	adds	r3, #7
 8009c0c:	f023 0307 	bic.w	r3, r3, #7
 8009c10:	3308      	adds	r3, #8
 8009c12:	9303      	str	r3, [sp, #12]
 8009c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c16:	443b      	add	r3, r7
 8009c18:	9309      	str	r3, [sp, #36]	; 0x24
 8009c1a:	e767      	b.n	8009aec <_vfiprintf_r+0x94>
 8009c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c20:	460c      	mov	r4, r1
 8009c22:	2001      	movs	r0, #1
 8009c24:	e7a5      	b.n	8009b72 <_vfiprintf_r+0x11a>
 8009c26:	2300      	movs	r3, #0
 8009c28:	3401      	adds	r4, #1
 8009c2a:	9305      	str	r3, [sp, #20]
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	f04f 0c0a 	mov.w	ip, #10
 8009c32:	4620      	mov	r0, r4
 8009c34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c38:	3a30      	subs	r2, #48	; 0x30
 8009c3a:	2a09      	cmp	r2, #9
 8009c3c:	d903      	bls.n	8009c46 <_vfiprintf_r+0x1ee>
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d0c5      	beq.n	8009bce <_vfiprintf_r+0x176>
 8009c42:	9105      	str	r1, [sp, #20]
 8009c44:	e7c3      	b.n	8009bce <_vfiprintf_r+0x176>
 8009c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e7f0      	b.n	8009c32 <_vfiprintf_r+0x1da>
 8009c50:	ab03      	add	r3, sp, #12
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	462a      	mov	r2, r5
 8009c56:	4b16      	ldr	r3, [pc, #88]	; (8009cb0 <_vfiprintf_r+0x258>)
 8009c58:	a904      	add	r1, sp, #16
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f7fc f934 	bl	8005ec8 <_printf_float>
 8009c60:	4607      	mov	r7, r0
 8009c62:	1c78      	adds	r0, r7, #1
 8009c64:	d1d6      	bne.n	8009c14 <_vfiprintf_r+0x1bc>
 8009c66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c68:	07d9      	lsls	r1, r3, #31
 8009c6a:	d405      	bmi.n	8009c78 <_vfiprintf_r+0x220>
 8009c6c:	89ab      	ldrh	r3, [r5, #12]
 8009c6e:	059a      	lsls	r2, r3, #22
 8009c70:	d402      	bmi.n	8009c78 <_vfiprintf_r+0x220>
 8009c72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c74:	f000 faa1 	bl	800a1ba <__retarget_lock_release_recursive>
 8009c78:	89ab      	ldrh	r3, [r5, #12]
 8009c7a:	065b      	lsls	r3, r3, #25
 8009c7c:	f53f af12 	bmi.w	8009aa4 <_vfiprintf_r+0x4c>
 8009c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c82:	e711      	b.n	8009aa8 <_vfiprintf_r+0x50>
 8009c84:	ab03      	add	r3, sp, #12
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	462a      	mov	r2, r5
 8009c8a:	4b09      	ldr	r3, [pc, #36]	; (8009cb0 <_vfiprintf_r+0x258>)
 8009c8c:	a904      	add	r1, sp, #16
 8009c8e:	4630      	mov	r0, r6
 8009c90:	f7fc fba6 	bl	80063e0 <_printf_i>
 8009c94:	e7e4      	b.n	8009c60 <_vfiprintf_r+0x208>
 8009c96:	bf00      	nop
 8009c98:	080303cc 	.word	0x080303cc
 8009c9c:	080303ec 	.word	0x080303ec
 8009ca0:	080303ac 	.word	0x080303ac
 8009ca4:	0803035c 	.word	0x0803035c
 8009ca8:	08030366 	.word	0x08030366
 8009cac:	08005ec9 	.word	0x08005ec9
 8009cb0:	08009a35 	.word	0x08009a35
 8009cb4:	08030362 	.word	0x08030362

08009cb8 <__swbuf_r>:
 8009cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cba:	460e      	mov	r6, r1
 8009cbc:	4614      	mov	r4, r2
 8009cbe:	4605      	mov	r5, r0
 8009cc0:	b118      	cbz	r0, 8009cca <__swbuf_r+0x12>
 8009cc2:	6983      	ldr	r3, [r0, #24]
 8009cc4:	b90b      	cbnz	r3, 8009cca <__swbuf_r+0x12>
 8009cc6:	f000 f9d9 	bl	800a07c <__sinit>
 8009cca:	4b21      	ldr	r3, [pc, #132]	; (8009d50 <__swbuf_r+0x98>)
 8009ccc:	429c      	cmp	r4, r3
 8009cce:	d12b      	bne.n	8009d28 <__swbuf_r+0x70>
 8009cd0:	686c      	ldr	r4, [r5, #4]
 8009cd2:	69a3      	ldr	r3, [r4, #24]
 8009cd4:	60a3      	str	r3, [r4, #8]
 8009cd6:	89a3      	ldrh	r3, [r4, #12]
 8009cd8:	071a      	lsls	r2, r3, #28
 8009cda:	d52f      	bpl.n	8009d3c <__swbuf_r+0x84>
 8009cdc:	6923      	ldr	r3, [r4, #16]
 8009cde:	b36b      	cbz	r3, 8009d3c <__swbuf_r+0x84>
 8009ce0:	6923      	ldr	r3, [r4, #16]
 8009ce2:	6820      	ldr	r0, [r4, #0]
 8009ce4:	1ac0      	subs	r0, r0, r3
 8009ce6:	6963      	ldr	r3, [r4, #20]
 8009ce8:	b2f6      	uxtb	r6, r6
 8009cea:	4283      	cmp	r3, r0
 8009cec:	4637      	mov	r7, r6
 8009cee:	dc04      	bgt.n	8009cfa <__swbuf_r+0x42>
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	f000 f92e 	bl	8009f54 <_fflush_r>
 8009cf8:	bb30      	cbnz	r0, 8009d48 <__swbuf_r+0x90>
 8009cfa:	68a3      	ldr	r3, [r4, #8]
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	60a3      	str	r3, [r4, #8]
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	1c5a      	adds	r2, r3, #1
 8009d04:	6022      	str	r2, [r4, #0]
 8009d06:	701e      	strb	r6, [r3, #0]
 8009d08:	6963      	ldr	r3, [r4, #20]
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	4283      	cmp	r3, r0
 8009d0e:	d004      	beq.n	8009d1a <__swbuf_r+0x62>
 8009d10:	89a3      	ldrh	r3, [r4, #12]
 8009d12:	07db      	lsls	r3, r3, #31
 8009d14:	d506      	bpl.n	8009d24 <__swbuf_r+0x6c>
 8009d16:	2e0a      	cmp	r6, #10
 8009d18:	d104      	bne.n	8009d24 <__swbuf_r+0x6c>
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	f000 f919 	bl	8009f54 <_fflush_r>
 8009d22:	b988      	cbnz	r0, 8009d48 <__swbuf_r+0x90>
 8009d24:	4638      	mov	r0, r7
 8009d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d28:	4b0a      	ldr	r3, [pc, #40]	; (8009d54 <__swbuf_r+0x9c>)
 8009d2a:	429c      	cmp	r4, r3
 8009d2c:	d101      	bne.n	8009d32 <__swbuf_r+0x7a>
 8009d2e:	68ac      	ldr	r4, [r5, #8]
 8009d30:	e7cf      	b.n	8009cd2 <__swbuf_r+0x1a>
 8009d32:	4b09      	ldr	r3, [pc, #36]	; (8009d58 <__swbuf_r+0xa0>)
 8009d34:	429c      	cmp	r4, r3
 8009d36:	bf08      	it	eq
 8009d38:	68ec      	ldreq	r4, [r5, #12]
 8009d3a:	e7ca      	b.n	8009cd2 <__swbuf_r+0x1a>
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f000 f80c 	bl	8009d5c <__swsetup_r>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d0cb      	beq.n	8009ce0 <__swbuf_r+0x28>
 8009d48:	f04f 37ff 	mov.w	r7, #4294967295
 8009d4c:	e7ea      	b.n	8009d24 <__swbuf_r+0x6c>
 8009d4e:	bf00      	nop
 8009d50:	080303cc 	.word	0x080303cc
 8009d54:	080303ec 	.word	0x080303ec
 8009d58:	080303ac 	.word	0x080303ac

08009d5c <__swsetup_r>:
 8009d5c:	4b32      	ldr	r3, [pc, #200]	; (8009e28 <__swsetup_r+0xcc>)
 8009d5e:	b570      	push	{r4, r5, r6, lr}
 8009d60:	681d      	ldr	r5, [r3, #0]
 8009d62:	4606      	mov	r6, r0
 8009d64:	460c      	mov	r4, r1
 8009d66:	b125      	cbz	r5, 8009d72 <__swsetup_r+0x16>
 8009d68:	69ab      	ldr	r3, [r5, #24]
 8009d6a:	b913      	cbnz	r3, 8009d72 <__swsetup_r+0x16>
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	f000 f985 	bl	800a07c <__sinit>
 8009d72:	4b2e      	ldr	r3, [pc, #184]	; (8009e2c <__swsetup_r+0xd0>)
 8009d74:	429c      	cmp	r4, r3
 8009d76:	d10f      	bne.n	8009d98 <__swsetup_r+0x3c>
 8009d78:	686c      	ldr	r4, [r5, #4]
 8009d7a:	89a3      	ldrh	r3, [r4, #12]
 8009d7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d80:	0719      	lsls	r1, r3, #28
 8009d82:	d42c      	bmi.n	8009dde <__swsetup_r+0x82>
 8009d84:	06dd      	lsls	r5, r3, #27
 8009d86:	d411      	bmi.n	8009dac <__swsetup_r+0x50>
 8009d88:	2309      	movs	r3, #9
 8009d8a:	6033      	str	r3, [r6, #0]
 8009d8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d90:	81a3      	strh	r3, [r4, #12]
 8009d92:	f04f 30ff 	mov.w	r0, #4294967295
 8009d96:	e03e      	b.n	8009e16 <__swsetup_r+0xba>
 8009d98:	4b25      	ldr	r3, [pc, #148]	; (8009e30 <__swsetup_r+0xd4>)
 8009d9a:	429c      	cmp	r4, r3
 8009d9c:	d101      	bne.n	8009da2 <__swsetup_r+0x46>
 8009d9e:	68ac      	ldr	r4, [r5, #8]
 8009da0:	e7eb      	b.n	8009d7a <__swsetup_r+0x1e>
 8009da2:	4b24      	ldr	r3, [pc, #144]	; (8009e34 <__swsetup_r+0xd8>)
 8009da4:	429c      	cmp	r4, r3
 8009da6:	bf08      	it	eq
 8009da8:	68ec      	ldreq	r4, [r5, #12]
 8009daa:	e7e6      	b.n	8009d7a <__swsetup_r+0x1e>
 8009dac:	0758      	lsls	r0, r3, #29
 8009dae:	d512      	bpl.n	8009dd6 <__swsetup_r+0x7a>
 8009db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009db2:	b141      	cbz	r1, 8009dc6 <__swsetup_r+0x6a>
 8009db4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009db8:	4299      	cmp	r1, r3
 8009dba:	d002      	beq.n	8009dc2 <__swsetup_r+0x66>
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	f7ff fb25 	bl	800940c <_free_r>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	6363      	str	r3, [r4, #52]	; 0x34
 8009dc6:	89a3      	ldrh	r3, [r4, #12]
 8009dc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dcc:	81a3      	strh	r3, [r4, #12]
 8009dce:	2300      	movs	r3, #0
 8009dd0:	6063      	str	r3, [r4, #4]
 8009dd2:	6923      	ldr	r3, [r4, #16]
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	89a3      	ldrh	r3, [r4, #12]
 8009dd8:	f043 0308 	orr.w	r3, r3, #8
 8009ddc:	81a3      	strh	r3, [r4, #12]
 8009dde:	6923      	ldr	r3, [r4, #16]
 8009de0:	b94b      	cbnz	r3, 8009df6 <__swsetup_r+0x9a>
 8009de2:	89a3      	ldrh	r3, [r4, #12]
 8009de4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dec:	d003      	beq.n	8009df6 <__swsetup_r+0x9a>
 8009dee:	4621      	mov	r1, r4
 8009df0:	4630      	mov	r0, r6
 8009df2:	f000 fa09 	bl	800a208 <__smakebuf_r>
 8009df6:	89a0      	ldrh	r0, [r4, #12]
 8009df8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dfc:	f010 0301 	ands.w	r3, r0, #1
 8009e00:	d00a      	beq.n	8009e18 <__swsetup_r+0xbc>
 8009e02:	2300      	movs	r3, #0
 8009e04:	60a3      	str	r3, [r4, #8]
 8009e06:	6963      	ldr	r3, [r4, #20]
 8009e08:	425b      	negs	r3, r3
 8009e0a:	61a3      	str	r3, [r4, #24]
 8009e0c:	6923      	ldr	r3, [r4, #16]
 8009e0e:	b943      	cbnz	r3, 8009e22 <__swsetup_r+0xc6>
 8009e10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e14:	d1ba      	bne.n	8009d8c <__swsetup_r+0x30>
 8009e16:	bd70      	pop	{r4, r5, r6, pc}
 8009e18:	0781      	lsls	r1, r0, #30
 8009e1a:	bf58      	it	pl
 8009e1c:	6963      	ldrpl	r3, [r4, #20]
 8009e1e:	60a3      	str	r3, [r4, #8]
 8009e20:	e7f4      	b.n	8009e0c <__swsetup_r+0xb0>
 8009e22:	2000      	movs	r0, #0
 8009e24:	e7f7      	b.n	8009e16 <__swsetup_r+0xba>
 8009e26:	bf00      	nop
 8009e28:	20000018 	.word	0x20000018
 8009e2c:	080303cc 	.word	0x080303cc
 8009e30:	080303ec 	.word	0x080303ec
 8009e34:	080303ac 	.word	0x080303ac

08009e38 <abort>:
 8009e38:	b508      	push	{r3, lr}
 8009e3a:	2006      	movs	r0, #6
 8009e3c:	f000 fa54 	bl	800a2e8 <raise>
 8009e40:	2001      	movs	r0, #1
 8009e42:	f7f8 fdc1 	bl	80029c8 <_exit>
	...

08009e48 <__sflush_r>:
 8009e48:	898a      	ldrh	r2, [r1, #12]
 8009e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4e:	4605      	mov	r5, r0
 8009e50:	0710      	lsls	r0, r2, #28
 8009e52:	460c      	mov	r4, r1
 8009e54:	d458      	bmi.n	8009f08 <__sflush_r+0xc0>
 8009e56:	684b      	ldr	r3, [r1, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	dc05      	bgt.n	8009e68 <__sflush_r+0x20>
 8009e5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	dc02      	bgt.n	8009e68 <__sflush_r+0x20>
 8009e62:	2000      	movs	r0, #0
 8009e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e6a:	2e00      	cmp	r6, #0
 8009e6c:	d0f9      	beq.n	8009e62 <__sflush_r+0x1a>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e74:	682f      	ldr	r7, [r5, #0]
 8009e76:	602b      	str	r3, [r5, #0]
 8009e78:	d032      	beq.n	8009ee0 <__sflush_r+0x98>
 8009e7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	075a      	lsls	r2, r3, #29
 8009e80:	d505      	bpl.n	8009e8e <__sflush_r+0x46>
 8009e82:	6863      	ldr	r3, [r4, #4]
 8009e84:	1ac0      	subs	r0, r0, r3
 8009e86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e88:	b10b      	cbz	r3, 8009e8e <__sflush_r+0x46>
 8009e8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e8c:	1ac0      	subs	r0, r0, r3
 8009e8e:	2300      	movs	r3, #0
 8009e90:	4602      	mov	r2, r0
 8009e92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e94:	6a21      	ldr	r1, [r4, #32]
 8009e96:	4628      	mov	r0, r5
 8009e98:	47b0      	blx	r6
 8009e9a:	1c43      	adds	r3, r0, #1
 8009e9c:	89a3      	ldrh	r3, [r4, #12]
 8009e9e:	d106      	bne.n	8009eae <__sflush_r+0x66>
 8009ea0:	6829      	ldr	r1, [r5, #0]
 8009ea2:	291d      	cmp	r1, #29
 8009ea4:	d82c      	bhi.n	8009f00 <__sflush_r+0xb8>
 8009ea6:	4a2a      	ldr	r2, [pc, #168]	; (8009f50 <__sflush_r+0x108>)
 8009ea8:	40ca      	lsrs	r2, r1
 8009eaa:	07d6      	lsls	r6, r2, #31
 8009eac:	d528      	bpl.n	8009f00 <__sflush_r+0xb8>
 8009eae:	2200      	movs	r2, #0
 8009eb0:	6062      	str	r2, [r4, #4]
 8009eb2:	04d9      	lsls	r1, r3, #19
 8009eb4:	6922      	ldr	r2, [r4, #16]
 8009eb6:	6022      	str	r2, [r4, #0]
 8009eb8:	d504      	bpl.n	8009ec4 <__sflush_r+0x7c>
 8009eba:	1c42      	adds	r2, r0, #1
 8009ebc:	d101      	bne.n	8009ec2 <__sflush_r+0x7a>
 8009ebe:	682b      	ldr	r3, [r5, #0]
 8009ec0:	b903      	cbnz	r3, 8009ec4 <__sflush_r+0x7c>
 8009ec2:	6560      	str	r0, [r4, #84]	; 0x54
 8009ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ec6:	602f      	str	r7, [r5, #0]
 8009ec8:	2900      	cmp	r1, #0
 8009eca:	d0ca      	beq.n	8009e62 <__sflush_r+0x1a>
 8009ecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ed0:	4299      	cmp	r1, r3
 8009ed2:	d002      	beq.n	8009eda <__sflush_r+0x92>
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	f7ff fa99 	bl	800940c <_free_r>
 8009eda:	2000      	movs	r0, #0
 8009edc:	6360      	str	r0, [r4, #52]	; 0x34
 8009ede:	e7c1      	b.n	8009e64 <__sflush_r+0x1c>
 8009ee0:	6a21      	ldr	r1, [r4, #32]
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	47b0      	blx	r6
 8009ee8:	1c41      	adds	r1, r0, #1
 8009eea:	d1c7      	bne.n	8009e7c <__sflush_r+0x34>
 8009eec:	682b      	ldr	r3, [r5, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d0c4      	beq.n	8009e7c <__sflush_r+0x34>
 8009ef2:	2b1d      	cmp	r3, #29
 8009ef4:	d001      	beq.n	8009efa <__sflush_r+0xb2>
 8009ef6:	2b16      	cmp	r3, #22
 8009ef8:	d101      	bne.n	8009efe <__sflush_r+0xb6>
 8009efa:	602f      	str	r7, [r5, #0]
 8009efc:	e7b1      	b.n	8009e62 <__sflush_r+0x1a>
 8009efe:	89a3      	ldrh	r3, [r4, #12]
 8009f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f04:	81a3      	strh	r3, [r4, #12]
 8009f06:	e7ad      	b.n	8009e64 <__sflush_r+0x1c>
 8009f08:	690f      	ldr	r7, [r1, #16]
 8009f0a:	2f00      	cmp	r7, #0
 8009f0c:	d0a9      	beq.n	8009e62 <__sflush_r+0x1a>
 8009f0e:	0793      	lsls	r3, r2, #30
 8009f10:	680e      	ldr	r6, [r1, #0]
 8009f12:	bf08      	it	eq
 8009f14:	694b      	ldreq	r3, [r1, #20]
 8009f16:	600f      	str	r7, [r1, #0]
 8009f18:	bf18      	it	ne
 8009f1a:	2300      	movne	r3, #0
 8009f1c:	eba6 0807 	sub.w	r8, r6, r7
 8009f20:	608b      	str	r3, [r1, #8]
 8009f22:	f1b8 0f00 	cmp.w	r8, #0
 8009f26:	dd9c      	ble.n	8009e62 <__sflush_r+0x1a>
 8009f28:	6a21      	ldr	r1, [r4, #32]
 8009f2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f2c:	4643      	mov	r3, r8
 8009f2e:	463a      	mov	r2, r7
 8009f30:	4628      	mov	r0, r5
 8009f32:	47b0      	blx	r6
 8009f34:	2800      	cmp	r0, #0
 8009f36:	dc06      	bgt.n	8009f46 <__sflush_r+0xfe>
 8009f38:	89a3      	ldrh	r3, [r4, #12]
 8009f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f3e:	81a3      	strh	r3, [r4, #12]
 8009f40:	f04f 30ff 	mov.w	r0, #4294967295
 8009f44:	e78e      	b.n	8009e64 <__sflush_r+0x1c>
 8009f46:	4407      	add	r7, r0
 8009f48:	eba8 0800 	sub.w	r8, r8, r0
 8009f4c:	e7e9      	b.n	8009f22 <__sflush_r+0xda>
 8009f4e:	bf00      	nop
 8009f50:	20400001 	.word	0x20400001

08009f54 <_fflush_r>:
 8009f54:	b538      	push	{r3, r4, r5, lr}
 8009f56:	690b      	ldr	r3, [r1, #16]
 8009f58:	4605      	mov	r5, r0
 8009f5a:	460c      	mov	r4, r1
 8009f5c:	b913      	cbnz	r3, 8009f64 <_fflush_r+0x10>
 8009f5e:	2500      	movs	r5, #0
 8009f60:	4628      	mov	r0, r5
 8009f62:	bd38      	pop	{r3, r4, r5, pc}
 8009f64:	b118      	cbz	r0, 8009f6e <_fflush_r+0x1a>
 8009f66:	6983      	ldr	r3, [r0, #24]
 8009f68:	b90b      	cbnz	r3, 8009f6e <_fflush_r+0x1a>
 8009f6a:	f000 f887 	bl	800a07c <__sinit>
 8009f6e:	4b14      	ldr	r3, [pc, #80]	; (8009fc0 <_fflush_r+0x6c>)
 8009f70:	429c      	cmp	r4, r3
 8009f72:	d11b      	bne.n	8009fac <_fflush_r+0x58>
 8009f74:	686c      	ldr	r4, [r5, #4]
 8009f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d0ef      	beq.n	8009f5e <_fflush_r+0xa>
 8009f7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f80:	07d0      	lsls	r0, r2, #31
 8009f82:	d404      	bmi.n	8009f8e <_fflush_r+0x3a>
 8009f84:	0599      	lsls	r1, r3, #22
 8009f86:	d402      	bmi.n	8009f8e <_fflush_r+0x3a>
 8009f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f8a:	f000 f915 	bl	800a1b8 <__retarget_lock_acquire_recursive>
 8009f8e:	4628      	mov	r0, r5
 8009f90:	4621      	mov	r1, r4
 8009f92:	f7ff ff59 	bl	8009e48 <__sflush_r>
 8009f96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f98:	07da      	lsls	r2, r3, #31
 8009f9a:	4605      	mov	r5, r0
 8009f9c:	d4e0      	bmi.n	8009f60 <_fflush_r+0xc>
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	059b      	lsls	r3, r3, #22
 8009fa2:	d4dd      	bmi.n	8009f60 <_fflush_r+0xc>
 8009fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fa6:	f000 f908 	bl	800a1ba <__retarget_lock_release_recursive>
 8009faa:	e7d9      	b.n	8009f60 <_fflush_r+0xc>
 8009fac:	4b05      	ldr	r3, [pc, #20]	; (8009fc4 <_fflush_r+0x70>)
 8009fae:	429c      	cmp	r4, r3
 8009fb0:	d101      	bne.n	8009fb6 <_fflush_r+0x62>
 8009fb2:	68ac      	ldr	r4, [r5, #8]
 8009fb4:	e7df      	b.n	8009f76 <_fflush_r+0x22>
 8009fb6:	4b04      	ldr	r3, [pc, #16]	; (8009fc8 <_fflush_r+0x74>)
 8009fb8:	429c      	cmp	r4, r3
 8009fba:	bf08      	it	eq
 8009fbc:	68ec      	ldreq	r4, [r5, #12]
 8009fbe:	e7da      	b.n	8009f76 <_fflush_r+0x22>
 8009fc0:	080303cc 	.word	0x080303cc
 8009fc4:	080303ec 	.word	0x080303ec
 8009fc8:	080303ac 	.word	0x080303ac

08009fcc <std>:
 8009fcc:	2300      	movs	r3, #0
 8009fce:	b510      	push	{r4, lr}
 8009fd0:	4604      	mov	r4, r0
 8009fd2:	e9c0 3300 	strd	r3, r3, [r0]
 8009fd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fda:	6083      	str	r3, [r0, #8]
 8009fdc:	8181      	strh	r1, [r0, #12]
 8009fde:	6643      	str	r3, [r0, #100]	; 0x64
 8009fe0:	81c2      	strh	r2, [r0, #14]
 8009fe2:	6183      	str	r3, [r0, #24]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	2208      	movs	r2, #8
 8009fe8:	305c      	adds	r0, #92	; 0x5c
 8009fea:	f7fb fed5 	bl	8005d98 <memset>
 8009fee:	4b05      	ldr	r3, [pc, #20]	; (800a004 <std+0x38>)
 8009ff0:	6263      	str	r3, [r4, #36]	; 0x24
 8009ff2:	4b05      	ldr	r3, [pc, #20]	; (800a008 <std+0x3c>)
 8009ff4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ff6:	4b05      	ldr	r3, [pc, #20]	; (800a00c <std+0x40>)
 8009ff8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ffa:	4b05      	ldr	r3, [pc, #20]	; (800a010 <std+0x44>)
 8009ffc:	6224      	str	r4, [r4, #32]
 8009ffe:	6323      	str	r3, [r4, #48]	; 0x30
 800a000:	bd10      	pop	{r4, pc}
 800a002:	bf00      	nop
 800a004:	0800a321 	.word	0x0800a321
 800a008:	0800a343 	.word	0x0800a343
 800a00c:	0800a37b 	.word	0x0800a37b
 800a010:	0800a39f 	.word	0x0800a39f

0800a014 <_cleanup_r>:
 800a014:	4901      	ldr	r1, [pc, #4]	; (800a01c <_cleanup_r+0x8>)
 800a016:	f000 b8af 	b.w	800a178 <_fwalk_reent>
 800a01a:	bf00      	nop
 800a01c:	08009f55 	.word	0x08009f55

0800a020 <__sfmoreglue>:
 800a020:	b570      	push	{r4, r5, r6, lr}
 800a022:	2268      	movs	r2, #104	; 0x68
 800a024:	1e4d      	subs	r5, r1, #1
 800a026:	4355      	muls	r5, r2
 800a028:	460e      	mov	r6, r1
 800a02a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a02e:	f7ff fa59 	bl	80094e4 <_malloc_r>
 800a032:	4604      	mov	r4, r0
 800a034:	b140      	cbz	r0, 800a048 <__sfmoreglue+0x28>
 800a036:	2100      	movs	r1, #0
 800a038:	e9c0 1600 	strd	r1, r6, [r0]
 800a03c:	300c      	adds	r0, #12
 800a03e:	60a0      	str	r0, [r4, #8]
 800a040:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a044:	f7fb fea8 	bl	8005d98 <memset>
 800a048:	4620      	mov	r0, r4
 800a04a:	bd70      	pop	{r4, r5, r6, pc}

0800a04c <__sfp_lock_acquire>:
 800a04c:	4801      	ldr	r0, [pc, #4]	; (800a054 <__sfp_lock_acquire+0x8>)
 800a04e:	f000 b8b3 	b.w	800a1b8 <__retarget_lock_acquire_recursive>
 800a052:	bf00      	nop
 800a054:	20000339 	.word	0x20000339

0800a058 <__sfp_lock_release>:
 800a058:	4801      	ldr	r0, [pc, #4]	; (800a060 <__sfp_lock_release+0x8>)
 800a05a:	f000 b8ae 	b.w	800a1ba <__retarget_lock_release_recursive>
 800a05e:	bf00      	nop
 800a060:	20000339 	.word	0x20000339

0800a064 <__sinit_lock_acquire>:
 800a064:	4801      	ldr	r0, [pc, #4]	; (800a06c <__sinit_lock_acquire+0x8>)
 800a066:	f000 b8a7 	b.w	800a1b8 <__retarget_lock_acquire_recursive>
 800a06a:	bf00      	nop
 800a06c:	2000033a 	.word	0x2000033a

0800a070 <__sinit_lock_release>:
 800a070:	4801      	ldr	r0, [pc, #4]	; (800a078 <__sinit_lock_release+0x8>)
 800a072:	f000 b8a2 	b.w	800a1ba <__retarget_lock_release_recursive>
 800a076:	bf00      	nop
 800a078:	2000033a 	.word	0x2000033a

0800a07c <__sinit>:
 800a07c:	b510      	push	{r4, lr}
 800a07e:	4604      	mov	r4, r0
 800a080:	f7ff fff0 	bl	800a064 <__sinit_lock_acquire>
 800a084:	69a3      	ldr	r3, [r4, #24]
 800a086:	b11b      	cbz	r3, 800a090 <__sinit+0x14>
 800a088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a08c:	f7ff bff0 	b.w	800a070 <__sinit_lock_release>
 800a090:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a094:	6523      	str	r3, [r4, #80]	; 0x50
 800a096:	4b13      	ldr	r3, [pc, #76]	; (800a0e4 <__sinit+0x68>)
 800a098:	4a13      	ldr	r2, [pc, #76]	; (800a0e8 <__sinit+0x6c>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a09e:	42a3      	cmp	r3, r4
 800a0a0:	bf04      	itt	eq
 800a0a2:	2301      	moveq	r3, #1
 800a0a4:	61a3      	streq	r3, [r4, #24]
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f000 f820 	bl	800a0ec <__sfp>
 800a0ac:	6060      	str	r0, [r4, #4]
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f000 f81c 	bl	800a0ec <__sfp>
 800a0b4:	60a0      	str	r0, [r4, #8]
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f000 f818 	bl	800a0ec <__sfp>
 800a0bc:	2200      	movs	r2, #0
 800a0be:	60e0      	str	r0, [r4, #12]
 800a0c0:	2104      	movs	r1, #4
 800a0c2:	6860      	ldr	r0, [r4, #4]
 800a0c4:	f7ff ff82 	bl	8009fcc <std>
 800a0c8:	68a0      	ldr	r0, [r4, #8]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	2109      	movs	r1, #9
 800a0ce:	f7ff ff7d 	bl	8009fcc <std>
 800a0d2:	68e0      	ldr	r0, [r4, #12]
 800a0d4:	2202      	movs	r2, #2
 800a0d6:	2112      	movs	r1, #18
 800a0d8:	f7ff ff78 	bl	8009fcc <std>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	61a3      	str	r3, [r4, #24]
 800a0e0:	e7d2      	b.n	800a088 <__sinit+0xc>
 800a0e2:	bf00      	nop
 800a0e4:	0802ff64 	.word	0x0802ff64
 800a0e8:	0800a015 	.word	0x0800a015

0800a0ec <__sfp>:
 800a0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ee:	4607      	mov	r7, r0
 800a0f0:	f7ff ffac 	bl	800a04c <__sfp_lock_acquire>
 800a0f4:	4b1e      	ldr	r3, [pc, #120]	; (800a170 <__sfp+0x84>)
 800a0f6:	681e      	ldr	r6, [r3, #0]
 800a0f8:	69b3      	ldr	r3, [r6, #24]
 800a0fa:	b913      	cbnz	r3, 800a102 <__sfp+0x16>
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f7ff ffbd 	bl	800a07c <__sinit>
 800a102:	3648      	adds	r6, #72	; 0x48
 800a104:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a108:	3b01      	subs	r3, #1
 800a10a:	d503      	bpl.n	800a114 <__sfp+0x28>
 800a10c:	6833      	ldr	r3, [r6, #0]
 800a10e:	b30b      	cbz	r3, 800a154 <__sfp+0x68>
 800a110:	6836      	ldr	r6, [r6, #0]
 800a112:	e7f7      	b.n	800a104 <__sfp+0x18>
 800a114:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a118:	b9d5      	cbnz	r5, 800a150 <__sfp+0x64>
 800a11a:	4b16      	ldr	r3, [pc, #88]	; (800a174 <__sfp+0x88>)
 800a11c:	60e3      	str	r3, [r4, #12]
 800a11e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a122:	6665      	str	r5, [r4, #100]	; 0x64
 800a124:	f000 f847 	bl	800a1b6 <__retarget_lock_init_recursive>
 800a128:	f7ff ff96 	bl	800a058 <__sfp_lock_release>
 800a12c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a130:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a134:	6025      	str	r5, [r4, #0]
 800a136:	61a5      	str	r5, [r4, #24]
 800a138:	2208      	movs	r2, #8
 800a13a:	4629      	mov	r1, r5
 800a13c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a140:	f7fb fe2a 	bl	8005d98 <memset>
 800a144:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a148:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a14c:	4620      	mov	r0, r4
 800a14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a150:	3468      	adds	r4, #104	; 0x68
 800a152:	e7d9      	b.n	800a108 <__sfp+0x1c>
 800a154:	2104      	movs	r1, #4
 800a156:	4638      	mov	r0, r7
 800a158:	f7ff ff62 	bl	800a020 <__sfmoreglue>
 800a15c:	4604      	mov	r4, r0
 800a15e:	6030      	str	r0, [r6, #0]
 800a160:	2800      	cmp	r0, #0
 800a162:	d1d5      	bne.n	800a110 <__sfp+0x24>
 800a164:	f7ff ff78 	bl	800a058 <__sfp_lock_release>
 800a168:	230c      	movs	r3, #12
 800a16a:	603b      	str	r3, [r7, #0]
 800a16c:	e7ee      	b.n	800a14c <__sfp+0x60>
 800a16e:	bf00      	nop
 800a170:	0802ff64 	.word	0x0802ff64
 800a174:	ffff0001 	.word	0xffff0001

0800a178 <_fwalk_reent>:
 800a178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a17c:	4606      	mov	r6, r0
 800a17e:	4688      	mov	r8, r1
 800a180:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a184:	2700      	movs	r7, #0
 800a186:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a18a:	f1b9 0901 	subs.w	r9, r9, #1
 800a18e:	d505      	bpl.n	800a19c <_fwalk_reent+0x24>
 800a190:	6824      	ldr	r4, [r4, #0]
 800a192:	2c00      	cmp	r4, #0
 800a194:	d1f7      	bne.n	800a186 <_fwalk_reent+0xe>
 800a196:	4638      	mov	r0, r7
 800a198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a19c:	89ab      	ldrh	r3, [r5, #12]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d907      	bls.n	800a1b2 <_fwalk_reent+0x3a>
 800a1a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	d003      	beq.n	800a1b2 <_fwalk_reent+0x3a>
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	47c0      	blx	r8
 800a1b0:	4307      	orrs	r7, r0
 800a1b2:	3568      	adds	r5, #104	; 0x68
 800a1b4:	e7e9      	b.n	800a18a <_fwalk_reent+0x12>

0800a1b6 <__retarget_lock_init_recursive>:
 800a1b6:	4770      	bx	lr

0800a1b8 <__retarget_lock_acquire_recursive>:
 800a1b8:	4770      	bx	lr

0800a1ba <__retarget_lock_release_recursive>:
 800a1ba:	4770      	bx	lr

0800a1bc <__swhatbuf_r>:
 800a1bc:	b570      	push	{r4, r5, r6, lr}
 800a1be:	460e      	mov	r6, r1
 800a1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c4:	2900      	cmp	r1, #0
 800a1c6:	b096      	sub	sp, #88	; 0x58
 800a1c8:	4614      	mov	r4, r2
 800a1ca:	461d      	mov	r5, r3
 800a1cc:	da08      	bge.n	800a1e0 <__swhatbuf_r+0x24>
 800a1ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	602a      	str	r2, [r5, #0]
 800a1d6:	061a      	lsls	r2, r3, #24
 800a1d8:	d410      	bmi.n	800a1fc <__swhatbuf_r+0x40>
 800a1da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1de:	e00e      	b.n	800a1fe <__swhatbuf_r+0x42>
 800a1e0:	466a      	mov	r2, sp
 800a1e2:	f000 f903 	bl	800a3ec <_fstat_r>
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	dbf1      	blt.n	800a1ce <__swhatbuf_r+0x12>
 800a1ea:	9a01      	ldr	r2, [sp, #4]
 800a1ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1f4:	425a      	negs	r2, r3
 800a1f6:	415a      	adcs	r2, r3
 800a1f8:	602a      	str	r2, [r5, #0]
 800a1fa:	e7ee      	b.n	800a1da <__swhatbuf_r+0x1e>
 800a1fc:	2340      	movs	r3, #64	; 0x40
 800a1fe:	2000      	movs	r0, #0
 800a200:	6023      	str	r3, [r4, #0]
 800a202:	b016      	add	sp, #88	; 0x58
 800a204:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a208 <__smakebuf_r>:
 800a208:	898b      	ldrh	r3, [r1, #12]
 800a20a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a20c:	079d      	lsls	r5, r3, #30
 800a20e:	4606      	mov	r6, r0
 800a210:	460c      	mov	r4, r1
 800a212:	d507      	bpl.n	800a224 <__smakebuf_r+0x1c>
 800a214:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a218:	6023      	str	r3, [r4, #0]
 800a21a:	6123      	str	r3, [r4, #16]
 800a21c:	2301      	movs	r3, #1
 800a21e:	6163      	str	r3, [r4, #20]
 800a220:	b002      	add	sp, #8
 800a222:	bd70      	pop	{r4, r5, r6, pc}
 800a224:	ab01      	add	r3, sp, #4
 800a226:	466a      	mov	r2, sp
 800a228:	f7ff ffc8 	bl	800a1bc <__swhatbuf_r>
 800a22c:	9900      	ldr	r1, [sp, #0]
 800a22e:	4605      	mov	r5, r0
 800a230:	4630      	mov	r0, r6
 800a232:	f7ff f957 	bl	80094e4 <_malloc_r>
 800a236:	b948      	cbnz	r0, 800a24c <__smakebuf_r+0x44>
 800a238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a23c:	059a      	lsls	r2, r3, #22
 800a23e:	d4ef      	bmi.n	800a220 <__smakebuf_r+0x18>
 800a240:	f023 0303 	bic.w	r3, r3, #3
 800a244:	f043 0302 	orr.w	r3, r3, #2
 800a248:	81a3      	strh	r3, [r4, #12]
 800a24a:	e7e3      	b.n	800a214 <__smakebuf_r+0xc>
 800a24c:	4b0d      	ldr	r3, [pc, #52]	; (800a284 <__smakebuf_r+0x7c>)
 800a24e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a250:	89a3      	ldrh	r3, [r4, #12]
 800a252:	6020      	str	r0, [r4, #0]
 800a254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a258:	81a3      	strh	r3, [r4, #12]
 800a25a:	9b00      	ldr	r3, [sp, #0]
 800a25c:	6163      	str	r3, [r4, #20]
 800a25e:	9b01      	ldr	r3, [sp, #4]
 800a260:	6120      	str	r0, [r4, #16]
 800a262:	b15b      	cbz	r3, 800a27c <__smakebuf_r+0x74>
 800a264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a268:	4630      	mov	r0, r6
 800a26a:	f000 f8d1 	bl	800a410 <_isatty_r>
 800a26e:	b128      	cbz	r0, 800a27c <__smakebuf_r+0x74>
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	f023 0303 	bic.w	r3, r3, #3
 800a276:	f043 0301 	orr.w	r3, r3, #1
 800a27a:	81a3      	strh	r3, [r4, #12]
 800a27c:	89a0      	ldrh	r0, [r4, #12]
 800a27e:	4305      	orrs	r5, r0
 800a280:	81a5      	strh	r5, [r4, #12]
 800a282:	e7cd      	b.n	800a220 <__smakebuf_r+0x18>
 800a284:	0800a015 	.word	0x0800a015

0800a288 <_malloc_usable_size_r>:
 800a288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a28c:	1f18      	subs	r0, r3, #4
 800a28e:	2b00      	cmp	r3, #0
 800a290:	bfbc      	itt	lt
 800a292:	580b      	ldrlt	r3, [r1, r0]
 800a294:	18c0      	addlt	r0, r0, r3
 800a296:	4770      	bx	lr

0800a298 <_raise_r>:
 800a298:	291f      	cmp	r1, #31
 800a29a:	b538      	push	{r3, r4, r5, lr}
 800a29c:	4604      	mov	r4, r0
 800a29e:	460d      	mov	r5, r1
 800a2a0:	d904      	bls.n	800a2ac <_raise_r+0x14>
 800a2a2:	2316      	movs	r3, #22
 800a2a4:	6003      	str	r3, [r0, #0]
 800a2a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2aa:	bd38      	pop	{r3, r4, r5, pc}
 800a2ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a2ae:	b112      	cbz	r2, 800a2b6 <_raise_r+0x1e>
 800a2b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2b4:	b94b      	cbnz	r3, 800a2ca <_raise_r+0x32>
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f000 f830 	bl	800a31c <_getpid_r>
 800a2bc:	462a      	mov	r2, r5
 800a2be:	4601      	mov	r1, r0
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2c6:	f000 b817 	b.w	800a2f8 <_kill_r>
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d00a      	beq.n	800a2e4 <_raise_r+0x4c>
 800a2ce:	1c59      	adds	r1, r3, #1
 800a2d0:	d103      	bne.n	800a2da <_raise_r+0x42>
 800a2d2:	2316      	movs	r3, #22
 800a2d4:	6003      	str	r3, [r0, #0]
 800a2d6:	2001      	movs	r0, #1
 800a2d8:	e7e7      	b.n	800a2aa <_raise_r+0x12>
 800a2da:	2400      	movs	r4, #0
 800a2dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	4798      	blx	r3
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	e7e0      	b.n	800a2aa <_raise_r+0x12>

0800a2e8 <raise>:
 800a2e8:	4b02      	ldr	r3, [pc, #8]	; (800a2f4 <raise+0xc>)
 800a2ea:	4601      	mov	r1, r0
 800a2ec:	6818      	ldr	r0, [r3, #0]
 800a2ee:	f7ff bfd3 	b.w	800a298 <_raise_r>
 800a2f2:	bf00      	nop
 800a2f4:	20000018 	.word	0x20000018

0800a2f8 <_kill_r>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	4d07      	ldr	r5, [pc, #28]	; (800a318 <_kill_r+0x20>)
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	4604      	mov	r4, r0
 800a300:	4608      	mov	r0, r1
 800a302:	4611      	mov	r1, r2
 800a304:	602b      	str	r3, [r5, #0]
 800a306:	f7f8 fb4f 	bl	80029a8 <_kill>
 800a30a:	1c43      	adds	r3, r0, #1
 800a30c:	d102      	bne.n	800a314 <_kill_r+0x1c>
 800a30e:	682b      	ldr	r3, [r5, #0]
 800a310:	b103      	cbz	r3, 800a314 <_kill_r+0x1c>
 800a312:	6023      	str	r3, [r4, #0]
 800a314:	bd38      	pop	{r3, r4, r5, pc}
 800a316:	bf00      	nop
 800a318:	20000334 	.word	0x20000334

0800a31c <_getpid_r>:
 800a31c:	f7f8 bb3c 	b.w	8002998 <_getpid>

0800a320 <__sread>:
 800a320:	b510      	push	{r4, lr}
 800a322:	460c      	mov	r4, r1
 800a324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a328:	f000 f894 	bl	800a454 <_read_r>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	bfab      	itete	ge
 800a330:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a332:	89a3      	ldrhlt	r3, [r4, #12]
 800a334:	181b      	addge	r3, r3, r0
 800a336:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a33a:	bfac      	ite	ge
 800a33c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a33e:	81a3      	strhlt	r3, [r4, #12]
 800a340:	bd10      	pop	{r4, pc}

0800a342 <__swrite>:
 800a342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a346:	461f      	mov	r7, r3
 800a348:	898b      	ldrh	r3, [r1, #12]
 800a34a:	05db      	lsls	r3, r3, #23
 800a34c:	4605      	mov	r5, r0
 800a34e:	460c      	mov	r4, r1
 800a350:	4616      	mov	r6, r2
 800a352:	d505      	bpl.n	800a360 <__swrite+0x1e>
 800a354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a358:	2302      	movs	r3, #2
 800a35a:	2200      	movs	r2, #0
 800a35c:	f000 f868 	bl	800a430 <_lseek_r>
 800a360:	89a3      	ldrh	r3, [r4, #12]
 800a362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a36a:	81a3      	strh	r3, [r4, #12]
 800a36c:	4632      	mov	r2, r6
 800a36e:	463b      	mov	r3, r7
 800a370:	4628      	mov	r0, r5
 800a372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a376:	f000 b817 	b.w	800a3a8 <_write_r>

0800a37a <__sseek>:
 800a37a:	b510      	push	{r4, lr}
 800a37c:	460c      	mov	r4, r1
 800a37e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a382:	f000 f855 	bl	800a430 <_lseek_r>
 800a386:	1c43      	adds	r3, r0, #1
 800a388:	89a3      	ldrh	r3, [r4, #12]
 800a38a:	bf15      	itete	ne
 800a38c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a38e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a392:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a396:	81a3      	strheq	r3, [r4, #12]
 800a398:	bf18      	it	ne
 800a39a:	81a3      	strhne	r3, [r4, #12]
 800a39c:	bd10      	pop	{r4, pc}

0800a39e <__sclose>:
 800a39e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a2:	f000 b813 	b.w	800a3cc <_close_r>
	...

0800a3a8 <_write_r>:
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	4d07      	ldr	r5, [pc, #28]	; (800a3c8 <_write_r+0x20>)
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	4608      	mov	r0, r1
 800a3b0:	4611      	mov	r1, r2
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	602a      	str	r2, [r5, #0]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f7f8 fb2d 	bl	8002a16 <_write>
 800a3bc:	1c43      	adds	r3, r0, #1
 800a3be:	d102      	bne.n	800a3c6 <_write_r+0x1e>
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	b103      	cbz	r3, 800a3c6 <_write_r+0x1e>
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	bd38      	pop	{r3, r4, r5, pc}
 800a3c8:	20000334 	.word	0x20000334

0800a3cc <_close_r>:
 800a3cc:	b538      	push	{r3, r4, r5, lr}
 800a3ce:	4d06      	ldr	r5, [pc, #24]	; (800a3e8 <_close_r+0x1c>)
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	4608      	mov	r0, r1
 800a3d6:	602b      	str	r3, [r5, #0]
 800a3d8:	f7f8 fb39 	bl	8002a4e <_close>
 800a3dc:	1c43      	adds	r3, r0, #1
 800a3de:	d102      	bne.n	800a3e6 <_close_r+0x1a>
 800a3e0:	682b      	ldr	r3, [r5, #0]
 800a3e2:	b103      	cbz	r3, 800a3e6 <_close_r+0x1a>
 800a3e4:	6023      	str	r3, [r4, #0]
 800a3e6:	bd38      	pop	{r3, r4, r5, pc}
 800a3e8:	20000334 	.word	0x20000334

0800a3ec <_fstat_r>:
 800a3ec:	b538      	push	{r3, r4, r5, lr}
 800a3ee:	4d07      	ldr	r5, [pc, #28]	; (800a40c <_fstat_r+0x20>)
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	4608      	mov	r0, r1
 800a3f6:	4611      	mov	r1, r2
 800a3f8:	602b      	str	r3, [r5, #0]
 800a3fa:	f7f8 fb34 	bl	8002a66 <_fstat>
 800a3fe:	1c43      	adds	r3, r0, #1
 800a400:	d102      	bne.n	800a408 <_fstat_r+0x1c>
 800a402:	682b      	ldr	r3, [r5, #0]
 800a404:	b103      	cbz	r3, 800a408 <_fstat_r+0x1c>
 800a406:	6023      	str	r3, [r4, #0]
 800a408:	bd38      	pop	{r3, r4, r5, pc}
 800a40a:	bf00      	nop
 800a40c:	20000334 	.word	0x20000334

0800a410 <_isatty_r>:
 800a410:	b538      	push	{r3, r4, r5, lr}
 800a412:	4d06      	ldr	r5, [pc, #24]	; (800a42c <_isatty_r+0x1c>)
 800a414:	2300      	movs	r3, #0
 800a416:	4604      	mov	r4, r0
 800a418:	4608      	mov	r0, r1
 800a41a:	602b      	str	r3, [r5, #0]
 800a41c:	f7f8 fb33 	bl	8002a86 <_isatty>
 800a420:	1c43      	adds	r3, r0, #1
 800a422:	d102      	bne.n	800a42a <_isatty_r+0x1a>
 800a424:	682b      	ldr	r3, [r5, #0]
 800a426:	b103      	cbz	r3, 800a42a <_isatty_r+0x1a>
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	bd38      	pop	{r3, r4, r5, pc}
 800a42c:	20000334 	.word	0x20000334

0800a430 <_lseek_r>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	4d07      	ldr	r5, [pc, #28]	; (800a450 <_lseek_r+0x20>)
 800a434:	4604      	mov	r4, r0
 800a436:	4608      	mov	r0, r1
 800a438:	4611      	mov	r1, r2
 800a43a:	2200      	movs	r2, #0
 800a43c:	602a      	str	r2, [r5, #0]
 800a43e:	461a      	mov	r2, r3
 800a440:	f7f8 fb2c 	bl	8002a9c <_lseek>
 800a444:	1c43      	adds	r3, r0, #1
 800a446:	d102      	bne.n	800a44e <_lseek_r+0x1e>
 800a448:	682b      	ldr	r3, [r5, #0]
 800a44a:	b103      	cbz	r3, 800a44e <_lseek_r+0x1e>
 800a44c:	6023      	str	r3, [r4, #0]
 800a44e:	bd38      	pop	{r3, r4, r5, pc}
 800a450:	20000334 	.word	0x20000334

0800a454 <_read_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	4d07      	ldr	r5, [pc, #28]	; (800a474 <_read_r+0x20>)
 800a458:	4604      	mov	r4, r0
 800a45a:	4608      	mov	r0, r1
 800a45c:	4611      	mov	r1, r2
 800a45e:	2200      	movs	r2, #0
 800a460:	602a      	str	r2, [r5, #0]
 800a462:	461a      	mov	r2, r3
 800a464:	f7f8 faba 	bl	80029dc <_read>
 800a468:	1c43      	adds	r3, r0, #1
 800a46a:	d102      	bne.n	800a472 <_read_r+0x1e>
 800a46c:	682b      	ldr	r3, [r5, #0]
 800a46e:	b103      	cbz	r3, 800a472 <_read_r+0x1e>
 800a470:	6023      	str	r3, [r4, #0]
 800a472:	bd38      	pop	{r3, r4, r5, pc}
 800a474:	20000334 	.word	0x20000334

0800a478 <_init>:
 800a478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47a:	bf00      	nop
 800a47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47e:	bc08      	pop	{r3}
 800a480:	469e      	mov	lr, r3
 800a482:	4770      	bx	lr

0800a484 <_fini>:
 800a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a486:	bf00      	nop
 800a488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a48a:	bc08      	pop	{r3}
 800a48c:	469e      	mov	lr, r3
 800a48e:	4770      	bx	lr
