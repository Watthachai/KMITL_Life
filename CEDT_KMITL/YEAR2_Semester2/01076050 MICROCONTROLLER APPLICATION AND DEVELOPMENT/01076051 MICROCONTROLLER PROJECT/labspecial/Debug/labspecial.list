
labspecial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a94  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003c94  08003c94  00013c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d64  08003d64  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003d64  08003d64  00013d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d6c  08003d6c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d6c  08003d6c  00013d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000078  08003dec  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08003dec  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a596  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001875  00000000  00000000  0002a63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0002beb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  0002c648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d03  00000000  00000000  0002cd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000acdd  00000000  00000000  00053a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f049a  00000000  00000000  0005e700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014eb9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020c0  00000000  00000000  0014ebec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08003c7c 	.word	0x08003c7c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08003c7c 	.word	0x08003c7c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_GPIO_Init+0x5c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a14      	ldr	r2, [pc, #80]	; (8000650 <MX_GPIO_Init+0x5c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_GPIO_Init+0x5c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_GPIO_Init+0x5c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <MX_GPIO_Init+0x5c>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_GPIO_Init+0x5c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_GPIO_Init+0x5c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a08      	ldr	r2, [pc, #32]	; (8000650 <MX_GPIO_Init+0x5c>)
 8000630:	f043 0308 	orr.w	r3, r3, #8
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_GPIO_Init+0x5c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000658:	f000 fc85 	bl	8000f66 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065c:	f000 f9c0 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f7ff ffc8 	bl	80005f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000664:	f000 fb26 	bl	8000cb4 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000668:	f000 fac4 	bl	8000bf4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800066c:	f000 faf2 	bl	8000c54 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000670:	bf00      	nop
 8000672:	4ba3      	ldr	r3, [pc, #652]	; (8000900 <main+0x2ac>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067c:	2b40      	cmp	r3, #64	; 0x40
 800067e:	d1f8      	bne.n	8000672 <main+0x1e>
   HAL_UART_Transmit(&huart3, (uint32_t*)"\r\nMan From U.A.R.T.1!\n\rQuit PRESS q", 35, 1000);
 8000680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000684:	2223      	movs	r2, #35	; 0x23
 8000686:	499f      	ldr	r1, [pc, #636]	; (8000904 <main+0x2b0>)
 8000688:	489d      	ldr	r0, [pc, #628]	; (8000900 <main+0x2ac>)
 800068a:	f002 f8f5 	bl	8002878 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (state1 == 1 ){
 800068e:	4b9e      	ldr	r3, [pc, #632]	; (8000908 <main+0x2b4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d146      	bne.n	8000724 <main+0xd0>
	  	  	 while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000696:	bf00      	nop
 8000698:	4b99      	ldr	r3, [pc, #612]	; (8000900 <main+0x2ac>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a2:	2b40      	cmp	r3, #64	; 0x40
 80006a4:	d1f8      	bne.n	8000698 <main+0x44>
	  	  	 	HAL_UART_Transmit(&huart3, (uint32_t*)"\r\n\tName : ", 10, 1000);
 80006a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006aa:	220a      	movs	r2, #10
 80006ac:	4997      	ldr	r1, [pc, #604]	; (800090c <main+0x2b8>)
 80006ae:	4894      	ldr	r0, [pc, #592]	; (8000900 <main+0x2ac>)
 80006b0:	f002 f8e2 	bl	8002878 <HAL_UART_Transmit>


	  	  	 while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)== RESET){}
 80006b4:	bf00      	nop
 80006b6:	4b92      	ldr	r3, [pc, #584]	; (8000900 <main+0x2ac>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	f003 0320 	and.w	r3, r3, #32
 80006c0:	2b20      	cmp	r3, #32
 80006c2:	d1f8      	bne.n	80006b6 <main+0x62>
	  	  	 	 HAL_UART_Receive(&huart3, (uint32_t*)&username, 100,1000);
 80006c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c8:	2264      	movs	r2, #100	; 0x64
 80006ca:	4991      	ldr	r1, [pc, #580]	; (8000910 <main+0x2bc>)
 80006cc:	488c      	ldr	r0, [pc, #560]	; (8000900 <main+0x2ac>)
 80006ce:	f002 f956 	bl	800297e <HAL_UART_Receive>


	  	  	if (username[0] != '\000'){
 80006d2:	4b8f      	ldr	r3, [pc, #572]	; (8000910 <main+0x2bc>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d021      	beq.n	800071e <main+0xca>
	  	  		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80006da:	bf00      	nop
 80006dc:	4b88      	ldr	r3, [pc, #544]	; (8000900 <main+0x2ac>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e6:	2b40      	cmp	r3, #64	; 0x40
 80006e8:	d1f8      	bne.n	80006dc <main+0x88>
	  	  		HAL_UART_Transmit(&huart3, (uint32_t*)&username, 100, 1000);
 80006ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ee:	2264      	movs	r2, #100	; 0x64
 80006f0:	4987      	ldr	r1, [pc, #540]	; (8000910 <main+0x2bc>)
 80006f2:	4883      	ldr	r0, [pc, #524]	; (8000900 <main+0x2ac>)
 80006f4:	f002 f8c0 	bl	8002878 <HAL_UART_Transmit>
	  	  		while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 80006f8:	bf00      	nop
 80006fa:	4b86      	ldr	r3, [pc, #536]	; (8000914 <main+0x2c0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	69db      	ldr	r3, [r3, #28]
 8000700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000704:	2b40      	cmp	r3, #64	; 0x40
 8000706:	d1f8      	bne.n	80006fa <main+0xa6>
	  	  		HAL_UART_Transmit(&huart2, (uint32_t*)&username, strlen(username), 1000);}
 8000708:	4881      	ldr	r0, [pc, #516]	; (8000910 <main+0x2bc>)
 800070a:	f7ff fd99 	bl	8000240 <strlen>
 800070e:	4603      	mov	r3, r0
 8000710:	b29a      	uxth	r2, r3
 8000712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000716:	497e      	ldr	r1, [pc, #504]	; (8000910 <main+0x2bc>)
 8000718:	487e      	ldr	r0, [pc, #504]	; (8000914 <main+0x2c0>)
 800071a:	f002 f8ad 	bl	8002878 <HAL_UART_Transmit>

	  	  	    state1 = 0;
 800071e:	4b7a      	ldr	r3, [pc, #488]	; (8000908 <main+0x2b4>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
	  	  }


	  	  if (state2 == 1){
 8000724:	4b7c      	ldr	r3, [pc, #496]	; (8000918 <main+0x2c4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d144      	bne.n	80007b6 <main+0x162>

	  				  while(name[0] == '\000'){
 800072c:	e013      	b.n	8000756 <main+0x102>
	  					  memset(name,0,sizeof(name));
 800072e:	2264      	movs	r2, #100	; 0x64
 8000730:	2100      	movs	r1, #0
 8000732:	487a      	ldr	r0, [pc, #488]	; (800091c <main+0x2c8>)
 8000734:	f002 fe2c 	bl	8003390 <memset>
	  					  while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE)== RESET){}
 8000738:	bf00      	nop
 800073a:	4b76      	ldr	r3, [pc, #472]	; (8000914 <main+0x2c0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	69db      	ldr	r3, [r3, #28]
 8000740:	f003 0320 	and.w	r3, r3, #32
 8000744:	2b20      	cmp	r3, #32
 8000746:	d1f8      	bne.n	800073a <main+0xe6>
	  					  HAL_UART_Receive(&huart2, (uint32_t)&name, 100,1000);
 8000748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074c:	2264      	movs	r2, #100	; 0x64
 800074e:	4973      	ldr	r1, [pc, #460]	; (800091c <main+0x2c8>)
 8000750:	4870      	ldr	r0, [pc, #448]	; (8000914 <main+0x2c0>)
 8000752:	f002 f914 	bl	800297e <HAL_UART_Receive>
	  				  while(name[0] == '\000'){
 8000756:	4b71      	ldr	r3, [pc, #452]	; (800091c <main+0x2c8>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d0e7      	beq.n	800072e <main+0xda>
	  				  }

	  				  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800075e:	bf00      	nop
 8000760:	4b67      	ldr	r3, [pc, #412]	; (8000900 <main+0x2ac>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076a:	2b40      	cmp	r3, #64	; 0x40
 800076c:	d1f8      	bne.n	8000760 <main+0x10c>
	  				  HAL_UART_Transmit(&huart3, (uint32_t*)"\r\n\t", 4, 200);
 800076e:	23c8      	movs	r3, #200	; 0xc8
 8000770:	2204      	movs	r2, #4
 8000772:	496b      	ldr	r1, [pc, #428]	; (8000920 <main+0x2cc>)
 8000774:	4862      	ldr	r0, [pc, #392]	; (8000900 <main+0x2ac>)
 8000776:	f002 f87f 	bl	8002878 <HAL_UART_Transmit>
	  				  HAL_UART_Transmit(&huart3, (uint32_t)&name, 100, 1000);
 800077a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077e:	2264      	movs	r2, #100	; 0x64
 8000780:	4966      	ldr	r1, [pc, #408]	; (800091c <main+0x2c8>)
 8000782:	485f      	ldr	r0, [pc, #380]	; (8000900 <main+0x2ac>)
 8000784:	f002 f878 	bl	8002878 <HAL_UART_Transmit>

	  				  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000788:	bf00      	nop
 800078a:	4b5d      	ldr	r3, [pc, #372]	; (8000900 <main+0x2ac>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000794:	2b40      	cmp	r3, #64	; 0x40
 8000796:	d1f8      	bne.n	800078a <main+0x136>
	  				  HAL_UART_Transmit(&huart3, (uint32_t*)" is Ready!", 10, 1000);
 8000798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079c:	220a      	movs	r2, #10
 800079e:	4961      	ldr	r1, [pc, #388]	; (8000924 <main+0x2d0>)
 80007a0:	4857      	ldr	r0, [pc, #348]	; (8000900 <main+0x2ac>)
 80007a2:	f002 f869 	bl	8002878 <HAL_UART_Transmit>
	  				  memset(name,0,sizeof(name));
 80007a6:	2264      	movs	r2, #100	; 0x64
 80007a8:	2100      	movs	r1, #0
 80007aa:	485c      	ldr	r0, [pc, #368]	; (800091c <main+0x2c8>)
 80007ac:	f002 fdf0 	bl	8003390 <memset>

	  	 		  state2 = 0;
 80007b0:	4b59      	ldr	r3, [pc, #356]	; (8000918 <main+0x2c4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]

	  	 	}

	  	      memset(buffer,0,sizeof(buffer));
 80007b6:	2264      	movs	r2, #100	; 0x64
 80007b8:	2100      	movs	r1, #0
 80007ba:	485b      	ldr	r0, [pc, #364]	; (8000928 <main+0x2d4>)
 80007bc:	f002 fde8 	bl	8003390 <memset>
	  	      memset(transmit,0,sizeof(transmit));
 80007c0:	2264      	movs	r2, #100	; 0x64
 80007c2:	2100      	movs	r1, #0
 80007c4:	4859      	ldr	r0, [pc, #356]	; (800092c <main+0x2d8>)
 80007c6:	f002 fde3 	bl	8003390 <memset>

	  	 	 		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80007ca:	bf00      	nop
 80007cc:	4b4c      	ldr	r3, [pc, #304]	; (8000900 <main+0x2ac>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d6:	2b40      	cmp	r3, #64	; 0x40
 80007d8:	d1f8      	bne.n	80007cc <main+0x178>
	  	 	 		  	HAL_UART_Transmit(&huart3, (uint32_t*)"\r\n\t", 4, 200);
 80007da:	23c8      	movs	r3, #200	; 0xc8
 80007dc:	2204      	movs	r2, #4
 80007de:	4950      	ldr	r1, [pc, #320]	; (8000920 <main+0x2cc>)
 80007e0:	4847      	ldr	r0, [pc, #284]	; (8000900 <main+0x2ac>)
 80007e2:	f002 f849 	bl	8002878 <HAL_UART_Transmit>
	  	 	 		  	HAL_UART_Transmit(&huart3, (uint32_t*)&username, strlen(username), 1000);
 80007e6:	484a      	ldr	r0, [pc, #296]	; (8000910 <main+0x2bc>)
 80007e8:	f7ff fd2a 	bl	8000240 <strlen>
 80007ec:	4603      	mov	r3, r0
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f4:	4946      	ldr	r1, [pc, #280]	; (8000910 <main+0x2bc>)
 80007f6:	4842      	ldr	r0, [pc, #264]	; (8000900 <main+0x2ac>)
 80007f8:	f002 f83e 	bl	8002878 <HAL_UART_Transmit>

	  	 	 		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80007fc:	bf00      	nop
 80007fe:	4b40      	ldr	r3, [pc, #256]	; (8000900 <main+0x2ac>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000808:	2b40      	cmp	r3, #64	; 0x40
 800080a:	d1f8      	bne.n	80007fe <main+0x1aa>
	  	 	 		  	HAL_UART_Transmit(&huart3, (uint32_t*)"=>", 2, 1000);
 800080c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000810:	2202      	movs	r2, #2
 8000812:	4947      	ldr	r1, [pc, #284]	; (8000930 <main+0x2dc>)
 8000814:	483a      	ldr	r0, [pc, #232]	; (8000900 <main+0x2ac>)
 8000816:	f002 f82f 	bl	8002878 <HAL_UART_Transmit>

	  	 	 		 while(transmit[0] == '\000'){
 800081a:	e013      	b.n	8000844 <main+0x1f0>
	  					  memset(transmit,0,sizeof(transmit));
 800081c:	2264      	movs	r2, #100	; 0x64
 800081e:	2100      	movs	r1, #0
 8000820:	4842      	ldr	r0, [pc, #264]	; (800092c <main+0x2d8>)
 8000822:	f002 fdb5 	bl	8003390 <memset>
	  					  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)== RESET){}
 8000826:	bf00      	nop
 8000828:	4b35      	ldr	r3, [pc, #212]	; (8000900 <main+0x2ac>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 0320 	and.w	r3, r3, #32
 8000832:	2b20      	cmp	r3, #32
 8000834:	d1f8      	bne.n	8000828 <main+0x1d4>
	  						HAL_UART_Receive(&huart3, (uint32_t*)&transmit, 100,1000);
 8000836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083a:	2264      	movs	r2, #100	; 0x64
 800083c:	493b      	ldr	r1, [pc, #236]	; (800092c <main+0x2d8>)
 800083e:	4830      	ldr	r0, [pc, #192]	; (8000900 <main+0x2ac>)
 8000840:	f002 f89d 	bl	800297e <HAL_UART_Receive>
	  	 	 		 while(transmit[0] == '\000'){
 8000844:	4b39      	ldr	r3, [pc, #228]	; (800092c <main+0x2d8>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d0e7      	beq.n	800081c <main+0x1c8>
	  	 	 		 }

	  	 	 		 while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800084c:	bf00      	nop
 800084e:	4b2c      	ldr	r3, [pc, #176]	; (8000900 <main+0x2ac>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	69db      	ldr	r3, [r3, #28]
 8000854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000858:	2b40      	cmp	r3, #64	; 0x40
 800085a:	d1f8      	bne.n	800084e <main+0x1fa>
	  	 	 		 HAL_UART_Transmit(&huart3, (uint32_t*)&transmit, 100, 1000);
 800085c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000860:	2264      	movs	r2, #100	; 0x64
 8000862:	4932      	ldr	r1, [pc, #200]	; (800092c <main+0x2d8>)
 8000864:	4826      	ldr	r0, [pc, #152]	; (8000900 <main+0x2ac>)
 8000866:	f002 f807 	bl	8002878 <HAL_UART_Transmit>

	  	 	 		if((transmit[0] == 'q'||transmit[0] == 'Q') && transmit[1] == '\000'){
 800086a:	4b30      	ldr	r3, [pc, #192]	; (800092c <main+0x2d8>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b71      	cmp	r3, #113	; 0x71
 8000870:	d003      	beq.n	800087a <main+0x226>
 8000872:	4b2e      	ldr	r3, [pc, #184]	; (800092c <main+0x2d8>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b51      	cmp	r3, #81	; 0x51
 8000878:	d127      	bne.n	80008ca <main+0x276>
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <main+0x2d8>)
 800087c:	785b      	ldrb	r3, [r3, #1]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d123      	bne.n	80008ca <main+0x276>

	  	 	 			while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000882:	bf00      	nop
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <main+0x2ac>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800088e:	2b40      	cmp	r3, #64	; 0x40
 8000890:	d1f8      	bne.n	8000884 <main+0x230>
	  	 	 			HAL_UART_Transmit(&huart3, (uint32_t)"\r\nUSER1 is disconected", 20, 1000);
 8000892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000896:	2214      	movs	r2, #20
 8000898:	4926      	ldr	r1, [pc, #152]	; (8000934 <main+0x2e0>)
 800089a:	4819      	ldr	r0, [pc, #100]	; (8000900 <main+0x2ac>)
 800089c:	f001 ffec 	bl	8002878 <HAL_UART_Transmit>
	  	 	 			sprintf(buffer,"%s",transmit);
 80008a0:	4a22      	ldr	r2, [pc, #136]	; (800092c <main+0x2d8>)
 80008a2:	4925      	ldr	r1, [pc, #148]	; (8000938 <main+0x2e4>)
 80008a4:	4820      	ldr	r0, [pc, #128]	; (8000928 <main+0x2d4>)
 80008a6:	f002 fd7b 	bl	80033a0 <siprintf>
	  	 	 			while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 80008aa:	bf00      	nop
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <main+0x2c0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b6:	2b40      	cmp	r3, #64	; 0x40
 80008b8:	d1f8      	bne.n	80008ac <main+0x258>
	  	 	 			HAL_UART_Transmit(&huart2, (uint32_t*)&buffer, 100, 1000);
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	2264      	movs	r2, #100	; 0x64
 80008c0:	4919      	ldr	r1, [pc, #100]	; (8000928 <main+0x2d4>)
 80008c2:	4814      	ldr	r0, [pc, #80]	; (8000914 <main+0x2c0>)
 80008c4:	f001 ffd8 	bl	8002878 <HAL_UART_Transmit>
	  	 	 			break;
 80008c8:	e07e      	b.n	80009c8 <main+0x374>

	  	 	 		}
	  	 	 		else{
	  	 	 		 sprintf(buffer,"\r\n\t%s : %s",username,transmit);
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <main+0x2d8>)
 80008cc:	4a10      	ldr	r2, [pc, #64]	; (8000910 <main+0x2bc>)
 80008ce:	491b      	ldr	r1, [pc, #108]	; (800093c <main+0x2e8>)
 80008d0:	4815      	ldr	r0, [pc, #84]	; (8000928 <main+0x2d4>)
 80008d2:	f002 fd65 	bl	80033a0 <siprintf>
	  	 	 		  while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 80008d6:	bf00      	nop
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <main+0x2c0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e2:	2b40      	cmp	r3, #64	; 0x40
 80008e4:	d1f8      	bne.n	80008d8 <main+0x284>
	  	 	 		  HAL_UART_Transmit(&huart2, (uint32_t*)&buffer, 100, 1000);
 80008e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ea:	2264      	movs	r2, #100	; 0x64
 80008ec:	490e      	ldr	r1, [pc, #56]	; (8000928 <main+0x2d4>)
 80008ee:	4809      	ldr	r0, [pc, #36]	; (8000914 <main+0x2c0>)
 80008f0:	f001 ffc2 	bl	8002878 <HAL_UART_Transmit>
	  	 	 		}



	  		  memset(name,0,sizeof(name));
 80008f4:	2264      	movs	r2, #100	; 0x64
 80008f6:	2100      	movs	r1, #0
 80008f8:	4808      	ldr	r0, [pc, #32]	; (800091c <main+0x2c8>)
 80008fa:	f002 fd49 	bl	8003390 <memset>

	  				  while(name[0] == '\000'){
 80008fe:	e033      	b.n	8000968 <main+0x314>
 8000900:	20000338 	.word	0x20000338
 8000904:	08003c94 	.word	0x08003c94
 8000908:	20000000 	.word	0x20000000
 800090c:	08003cb8 	.word	0x08003cb8
 8000910:	200000f8 	.word	0x200000f8
 8000914:	200002b0 	.word	0x200002b0
 8000918:	20000004 	.word	0x20000004
 800091c:	20000094 	.word	0x20000094
 8000920:	08003cc4 	.word	0x08003cc4
 8000924:	08003cc8 	.word	0x08003cc8
 8000928:	200001c0 	.word	0x200001c0
 800092c:	2000015c 	.word	0x2000015c
 8000930:	08003cd4 	.word	0x08003cd4
 8000934:	08003cd8 	.word	0x08003cd8
 8000938:	08003cf0 	.word	0x08003cf0
 800093c:	08003cf4 	.word	0x08003cf4
	  					  memset(name,0,sizeof(name));
 8000940:	2264      	movs	r2, #100	; 0x64
 8000942:	2100      	movs	r1, #0
 8000944:	4822      	ldr	r0, [pc, #136]	; (80009d0 <main+0x37c>)
 8000946:	f002 fd23 	bl	8003390 <memset>
	  					  while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE)== RESET){}
 800094a:	bf00      	nop
 800094c:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <main+0x380>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	f003 0320 	and.w	r3, r3, #32
 8000956:	2b20      	cmp	r3, #32
 8000958:	d1f8      	bne.n	800094c <main+0x2f8>
	  					  HAL_UART_Receive(&huart2, (uint32_t)&name, 100,1000);
 800095a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095e:	2264      	movs	r2, #100	; 0x64
 8000960:	491b      	ldr	r1, [pc, #108]	; (80009d0 <main+0x37c>)
 8000962:	481c      	ldr	r0, [pc, #112]	; (80009d4 <main+0x380>)
 8000964:	f002 f80b 	bl	800297e <HAL_UART_Receive>
	  				  while(name[0] == '\000'){
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <main+0x37c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d0e7      	beq.n	8000940 <main+0x2ec>

	  				  }
	  				  if((name[0] == 'q'||name[0] == 'Q') && name[1] == '\000'){
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <main+0x37c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b71      	cmp	r3, #113	; 0x71
 8000976:	d003      	beq.n	8000980 <main+0x32c>
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <main+0x37c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b51      	cmp	r3, #81	; 0x51
 800097e:	d113      	bne.n	80009a8 <main+0x354>
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <main+0x37c>)
 8000982:	785b      	ldrb	r3, [r3, #1]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d10f      	bne.n	80009a8 <main+0x354>
	  				  	state3 == 0;
	  				  	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000988:	bf00      	nop
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <main+0x384>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000994:	2b40      	cmp	r3, #64	; 0x40
 8000996:	d1f8      	bne.n	800098a <main+0x336>
	  				  	HAL_UART_Transmit(&huart3, (uint32_t)"\r\nUSER2 is disconected", 20, 1000);
 8000998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099c:	2214      	movs	r2, #20
 800099e:	490f      	ldr	r1, [pc, #60]	; (80009dc <main+0x388>)
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <main+0x384>)
 80009a2:	f001 ff69 	bl	8002878 <HAL_UART_Transmit>
	  				  	break;
 80009a6:	e00f      	b.n	80009c8 <main+0x374>
	  				  }
	  				  else{

	  					  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80009a8:	bf00      	nop
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <main+0x384>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b4:	2b40      	cmp	r3, #64	; 0x40
 80009b6:	d1f8      	bne.n	80009aa <main+0x356>
	  					  HAL_UART_Transmit(&huart3, (uint32_t)&name, 100, 1000);
 80009b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009bc:	2264      	movs	r2, #100	; 0x64
 80009be:	4904      	ldr	r1, [pc, #16]	; (80009d0 <main+0x37c>)
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <main+0x384>)
 80009c2:	f001 ff59 	bl	8002878 <HAL_UART_Transmit>
	  if (state1 == 1 ){
 80009c6:	e662      	b.n	800068e <main+0x3a>
 80009c8:	2300      	movs	r3, #0
	  				  }

  }
  /* USER CODE END 3 */
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000094 	.word	0x20000094
 80009d4:	200002b0 	.word	0x200002b0
 80009d8:	20000338 	.word	0x20000338
 80009dc:	08003d00 	.word	0x08003d00

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b094      	sub	sp, #80	; 0x50
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	2234      	movs	r2, #52	; 0x34
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 fcce 	bl	8003390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a04:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <SystemClock_Config+0xd4>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	4a2a      	ldr	r2, [pc, #168]	; (8000ab4 <SystemClock_Config+0xd4>)
 8000a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a10:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <SystemClock_Config+0xd4>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a1c:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <SystemClock_Config+0xd8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a25      	ldr	r2, [pc, #148]	; (8000ab8 <SystemClock_Config+0xd8>)
 8000a22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <SystemClock_Config+0xd8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a34:	2302      	movs	r3, #2
 8000a36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3c:	2310      	movs	r3, #16
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a40:	2302      	movs	r3, #2
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a44:	2300      	movs	r3, #0
 8000a46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a4c:	23d8      	movs	r3, #216	; 0xd8
 8000a4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a54:	2304      	movs	r3, #4
 8000a56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 fdbf 	bl	80015e4 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a6c:	f000 f826 	bl	8000abc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a70:	f000 fd68 	bl	8001544 <HAL_PWREx_EnableOverDrive>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a7a:	f000 f81f 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7e:	230f      	movs	r3, #15
 8000a80:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a82:	2302      	movs	r3, #2
 8000a84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a94:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	2107      	movs	r1, #7
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 f84f 	bl	8001b40 <HAL_RCC_ClockConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000aa8:	f000 f808 	bl	8000abc <Error_Handler>
  }
}
 8000aac:	bf00      	nop
 8000aae:	3750      	adds	r7, #80	; 0x50
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40007000 	.word	0x40007000

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_MspInit+0x44>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x44>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x44>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x44>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5c:	f000 fa40 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f002 fbd2 	bl	800333c <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <_sbrk+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20080000 	.word	0x20080000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	20000224 	.word	0x20000224
 8000bcc:	200003d8 	.word	0x200003d8

08000bd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000bfa:	4a15      	ldr	r2, [pc, #84]	; (8000c50 <MX_USART1_UART_Init+0x5c>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c38:	f001 fdd0 	bl	80027dc <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c42:	f7ff ff3b 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000228 	.word	0x20000228
 8000c50:	40011000 	.word	0x40011000

08000c54 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c5a:	4a15      	ldr	r2, [pc, #84]	; (8000cb0 <MX_USART2_UART_Init+0x5c>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_USART2_UART_Init+0x58>)
 8000c98:	f001 fda0 	bl	80027dc <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ca2:	f7ff ff0b 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200002b0 	.word	0x200002b0
 8000cb0:	40004400 	.word	0x40004400

08000cb4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cba:	4a15      	ldr	r2, [pc, #84]	; (8000d10 <MX_USART3_UART_Init+0x5c>)
 8000cbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cf8:	f001 fd70 	bl	80027dc <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d02:	f7ff fedb 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000338 	.word	0x20000338
 8000d10:	40004800 	.word	0x40004800

08000d14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b0b2      	sub	sp, #200	; 0xc8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	2290      	movs	r2, #144	; 0x90
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f002 fb2b 	bl	8003390 <memset>
  if(uartHandle->Instance==USART1)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a6e      	ldr	r2, [pc, #440]	; (8000ef8 <HAL_UART_MspInit+0x1e4>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d151      	bne.n	8000de8 <HAL_UART_MspInit+0xd4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d44:	2340      	movs	r3, #64	; 0x40
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 f91b 	bl	8001f8c <HAL_RCCEx_PeriphCLKConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d5c:	f7ff feae 	bl	8000abc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d60:	4b66      	ldr	r3, [pc, #408]	; (8000efc <HAL_UART_MspInit+0x1e8>)
 8000d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d64:	4a65      	ldr	r2, [pc, #404]	; (8000efc <HAL_UART_MspInit+0x1e8>)
 8000d66:	f043 0310 	orr.w	r3, r3, #16
 8000d6a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6c:	4b63      	ldr	r3, [pc, #396]	; (8000efc <HAL_UART_MspInit+0x1e8>)
 8000d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d70:	f003 0310 	and.w	r3, r3, #16
 8000d74:	623b      	str	r3, [r7, #32]
 8000d76:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b60      	ldr	r3, [pc, #384]	; (8000efc <HAL_UART_MspInit+0x1e8>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	4a5f      	ldr	r2, [pc, #380]	; (8000efc <HAL_UART_MspInit+0x1e8>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	6313      	str	r3, [r2, #48]	; 0x30
 8000d84:	4b5d      	ldr	r3, [pc, #372]	; (8000efc <HAL_UART_MspInit+0x1e8>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	61fb      	str	r3, [r7, #28]
 8000d8e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000daa:	2304      	movs	r3, #4
 8000dac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000db4:	4619      	mov	r1, r3
 8000db6:	4852      	ldr	r0, [pc, #328]	; (8000f00 <HAL_UART_MspInit+0x1ec>)
 8000db8:	f000 fa18 	bl	80011ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dbc:	2340      	movs	r3, #64	; 0x40
 8000dbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dda:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000dde:	4619      	mov	r1, r3
 8000de0:	4847      	ldr	r0, [pc, #284]	; (8000f00 <HAL_UART_MspInit+0x1ec>)
 8000de2:	f000 fa03 	bl	80011ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000de6:	e082      	b.n	8000eee <HAL_UART_MspInit+0x1da>
  else if(uartHandle->Instance==USART2)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a45      	ldr	r2, [pc, #276]	; (8000f04 <HAL_UART_MspInit+0x1f0>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d13b      	bne.n	8000e6a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 f8c4 	bl	8001f8c <HAL_RCCEx_PeriphCLKConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_UART_MspInit+0xfa>
      Error_Handler();
 8000e0a:	f7ff fe57 	bl	8000abc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0e:	4b3b      	ldr	r3, [pc, #236]	; (8000efc <HAL_UART_MspInit+0x1e8>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a3a      	ldr	r2, [pc, #232]	; (8000efc <HAL_UART_MspInit+0x1e8>)
 8000e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b38      	ldr	r3, [pc, #224]	; (8000efc <HAL_UART_MspInit+0x1e8>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	4b35      	ldr	r3, [pc, #212]	; (8000efc <HAL_UART_MspInit+0x1e8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a34      	ldr	r2, [pc, #208]	; (8000efc <HAL_UART_MspInit+0x1e8>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b32      	ldr	r3, [pc, #200]	; (8000efc <HAL_UART_MspInit+0x1e8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e3e:	230c      	movs	r3, #12
 8000e40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e56:	2307      	movs	r3, #7
 8000e58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4829      	ldr	r0, [pc, #164]	; (8000f08 <HAL_UART_MspInit+0x1f4>)
 8000e64:	f000 f9c2 	bl	80011ec <HAL_GPIO_Init>
}
 8000e68:	e041      	b.n	8000eee <HAL_UART_MspInit+0x1da>
  else if(uartHandle->Instance==USART3)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a27      	ldr	r2, [pc, #156]	; (8000f0c <HAL_UART_MspInit+0x1f8>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d13c      	bne.n	8000eee <HAL_UART_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 f882 	bl	8001f8c <HAL_RCCEx_PeriphCLKConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_UART_MspInit+0x17e>
      Error_Handler();
 8000e8e:	f7ff fe15 	bl	8000abc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <HAL_UART_MspInit+0x1e8>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a19      	ldr	r2, [pc, #100]	; (8000efc <HAL_UART_MspInit+0x1e8>)
 8000e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_UART_MspInit+0x1e8>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eaa:	4b14      	ldr	r3, [pc, #80]	; (8000efc <HAL_UART_MspInit+0x1e8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a13      	ldr	r2, [pc, #76]	; (8000efc <HAL_UART_MspInit+0x1e8>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <HAL_UART_MspInit+0x1e8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ec2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000edc:	2307      	movs	r3, #7
 8000ede:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <HAL_UART_MspInit+0x1fc>)
 8000eea:	f000 f97f 	bl	80011ec <HAL_GPIO_Init>
}
 8000eee:	bf00      	nop
 8000ef0:	37c8      	adds	r7, #200	; 0xc8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40011000 	.word	0x40011000
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020400 	.word	0x40020400
 8000f04:	40004400 	.word	0x40004400
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40004800 	.word	0x40004800
 8000f10:	40020c00 	.word	0x40020c00

08000f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f1a:	490e      	ldr	r1, [pc, #56]	; (8000f54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f30:	4c0b      	ldr	r4, [pc, #44]	; (8000f60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f3e:	f7ff fe47 	bl	8000bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f002 fa01 	bl	8003348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f46:	f7ff fb85 	bl	8000654 <main>
  bx  lr    
 8000f4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f4c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f58:	08003d74 	.word	0x08003d74
  ldr r2, =_sbss
 8000f5c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f60:	200003d4 	.word	0x200003d4

08000f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC_IRQHandler>

08000f66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f000 f90a 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f70:	2000      	movs	r0, #0
 8000f72:	f000 f805 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f76:	f7ff fda7 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x54>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x58>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f917 	bl	80011d2 <HAL_SYSTICK_Config>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00e      	b.n	8000fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b0f      	cmp	r3, #15
 8000fb2:	d80a      	bhi.n	8000fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 f8ed 	bl	800119a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <HAL_InitTick+0x5c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000010 	.word	0x20000010
 8000fdc:	2000000c 	.word	0x2000000c

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000010 	.word	0x20000010
 8001004:	200003c0 	.word	0x200003c0

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	200003c0 	.word	0x200003c0

08001020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <__NVIC_SetPriorityGrouping+0x40>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	4313      	orrs	r3, r2
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x40>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00
 8001064:	05fa0000 	.word	0x05fa0000

08001068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001150:	d301      	bcc.n	8001156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001152:	2301      	movs	r3, #1
 8001154:	e00f      	b.n	8001176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <SysTick_Config+0x40>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115e:	210f      	movs	r1, #15
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f7ff ff8e 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <SysTick_Config+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <SysTick_Config+0x40>)
 8001170:	2207      	movs	r2, #7
 8001172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000e010 	.word	0xe000e010

08001184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff47 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ac:	f7ff ff5c 	bl	8001068 <__NVIC_GetPriorityGrouping>
 80011b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f7ff ff8e 	bl	80010d8 <NVIC_EncodePriority>
 80011bc:	4602      	mov	r2, r0
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff5d 	bl	8001084 <__NVIC_SetPriority>
}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ffb0 	bl	8001140 <SysTick_Config>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
 800120a:	e175      	b.n	80014f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800120c:	2201      	movs	r2, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	429a      	cmp	r2, r3
 8001226:	f040 8164 	bne.w	80014f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	2b01      	cmp	r3, #1
 8001234:	d005      	beq.n	8001242 <HAL_GPIO_Init+0x56>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d130      	bne.n	80012a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001278:	2201      	movs	r2, #1
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	091b      	lsrs	r3, r3, #4
 800128e:	f003 0201 	and.w	r2, r3, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d017      	beq.n	80012e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d123      	bne.n	8001334 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	08da      	lsrs	r2, r3, #3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3208      	adds	r2, #8
 80012f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	220f      	movs	r2, #15
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	08da      	lsrs	r2, r3, #3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3208      	adds	r2, #8
 800132e:	69b9      	ldr	r1, [r7, #24]
 8001330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0203 	and.w	r2, r3, #3
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 80be 	beq.w	80014f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b66      	ldr	r3, [pc, #408]	; (8001510 <HAL_GPIO_Init+0x324>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a65      	ldr	r2, [pc, #404]	; (8001510 <HAL_GPIO_Init+0x324>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b63      	ldr	r3, [pc, #396]	; (8001510 <HAL_GPIO_Init+0x324>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800138e:	4a61      	ldr	r2, [pc, #388]	; (8001514 <HAL_GPIO_Init+0x328>)
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a58      	ldr	r2, [pc, #352]	; (8001518 <HAL_GPIO_Init+0x32c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d037      	beq.n	800142a <HAL_GPIO_Init+0x23e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a57      	ldr	r2, [pc, #348]	; (800151c <HAL_GPIO_Init+0x330>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d031      	beq.n	8001426 <HAL_GPIO_Init+0x23a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a56      	ldr	r2, [pc, #344]	; (8001520 <HAL_GPIO_Init+0x334>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d02b      	beq.n	8001422 <HAL_GPIO_Init+0x236>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a55      	ldr	r2, [pc, #340]	; (8001524 <HAL_GPIO_Init+0x338>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d025      	beq.n	800141e <HAL_GPIO_Init+0x232>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a54      	ldr	r2, [pc, #336]	; (8001528 <HAL_GPIO_Init+0x33c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d01f      	beq.n	800141a <HAL_GPIO_Init+0x22e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a53      	ldr	r2, [pc, #332]	; (800152c <HAL_GPIO_Init+0x340>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d019      	beq.n	8001416 <HAL_GPIO_Init+0x22a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a52      	ldr	r2, [pc, #328]	; (8001530 <HAL_GPIO_Init+0x344>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x226>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a51      	ldr	r2, [pc, #324]	; (8001534 <HAL_GPIO_Init+0x348>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x222>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a50      	ldr	r2, [pc, #320]	; (8001538 <HAL_GPIO_Init+0x34c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x21e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4f      	ldr	r2, [pc, #316]	; (800153c <HAL_GPIO_Init+0x350>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x21a>
 8001402:	2309      	movs	r3, #9
 8001404:	e012      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001406:	230a      	movs	r3, #10
 8001408:	e010      	b.n	800142c <HAL_GPIO_Init+0x240>
 800140a:	2308      	movs	r3, #8
 800140c:	e00e      	b.n	800142c <HAL_GPIO_Init+0x240>
 800140e:	2307      	movs	r3, #7
 8001410:	e00c      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001412:	2306      	movs	r3, #6
 8001414:	e00a      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001416:	2305      	movs	r3, #5
 8001418:	e008      	b.n	800142c <HAL_GPIO_Init+0x240>
 800141a:	2304      	movs	r3, #4
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x240>
 800141e:	2303      	movs	r3, #3
 8001420:	e004      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001422:	2302      	movs	r3, #2
 8001424:	e002      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_GPIO_Init+0x240>
 800142a:	2300      	movs	r3, #0
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	f002 0203 	and.w	r2, r2, #3
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	4093      	lsls	r3, r2
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800143c:	4935      	ldr	r1, [pc, #212]	; (8001514 <HAL_GPIO_Init+0x328>)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	3302      	adds	r3, #2
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <HAL_GPIO_Init+0x354>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800146e:	4a34      	ldr	r2, [pc, #208]	; (8001540 <HAL_GPIO_Init+0x354>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001474:	4b32      	ldr	r3, [pc, #200]	; (8001540 <HAL_GPIO_Init+0x354>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001498:	4a29      	ldr	r2, [pc, #164]	; (8001540 <HAL_GPIO_Init+0x354>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800149e:	4b28      	ldr	r3, [pc, #160]	; (8001540 <HAL_GPIO_Init+0x354>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014c2:	4a1f      	ldr	r2, [pc, #124]	; (8001540 <HAL_GPIO_Init+0x354>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_GPIO_Init+0x354>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ec:	4a14      	ldr	r2, [pc, #80]	; (8001540 <HAL_GPIO_Init+0x354>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3301      	adds	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	2b0f      	cmp	r3, #15
 80014fc:	f67f ae86 	bls.w	800120c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3724      	adds	r7, #36	; 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40013800 	.word	0x40013800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020400 	.word	0x40020400
 8001520:	40020800 	.word	0x40020800
 8001524:	40020c00 	.word	0x40020c00
 8001528:	40021000 	.word	0x40021000
 800152c:	40021400 	.word	0x40021400
 8001530:	40021800 	.word	0x40021800
 8001534:	40021c00 	.word	0x40021c00
 8001538:	40022000 	.word	0x40022000
 800153c:	40022400 	.word	0x40022400
 8001540:	40013c00 	.word	0x40013c00

08001544 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	4b23      	ldr	r3, [pc, #140]	; (80015dc <HAL_PWREx_EnableOverDrive+0x98>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a22      	ldr	r2, [pc, #136]	; (80015dc <HAL_PWREx_EnableOverDrive+0x98>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <HAL_PWREx_EnableOverDrive+0x98>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001566:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800156c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001570:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001572:	f7ff fd49 	bl	8001008 <HAL_GetTick>
 8001576:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001578:	e009      	b.n	800158e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800157a:	f7ff fd45 	bl	8001008 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001588:	d901      	bls.n	800158e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e022      	b.n	80015d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159a:	d1ee      	bne.n	800157a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a8:	f7ff fd2e 	bl	8001008 <HAL_GetTick>
 80015ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015ae:	e009      	b.n	80015c4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015b0:	f7ff fd2a 	bl	8001008 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015be:	d901      	bls.n	80015c4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e007      	b.n	80015d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015d0:	d1ee      	bne.n	80015b0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40007000 	.word	0x40007000

080015e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e29b      	b.n	8001b32 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 8087 	beq.w	8001716 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001608:	4b96      	ldr	r3, [pc, #600]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 030c 	and.w	r3, r3, #12
 8001610:	2b04      	cmp	r3, #4
 8001612:	d00c      	beq.n	800162e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001614:	4b93      	ldr	r3, [pc, #588]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 030c 	and.w	r3, r3, #12
 800161c:	2b08      	cmp	r3, #8
 800161e:	d112      	bne.n	8001646 <HAL_RCC_OscConfig+0x62>
 8001620:	4b90      	ldr	r3, [pc, #576]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800162c:	d10b      	bne.n	8001646 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162e:	4b8d      	ldr	r3, [pc, #564]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d06c      	beq.n	8001714 <HAL_RCC_OscConfig+0x130>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d168      	bne.n	8001714 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e275      	b.n	8001b32 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800164e:	d106      	bne.n	800165e <HAL_RCC_OscConfig+0x7a>
 8001650:	4b84      	ldr	r3, [pc, #528]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a83      	ldr	r2, [pc, #524]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	e02e      	b.n	80016bc <HAL_RCC_OscConfig+0xd8>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10c      	bne.n	8001680 <HAL_RCC_OscConfig+0x9c>
 8001666:	4b7f      	ldr	r3, [pc, #508]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a7e      	ldr	r2, [pc, #504]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 800166c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	4b7c      	ldr	r3, [pc, #496]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a7b      	ldr	r2, [pc, #492]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e01d      	b.n	80016bc <HAL_RCC_OscConfig+0xd8>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0xc0>
 800168a:	4b76      	ldr	r3, [pc, #472]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a75      	ldr	r2, [pc, #468]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b73      	ldr	r3, [pc, #460]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a72      	ldr	r2, [pc, #456]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0xd8>
 80016a4:	4b6f      	ldr	r3, [pc, #444]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a6e      	ldr	r2, [pc, #440]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 80016aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b6c      	ldr	r3, [pc, #432]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a6b      	ldr	r2, [pc, #428]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 80016b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d013      	beq.n	80016ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff fca0 	bl	8001008 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016cc:	f7ff fc9c 	bl	8001008 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	; 0x64
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e229      	b.n	8001b32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b61      	ldr	r3, [pc, #388]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0xe8>
 80016ea:	e014      	b.n	8001716 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff fc8c 	bl	8001008 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fc88 	bl	8001008 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	; 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e215      	b.n	8001b32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001706:	4b57      	ldr	r3, [pc, #348]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x110>
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d069      	beq.n	80017f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001722:	4b50      	ldr	r3, [pc, #320]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00b      	beq.n	8001746 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800172e:	4b4d      	ldr	r3, [pc, #308]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	2b08      	cmp	r3, #8
 8001738:	d11c      	bne.n	8001774 <HAL_RCC_OscConfig+0x190>
 800173a:	4b4a      	ldr	r3, [pc, #296]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d116      	bne.n	8001774 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001746:	4b47      	ldr	r3, [pc, #284]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <HAL_RCC_OscConfig+0x17a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d001      	beq.n	800175e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e1e9      	b.n	8001b32 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175e:	4b41      	ldr	r3, [pc, #260]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	493d      	ldr	r1, [pc, #244]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001772:	e040      	b.n	80017f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d023      	beq.n	80017c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177c:	4b39      	ldr	r3, [pc, #228]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a38      	ldr	r2, [pc, #224]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff fc3e 	bl	8001008 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001790:	f7ff fc3a 	bl	8001008 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1c7      	b.n	8001b32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a2:	4b30      	ldr	r3, [pc, #192]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ae:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4929      	ldr	r1, [pc, #164]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	600b      	str	r3, [r1, #0]
 80017c2:	e018      	b.n	80017f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c4:	4b27      	ldr	r3, [pc, #156]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a26      	ldr	r2, [pc, #152]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fc1a 	bl	8001008 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d8:	f7ff fc16 	bl	8001008 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e1a3      	b.n	8001b32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ea:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d038      	beq.n	8001874 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d019      	beq.n	800183e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 800180c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800180e:	4a15      	ldr	r2, [pc, #84]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001816:	f7ff fbf7 	bl	8001008 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181e:	f7ff fbf3 	bl	8001008 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e180      	b.n	8001b32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x23a>
 800183c:	e01a      	b.n	8001874 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001842:	4a08      	ldr	r2, [pc, #32]	; (8001864 <HAL_RCC_OscConfig+0x280>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184a:	f7ff fbdd 	bl	8001008 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001852:	f7ff fbd9 	bl	8001008 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d903      	bls.n	8001868 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e166      	b.n	8001b32 <HAL_RCC_OscConfig+0x54e>
 8001864:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001868:	4b92      	ldr	r3, [pc, #584]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 800186a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ee      	bne.n	8001852 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 80a4 	beq.w	80019ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001882:	4b8c      	ldr	r3, [pc, #560]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10d      	bne.n	80018aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800188e:	4b89      	ldr	r3, [pc, #548]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a88      	ldr	r2, [pc, #544]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b86      	ldr	r3, [pc, #536]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018a6:	2301      	movs	r3, #1
 80018a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018aa:	4b83      	ldr	r3, [pc, #524]	; (8001ab8 <HAL_RCC_OscConfig+0x4d4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d118      	bne.n	80018e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80018b6:	4b80      	ldr	r3, [pc, #512]	; (8001ab8 <HAL_RCC_OscConfig+0x4d4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a7f      	ldr	r2, [pc, #508]	; (8001ab8 <HAL_RCC_OscConfig+0x4d4>)
 80018bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c2:	f7ff fba1 	bl	8001008 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ca:	f7ff fb9d 	bl	8001008 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b64      	cmp	r3, #100	; 0x64
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e12a      	b.n	8001b32 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018dc:	4b76      	ldr	r3, [pc, #472]	; (8001ab8 <HAL_RCC_OscConfig+0x4d4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x31a>
 80018f0:	4b70      	ldr	r3, [pc, #448]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f4:	4a6f      	ldr	r2, [pc, #444]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6713      	str	r3, [r2, #112]	; 0x70
 80018fc:	e02d      	b.n	800195a <HAL_RCC_OscConfig+0x376>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x33c>
 8001906:	4b6b      	ldr	r3, [pc, #428]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190a:	4a6a      	ldr	r2, [pc, #424]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	6713      	str	r3, [r2, #112]	; 0x70
 8001912:	4b68      	ldr	r3, [pc, #416]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	4a67      	ldr	r2, [pc, #412]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001918:	f023 0304 	bic.w	r3, r3, #4
 800191c:	6713      	str	r3, [r2, #112]	; 0x70
 800191e:	e01c      	b.n	800195a <HAL_RCC_OscConfig+0x376>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b05      	cmp	r3, #5
 8001926:	d10c      	bne.n	8001942 <HAL_RCC_OscConfig+0x35e>
 8001928:	4b62      	ldr	r3, [pc, #392]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192c:	4a61      	ldr	r2, [pc, #388]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 800192e:	f043 0304 	orr.w	r3, r3, #4
 8001932:	6713      	str	r3, [r2, #112]	; 0x70
 8001934:	4b5f      	ldr	r3, [pc, #380]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001938:	4a5e      	ldr	r2, [pc, #376]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6713      	str	r3, [r2, #112]	; 0x70
 8001940:	e00b      	b.n	800195a <HAL_RCC_OscConfig+0x376>
 8001942:	4b5c      	ldr	r3, [pc, #368]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	4a5b      	ldr	r2, [pc, #364]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	6713      	str	r3, [r2, #112]	; 0x70
 800194e:	4b59      	ldr	r3, [pc, #356]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001952:	4a58      	ldr	r2, [pc, #352]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001954:	f023 0304 	bic.w	r3, r3, #4
 8001958:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d015      	beq.n	800198e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001962:	f7ff fb51 	bl	8001008 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001968:	e00a      	b.n	8001980 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196a:	f7ff fb4d 	bl	8001008 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f241 3288 	movw	r2, #5000	; 0x1388
 8001978:	4293      	cmp	r3, r2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e0d8      	b.n	8001b32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001980:	4b4c      	ldr	r3, [pc, #304]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0ee      	beq.n	800196a <HAL_RCC_OscConfig+0x386>
 800198c:	e014      	b.n	80019b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198e:	f7ff fb3b 	bl	8001008 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001994:	e00a      	b.n	80019ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001996:	f7ff fb37 	bl	8001008 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e0c2      	b.n	8001b32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ac:	4b41      	ldr	r3, [pc, #260]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 80019ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1ee      	bne.n	8001996 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019b8:	7dfb      	ldrb	r3, [r7, #23]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d105      	bne.n	80019ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019be:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a3c      	ldr	r2, [pc, #240]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 80019c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 80ae 	beq.w	8001b30 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019d4:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 030c 	and.w	r3, r3, #12
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d06d      	beq.n	8001abc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d14b      	bne.n	8001a80 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e8:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a31      	ldr	r2, [pc, #196]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 80019ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff fb08 	bl	8001008 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fc:	f7ff fb04 	bl	8001008 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e091      	b.n	8001b32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0e:	4b29      	ldr	r3, [pc, #164]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69da      	ldr	r2, [r3, #28]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	019b      	lsls	r3, r3, #6
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	3b01      	subs	r3, #1
 8001a34:	041b      	lsls	r3, r3, #16
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	061b      	lsls	r3, r3, #24
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	071b      	lsls	r3, r3, #28
 8001a46:	491b      	ldr	r1, [pc, #108]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a18      	ldr	r2, [pc, #96]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7ff fad6 	bl	8001008 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff fad2 	bl	8001008 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e05f      	b.n	8001b32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x47c>
 8001a7e:	e057      	b.n	8001b30 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001a86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fabc 	bl	8001008 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff fab8 	bl	8001008 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e045      	b.n	8001b32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa6:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_RCC_OscConfig+0x4d0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4b0>
 8001ab2:	e03d      	b.n	8001b30 <HAL_RCC_OscConfig+0x54c>
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <HAL_RCC_OscConfig+0x558>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d030      	beq.n	8001b2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d129      	bne.n	8001b2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d122      	bne.n	8001b2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aec:	4013      	ands	r3, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001af2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d119      	bne.n	8001b2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b02:	085b      	lsrs	r3, r3, #1
 8001b04:	3b01      	subs	r3, #1
 8001b06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d10f      	bne.n	8001b2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d107      	bne.n	8001b2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800

08001b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0d0      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b58:	4b6a      	ldr	r3, [pc, #424]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d910      	bls.n	8001b88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b67      	ldr	r3, [pc, #412]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 020f 	bic.w	r2, r3, #15
 8001b6e:	4965      	ldr	r1, [pc, #404]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	4b63      	ldr	r3, [pc, #396]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0b8      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d020      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba0:	4b59      	ldr	r3, [pc, #356]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	4a58      	ldr	r2, [pc, #352]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001baa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bb8:	4b53      	ldr	r3, [pc, #332]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	4a52      	ldr	r2, [pc, #328]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	4b50      	ldr	r3, [pc, #320]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	494d      	ldr	r1, [pc, #308]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d040      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	4b47      	ldr	r3, [pc, #284]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d115      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e07f      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d109      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e073      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c12:	4b3d      	ldr	r3, [pc, #244]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e06b      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c22:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f023 0203 	bic.w	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4936      	ldr	r1, [pc, #216]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c34:	f7ff f9e8 	bl	8001008 <HAL_GetTick>
 8001c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3c:	f7ff f9e4 	bl	8001008 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e053      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 020c 	and.w	r2, r3, #12
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d1eb      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d210      	bcs.n	8001c94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c72:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 020f 	bic.w	r2, r3, #15
 8001c7a:	4922      	ldr	r1, [pc, #136]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c82:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e032      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4916      	ldr	r1, [pc, #88]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d009      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cbe:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	490e      	ldr	r1, [pc, #56]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cd2:	f000 f821 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	490a      	ldr	r1, [pc, #40]	; (8001d0c <HAL_RCC_ClockConfig+0x1cc>)
 8001ce4:	5ccb      	ldrb	r3, [r1, r3]
 8001ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cea:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <HAL_RCC_ClockConfig+0x1d0>)
 8001cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_RCC_ClockConfig+0x1d4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff f944 	bl	8000f80 <HAL_InitTick>

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023c00 	.word	0x40023c00
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	08003d18 	.word	0x08003d18
 8001d10:	20000008 	.word	0x20000008
 8001d14:	2000000c 	.word	0x2000000c

08001d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d1c:	b094      	sub	sp, #80	; 0x50
 8001d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	647b      	str	r3, [r7, #68]	; 0x44
 8001d24:	2300      	movs	r3, #0
 8001d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d28:	2300      	movs	r3, #0
 8001d2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d30:	4b79      	ldr	r3, [pc, #484]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d00d      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x40>
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	f200 80e1 	bhi.w	8001f04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0x34>
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d003      	beq.n	8001d52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d4a:	e0db      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d4c:	4b73      	ldr	r3, [pc, #460]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d50:	e0db      	b.n	8001f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d52:	4b73      	ldr	r3, [pc, #460]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d56:	e0d8      	b.n	8001f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d58:	4b6f      	ldr	r3, [pc, #444]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d60:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d62:	4b6d      	ldr	r3, [pc, #436]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d063      	beq.n	8001e36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6e:	4b6a      	ldr	r3, [pc, #424]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	099b      	lsrs	r3, r3, #6
 8001d74:	2200      	movs	r2, #0
 8001d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d80:	633b      	str	r3, [r7, #48]	; 0x30
 8001d82:	2300      	movs	r3, #0
 8001d84:	637b      	str	r3, [r7, #52]	; 0x34
 8001d86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d8a:	4622      	mov	r2, r4
 8001d8c:	462b      	mov	r3, r5
 8001d8e:	f04f 0000 	mov.w	r0, #0
 8001d92:	f04f 0100 	mov.w	r1, #0
 8001d96:	0159      	lsls	r1, r3, #5
 8001d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d9c:	0150      	lsls	r0, r2, #5
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4621      	mov	r1, r4
 8001da4:	1a51      	subs	r1, r2, r1
 8001da6:	6139      	str	r1, [r7, #16]
 8001da8:	4629      	mov	r1, r5
 8001daa:	eb63 0301 	sbc.w	r3, r3, r1
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dbc:	4659      	mov	r1, fp
 8001dbe:	018b      	lsls	r3, r1, #6
 8001dc0:	4651      	mov	r1, sl
 8001dc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dc6:	4651      	mov	r1, sl
 8001dc8:	018a      	lsls	r2, r1, #6
 8001dca:	4651      	mov	r1, sl
 8001dcc:	ebb2 0801 	subs.w	r8, r2, r1
 8001dd0:	4659      	mov	r1, fp
 8001dd2:	eb63 0901 	sbc.w	r9, r3, r1
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dea:	4690      	mov	r8, r2
 8001dec:	4699      	mov	r9, r3
 8001dee:	4623      	mov	r3, r4
 8001df0:	eb18 0303 	adds.w	r3, r8, r3
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	462b      	mov	r3, r5
 8001df8:	eb49 0303 	adc.w	r3, r9, r3
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	024b      	lsls	r3, r1, #9
 8001e0e:	4621      	mov	r1, r4
 8001e10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e14:	4621      	mov	r1, r4
 8001e16:	024a      	lsls	r2, r1, #9
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e1e:	2200      	movs	r2, #0
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e28:	f7fe fa62 	bl	80002f0 <__aeabi_uldivmod>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4613      	mov	r3, r2
 8001e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e34:	e058      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e36:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	099b      	lsrs	r3, r3, #6
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	4611      	mov	r1, r2
 8001e42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e46:	623b      	str	r3, [r7, #32]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e50:	4642      	mov	r2, r8
 8001e52:	464b      	mov	r3, r9
 8001e54:	f04f 0000 	mov.w	r0, #0
 8001e58:	f04f 0100 	mov.w	r1, #0
 8001e5c:	0159      	lsls	r1, r3, #5
 8001e5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e62:	0150      	lsls	r0, r2, #5
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4641      	mov	r1, r8
 8001e6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e6e:	4649      	mov	r1, r9
 8001e70:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e88:	ebb2 040a 	subs.w	r4, r2, sl
 8001e8c:	eb63 050b 	sbc.w	r5, r3, fp
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	00eb      	lsls	r3, r5, #3
 8001e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e9e:	00e2      	lsls	r2, r4, #3
 8001ea0:	4614      	mov	r4, r2
 8001ea2:	461d      	mov	r5, r3
 8001ea4:	4643      	mov	r3, r8
 8001ea6:	18e3      	adds	r3, r4, r3
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	464b      	mov	r3, r9
 8001eac:	eb45 0303 	adc.w	r3, r5, r3
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	028b      	lsls	r3, r1, #10
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ec8:	4621      	mov	r1, r4
 8001eca:	028a      	lsls	r2, r1, #10
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
 8001ed6:	61fa      	str	r2, [r7, #28]
 8001ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001edc:	f7fe fa08 	bl	80002f0 <__aeabi_uldivmod>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001ef8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f02:	e002      	b.n	8001f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8001f06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3750      	adds	r7, #80	; 0x50
 8001f10:	46bd      	mov	sp, r7
 8001f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	00f42400 	.word	0x00f42400
 8001f20:	007a1200 	.word	0x007a1200

08001f24 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000008 	.word	0x20000008

08001f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f40:	f7ff fff0 	bl	8001f24 <HAL_RCC_GetHCLKFreq>
 8001f44:	4602      	mov	r2, r0
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	0a9b      	lsrs	r3, r3, #10
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	4903      	ldr	r1, [pc, #12]	; (8001f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f52:	5ccb      	ldrb	r3, [r1, r3]
 8001f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	08003d28 	.word	0x08003d28

08001f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f68:	f7ff ffdc 	bl	8001f24 <HAL_RCC_GetHCLKFreq>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	0b5b      	lsrs	r3, r3, #13
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	4903      	ldr	r1, [pc, #12]	; (8001f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40023800 	.word	0x40023800
 8001f88:	08003d28 	.word	0x08003d28

08001f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d012      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fb4:	4b69      	ldr	r3, [pc, #420]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	4a68      	ldr	r2, [pc, #416]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fbe:	6093      	str	r3, [r2, #8]
 8001fc0:	4b66      	ldr	r3, [pc, #408]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc8:	4964      	ldr	r1, [pc, #400]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d017      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fe6:	4b5d      	ldr	r3, [pc, #372]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff4:	4959      	ldr	r1, [pc, #356]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002004:	d101      	bne.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002006:	2301      	movs	r3, #1
 8002008:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002012:	2301      	movs	r3, #1
 8002014:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d017      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002022:	4b4e      	ldr	r3, [pc, #312]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002028:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	494a      	ldr	r1, [pc, #296]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002040:	d101      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002042:	2301      	movs	r3, #1
 8002044:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800204e:	2301      	movs	r3, #1
 8002050:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800205e:	2301      	movs	r3, #1
 8002060:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 808b 	beq.w	8002186 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	4b3a      	ldr	r3, [pc, #232]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	4a39      	ldr	r2, [pc, #228]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207a:	6413      	str	r3, [r2, #64]	; 0x40
 800207c:	4b37      	ldr	r3, [pc, #220]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002088:	4b35      	ldr	r3, [pc, #212]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a34      	ldr	r2, [pc, #208]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800208e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002092:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002094:	f7fe ffb8 	bl	8001008 <HAL_GetTick>
 8002098:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209c:	f7fe ffb4 	bl	8001008 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	; 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e38f      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020ae:	4b2c      	ldr	r3, [pc, #176]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ba:	4b28      	ldr	r3, [pc, #160]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d035      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d02e      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020d8:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020e2:	4b1e      	ldr	r3, [pc, #120]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e6:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020ee:	4b1b      	ldr	r3, [pc, #108]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	4a1a      	ldr	r2, [pc, #104]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80020fa:	4a18      	ldr	r2, [pc, #96]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002100:	4b16      	ldr	r3, [pc, #88]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d114      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7fe ff7c 	bl	8001008 <HAL_GetTick>
 8002110:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002112:	e00a      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002114:	f7fe ff78 	bl	8001008 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002122:	4293      	cmp	r3, r2
 8002124:	d901      	bls.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e351      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0ee      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002142:	d111      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002152:	400b      	ands	r3, r1
 8002154:	4901      	ldr	r1, [pc, #4]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002156:	4313      	orrs	r3, r2
 8002158:	608b      	str	r3, [r1, #8]
 800215a:	e00b      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800215c:	40023800 	.word	0x40023800
 8002160:	40007000 	.word	0x40007000
 8002164:	0ffffcff 	.word	0x0ffffcff
 8002168:	4bac      	ldr	r3, [pc, #688]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	4aab      	ldr	r2, [pc, #684]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002172:	6093      	str	r3, [r2, #8]
 8002174:	4ba9      	ldr	r3, [pc, #676]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002176:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002180:	49a6      	ldr	r1, [pc, #664]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002182:	4313      	orrs	r3, r2
 8002184:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	d010      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002192:	4ba2      	ldr	r3, [pc, #648]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002198:	4aa0      	ldr	r2, [pc, #640]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800219a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800219e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021a2:	4b9e      	ldr	r3, [pc, #632]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ac:	499b      	ldr	r1, [pc, #620]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021c0:	4b96      	ldr	r3, [pc, #600]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ce:	4993      	ldr	r1, [pc, #588]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021e2:	4b8e      	ldr	r3, [pc, #568]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021f0:	498a      	ldr	r1, [pc, #552]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002204:	4b85      	ldr	r3, [pc, #532]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002212:	4982      	ldr	r1, [pc, #520]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002226:	4b7d      	ldr	r3, [pc, #500]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	4979      	ldr	r1, [pc, #484]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002248:	4b74      	ldr	r3, [pc, #464]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	f023 0203 	bic.w	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	4971      	ldr	r1, [pc, #452]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800226a:	4b6c      	ldr	r3, [pc, #432]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002270:	f023 020c 	bic.w	r2, r3, #12
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002278:	4968      	ldr	r1, [pc, #416]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800228c:	4b63      	ldr	r3, [pc, #396]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002292:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	4960      	ldr	r1, [pc, #384]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022ae:	4b5b      	ldr	r3, [pc, #364]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022bc:	4957      	ldr	r1, [pc, #348]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022d0:	4b52      	ldr	r3, [pc, #328]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022de:	494f      	ldr	r1, [pc, #316]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80022f2:	4b4a      	ldr	r3, [pc, #296]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	4946      	ldr	r1, [pc, #280]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002314:	4b41      	ldr	r3, [pc, #260]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002322:	493e      	ldr	r1, [pc, #248]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002336:	4b39      	ldr	r3, [pc, #228]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002344:	4935      	ldr	r1, [pc, #212]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00a      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002358:	4b30      	ldr	r3, [pc, #192]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002366:	492d      	ldr	r1, [pc, #180]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d011      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800237a:	4b28      	ldr	r3, [pc, #160]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800237c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002380:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002388:	4924      	ldr	r1, [pc, #144]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002398:	d101      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800239a:	2301      	movs	r3, #1
 800239c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80023aa:	2301      	movs	r3, #1
 80023ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c8:	4914      	ldr	r1, [pc, #80]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00b      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ec:	490b      	ldr	r1, [pc, #44]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00f      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002406:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002410:	4902      	ldr	r1, [pc, #8]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002418:	e002      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00b      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800242c:	4b8a      	ldr	r3, [pc, #552]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800242e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002432:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243c:	4986      	ldr	r1, [pc, #536]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00b      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002450:	4b81      	ldr	r3, [pc, #516]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002456:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002460:	497d      	ldr	r1, [pc, #500]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d006      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80d6 	beq.w	8002628 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800247c:	4b76      	ldr	r3, [pc, #472]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a75      	ldr	r2, [pc, #468]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002482:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002486:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002488:	f7fe fdbe 	bl	8001008 <HAL_GetTick>
 800248c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002490:	f7fe fdba 	bl	8001008 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e195      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024a2:	4b6d      	ldr	r3, [pc, #436]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d021      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x572>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d11d      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024c2:	4b65      	ldr	r3, [pc, #404]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c8:	0c1b      	lsrs	r3, r3, #16
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024d0:	4b61      	ldr	r3, [pc, #388]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024d6:	0e1b      	lsrs	r3, r3, #24
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	019a      	lsls	r2, r3, #6
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	041b      	lsls	r3, r3, #16
 80024e8:	431a      	orrs	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	061b      	lsls	r3, r3, #24
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	071b      	lsls	r3, r3, #28
 80024f6:	4958      	ldr	r1, [pc, #352]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002512:	d00a      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800251c:	2b00      	cmp	r3, #0
 800251e:	d02e      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002528:	d129      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800252a:	4b4b      	ldr	r3, [pc, #300]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800252c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002538:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800253a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800253e:	0f1b      	lsrs	r3, r3, #28
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	019a      	lsls	r2, r3, #6
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	041b      	lsls	r3, r3, #16
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	061b      	lsls	r3, r3, #24
 8002558:	431a      	orrs	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	071b      	lsls	r3, r3, #28
 800255e:	493e      	ldr	r1, [pc, #248]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002566:	4b3c      	ldr	r3, [pc, #240]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800256c:	f023 021f 	bic.w	r2, r3, #31
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	3b01      	subs	r3, #1
 8002576:	4938      	ldr	r1, [pc, #224]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d01d      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800258a:	4b33      	ldr	r3, [pc, #204]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800258c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002590:	0e1b      	lsrs	r3, r3, #24
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002598:	4b2f      	ldr	r3, [pc, #188]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800259a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800259e:	0f1b      	lsrs	r3, r3, #28
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	019a      	lsls	r2, r3, #6
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	041b      	lsls	r3, r3, #16
 80025b2:	431a      	orrs	r2, r3
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	061b      	lsls	r3, r3, #24
 80025b8:	431a      	orrs	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	071b      	lsls	r3, r3, #28
 80025be:	4926      	ldr	r1, [pc, #152]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d011      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	019a      	lsls	r2, r3, #6
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	061b      	lsls	r3, r3, #24
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	071b      	lsls	r3, r3, #28
 80025ee:	491a      	ldr	r1, [pc, #104]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025f6:	4b18      	ldr	r3, [pc, #96]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a17      	ldr	r2, [pc, #92]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002600:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002602:	f7fe fd01 	bl	8001008 <HAL_GetTick>
 8002606:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002608:	e008      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800260a:	f7fe fcfd 	bl	8001008 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b64      	cmp	r3, #100	; 0x64
 8002616:	d901      	bls.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e0d8      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800261c:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2b01      	cmp	r3, #1
 800262c:	f040 80ce 	bne.w	80027cc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a08      	ldr	r2, [pc, #32]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800263c:	f7fe fce4 	bl	8001008 <HAL_GetTick>
 8002640:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002642:	e00b      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002644:	f7fe fce0 	bl	8001008 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d904      	bls.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e0bb      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800265c:	4b5e      	ldr	r3, [pc, #376]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002668:	d0ec      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002686:	2b00      	cmp	r3, #0
 8002688:	d02e      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	d12a      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002692:	4b51      	ldr	r3, [pc, #324]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026a0:	4b4d      	ldr	r3, [pc, #308]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	0f1b      	lsrs	r3, r3, #28
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	019a      	lsls	r2, r3, #6
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	041b      	lsls	r3, r3, #16
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	061b      	lsls	r3, r3, #24
 80026c0:	431a      	orrs	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	071b      	lsls	r3, r3, #28
 80026c6:	4944      	ldr	r1, [pc, #272]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026ce:	4b42      	ldr	r3, [pc, #264]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	3b01      	subs	r3, #1
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	493d      	ldr	r1, [pc, #244]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d022      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026fc:	d11d      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026fe:	4b36      	ldr	r3, [pc, #216]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002704:	0e1b      	lsrs	r3, r3, #24
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800270c:	4b32      	ldr	r3, [pc, #200]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	0f1b      	lsrs	r3, r3, #28
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	019a      	lsls	r2, r3, #6
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	041b      	lsls	r3, r3, #16
 8002726:	431a      	orrs	r2, r3
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	061b      	lsls	r3, r3, #24
 800272c:	431a      	orrs	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	071b      	lsls	r3, r3, #28
 8002732:	4929      	ldr	r1, [pc, #164]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d028      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002746:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274c:	0e1b      	lsrs	r3, r3, #24
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002754:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275a:	0c1b      	lsrs	r3, r3, #16
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	019a      	lsls	r2, r3, #6
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	041b      	lsls	r3, r3, #16
 800276c:	431a      	orrs	r2, r3
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	061b      	lsls	r3, r3, #24
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	071b      	lsls	r3, r3, #28
 800277a:	4917      	ldr	r1, [pc, #92]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002788:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	4911      	ldr	r1, [pc, #68]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0e      	ldr	r2, [pc, #56]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800279e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a4:	f7fe fc30 	bl	8001008 <HAL_GetTick>
 80027a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027ac:	f7fe fc2c 	bl	8001008 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e007      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ca:	d1ef      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800

080027dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e040      	b.n	8002870 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fe fa88 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2224      	movs	r2, #36	; 0x24
 8002808:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0201 	bic.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f974 	bl	8002b08 <UART_SetConfig>
 8002820:	4603      	mov	r3, r0
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e022      	b.n	8002870 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fbcc 	bl	8002fd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002846:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002856:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fc53 	bl	8003114 <UART_CheckIdleState>
 800286e:	4603      	mov	r3, r0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	4613      	mov	r3, r2
 8002886:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800288c:	2b20      	cmp	r3, #32
 800288e:	d171      	bne.n	8002974 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <HAL_UART_Transmit+0x24>
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e06a      	b.n	8002976 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2221      	movs	r2, #33	; 0x21
 80028ac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ae:	f7fe fbab 	bl	8001008 <HAL_GetTick>
 80028b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	88fa      	ldrh	r2, [r7, #6]
 80028b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	88fa      	ldrh	r2, [r7, #6]
 80028c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028cc:	d108      	bne.n	80028e0 <HAL_UART_Transmit+0x68>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d104      	bne.n	80028e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	e003      	b.n	80028e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028e8:	e02c      	b.n	8002944 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2200      	movs	r2, #0
 80028f2:	2180      	movs	r1, #128	; 0x80
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 fc5a 	bl	80031ae <UART_WaitOnFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e038      	b.n	8002976 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10b      	bne.n	8002922 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002918:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	3302      	adds	r3, #2
 800291e:	61bb      	str	r3, [r7, #24]
 8002920:	e007      	b.n	8002932 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	3301      	adds	r3, #1
 8002930:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800294a:	b29b      	uxth	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1cc      	bne.n	80028ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2200      	movs	r2, #0
 8002958:	2140      	movs	r1, #64	; 0x40
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 fc27 	bl	80031ae <UART_WaitOnFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e005      	b.n	8002976 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2220      	movs	r2, #32
 800296e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	e000      	b.n	8002976 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002974:	2302      	movs	r3, #2
  }
}
 8002976:	4618      	mov	r0, r3
 8002978:	3720      	adds	r7, #32
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b08a      	sub	sp, #40	; 0x28
 8002982:	af02      	add	r7, sp, #8
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	4613      	mov	r3, r2
 800298c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002994:	2b20      	cmp	r3, #32
 8002996:	f040 80b1 	bne.w	8002afc <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_UART_Receive+0x28>
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e0a9      	b.n	8002afe <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2222      	movs	r2, #34	; 0x22
 80029b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029c0:	f7fe fb22 	bl	8001008 <HAL_GetTick>
 80029c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	88fa      	ldrh	r2, [r7, #6]
 80029ca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	88fa      	ldrh	r2, [r7, #6]
 80029d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029de:	d10e      	bne.n	80029fe <HAL_UART_Receive+0x80>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d105      	bne.n	80029f4 <HAL_UART_Receive+0x76>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80029ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029f2:	e02d      	b.n	8002a50 <HAL_UART_Receive+0xd2>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	22ff      	movs	r2, #255	; 0xff
 80029f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029fc:	e028      	b.n	8002a50 <HAL_UART_Receive+0xd2>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10d      	bne.n	8002a22 <HAL_UART_Receive+0xa4>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d104      	bne.n	8002a18 <HAL_UART_Receive+0x9a>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	22ff      	movs	r2, #255	; 0xff
 8002a12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a16:	e01b      	b.n	8002a50 <HAL_UART_Receive+0xd2>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	227f      	movs	r2, #127	; 0x7f
 8002a1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a20:	e016      	b.n	8002a50 <HAL_UART_Receive+0xd2>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a2a:	d10d      	bne.n	8002a48 <HAL_UART_Receive+0xca>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d104      	bne.n	8002a3e <HAL_UART_Receive+0xc0>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	227f      	movs	r2, #127	; 0x7f
 8002a38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a3c:	e008      	b.n	8002a50 <HAL_UART_Receive+0xd2>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	223f      	movs	r2, #63	; 0x3f
 8002a42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a46:	e003      	b.n	8002a50 <HAL_UART_Receive+0xd2>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002a56:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a60:	d108      	bne.n	8002a74 <HAL_UART_Receive+0xf6>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d104      	bne.n	8002a74 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	e003      	b.n	8002a7c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002a7c:	e032      	b.n	8002ae4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2200      	movs	r2, #0
 8002a86:	2120      	movs	r1, #32
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 fb90 	bl	80031ae <UART_WaitOnFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e032      	b.n	8002afe <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	8a7b      	ldrh	r3, [r7, #18]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	e00c      	b.n	8002ad2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	8a7b      	ldrh	r3, [r7, #18]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1c6      	bne.n	8002a7e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e000      	b.n	8002afe <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	4ba6      	ldr	r3, [pc, #664]	; (8002dcc <UART_SetConfig+0x2c4>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	6979      	ldr	r1, [r7, #20]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a94      	ldr	r2, [pc, #592]	; (8002dd0 <UART_SetConfig+0x2c8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d120      	bne.n	8002bc6 <UART_SetConfig+0xbe>
 8002b84:	4b93      	ldr	r3, [pc, #588]	; (8002dd4 <UART_SetConfig+0x2cc>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d816      	bhi.n	8002bc0 <UART_SetConfig+0xb8>
 8002b92:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <UART_SetConfig+0x90>)
 8002b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002bb5 	.word	0x08002bb5
 8002ba0:	08002baf 	.word	0x08002baf
 8002ba4:	08002bbb 	.word	0x08002bbb
 8002ba8:	2301      	movs	r3, #1
 8002baa:	77fb      	strb	r3, [r7, #31]
 8002bac:	e150      	b.n	8002e50 <UART_SetConfig+0x348>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	77fb      	strb	r3, [r7, #31]
 8002bb2:	e14d      	b.n	8002e50 <UART_SetConfig+0x348>
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	77fb      	strb	r3, [r7, #31]
 8002bb8:	e14a      	b.n	8002e50 <UART_SetConfig+0x348>
 8002bba:	2308      	movs	r3, #8
 8002bbc:	77fb      	strb	r3, [r7, #31]
 8002bbe:	e147      	b.n	8002e50 <UART_SetConfig+0x348>
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	77fb      	strb	r3, [r7, #31]
 8002bc4:	e144      	b.n	8002e50 <UART_SetConfig+0x348>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a83      	ldr	r2, [pc, #524]	; (8002dd8 <UART_SetConfig+0x2d0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d132      	bne.n	8002c36 <UART_SetConfig+0x12e>
 8002bd0:	4b80      	ldr	r3, [pc, #512]	; (8002dd4 <UART_SetConfig+0x2cc>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b0c      	cmp	r3, #12
 8002bdc:	d828      	bhi.n	8002c30 <UART_SetConfig+0x128>
 8002bde:	a201      	add	r2, pc, #4	; (adr r2, 8002be4 <UART_SetConfig+0xdc>)
 8002be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be4:	08002c19 	.word	0x08002c19
 8002be8:	08002c31 	.word	0x08002c31
 8002bec:	08002c31 	.word	0x08002c31
 8002bf0:	08002c31 	.word	0x08002c31
 8002bf4:	08002c25 	.word	0x08002c25
 8002bf8:	08002c31 	.word	0x08002c31
 8002bfc:	08002c31 	.word	0x08002c31
 8002c00:	08002c31 	.word	0x08002c31
 8002c04:	08002c1f 	.word	0x08002c1f
 8002c08:	08002c31 	.word	0x08002c31
 8002c0c:	08002c31 	.word	0x08002c31
 8002c10:	08002c31 	.word	0x08002c31
 8002c14:	08002c2b 	.word	0x08002c2b
 8002c18:	2300      	movs	r3, #0
 8002c1a:	77fb      	strb	r3, [r7, #31]
 8002c1c:	e118      	b.n	8002e50 <UART_SetConfig+0x348>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	77fb      	strb	r3, [r7, #31]
 8002c22:	e115      	b.n	8002e50 <UART_SetConfig+0x348>
 8002c24:	2304      	movs	r3, #4
 8002c26:	77fb      	strb	r3, [r7, #31]
 8002c28:	e112      	b.n	8002e50 <UART_SetConfig+0x348>
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	77fb      	strb	r3, [r7, #31]
 8002c2e:	e10f      	b.n	8002e50 <UART_SetConfig+0x348>
 8002c30:	2310      	movs	r3, #16
 8002c32:	77fb      	strb	r3, [r7, #31]
 8002c34:	e10c      	b.n	8002e50 <UART_SetConfig+0x348>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a68      	ldr	r2, [pc, #416]	; (8002ddc <UART_SetConfig+0x2d4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d120      	bne.n	8002c82 <UART_SetConfig+0x17a>
 8002c40:	4b64      	ldr	r3, [pc, #400]	; (8002dd4 <UART_SetConfig+0x2cc>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c4a:	2b30      	cmp	r3, #48	; 0x30
 8002c4c:	d013      	beq.n	8002c76 <UART_SetConfig+0x16e>
 8002c4e:	2b30      	cmp	r3, #48	; 0x30
 8002c50:	d814      	bhi.n	8002c7c <UART_SetConfig+0x174>
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d009      	beq.n	8002c6a <UART_SetConfig+0x162>
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d810      	bhi.n	8002c7c <UART_SetConfig+0x174>
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <UART_SetConfig+0x15c>
 8002c5e:	2b10      	cmp	r3, #16
 8002c60:	d006      	beq.n	8002c70 <UART_SetConfig+0x168>
 8002c62:	e00b      	b.n	8002c7c <UART_SetConfig+0x174>
 8002c64:	2300      	movs	r3, #0
 8002c66:	77fb      	strb	r3, [r7, #31]
 8002c68:	e0f2      	b.n	8002e50 <UART_SetConfig+0x348>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	77fb      	strb	r3, [r7, #31]
 8002c6e:	e0ef      	b.n	8002e50 <UART_SetConfig+0x348>
 8002c70:	2304      	movs	r3, #4
 8002c72:	77fb      	strb	r3, [r7, #31]
 8002c74:	e0ec      	b.n	8002e50 <UART_SetConfig+0x348>
 8002c76:	2308      	movs	r3, #8
 8002c78:	77fb      	strb	r3, [r7, #31]
 8002c7a:	e0e9      	b.n	8002e50 <UART_SetConfig+0x348>
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	77fb      	strb	r3, [r7, #31]
 8002c80:	e0e6      	b.n	8002e50 <UART_SetConfig+0x348>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a56      	ldr	r2, [pc, #344]	; (8002de0 <UART_SetConfig+0x2d8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d120      	bne.n	8002cce <UART_SetConfig+0x1c6>
 8002c8c:	4b51      	ldr	r3, [pc, #324]	; (8002dd4 <UART_SetConfig+0x2cc>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c96:	2bc0      	cmp	r3, #192	; 0xc0
 8002c98:	d013      	beq.n	8002cc2 <UART_SetConfig+0x1ba>
 8002c9a:	2bc0      	cmp	r3, #192	; 0xc0
 8002c9c:	d814      	bhi.n	8002cc8 <UART_SetConfig+0x1c0>
 8002c9e:	2b80      	cmp	r3, #128	; 0x80
 8002ca0:	d009      	beq.n	8002cb6 <UART_SetConfig+0x1ae>
 8002ca2:	2b80      	cmp	r3, #128	; 0x80
 8002ca4:	d810      	bhi.n	8002cc8 <UART_SetConfig+0x1c0>
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <UART_SetConfig+0x1a8>
 8002caa:	2b40      	cmp	r3, #64	; 0x40
 8002cac:	d006      	beq.n	8002cbc <UART_SetConfig+0x1b4>
 8002cae:	e00b      	b.n	8002cc8 <UART_SetConfig+0x1c0>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	77fb      	strb	r3, [r7, #31]
 8002cb4:	e0cc      	b.n	8002e50 <UART_SetConfig+0x348>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	77fb      	strb	r3, [r7, #31]
 8002cba:	e0c9      	b.n	8002e50 <UART_SetConfig+0x348>
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	77fb      	strb	r3, [r7, #31]
 8002cc0:	e0c6      	b.n	8002e50 <UART_SetConfig+0x348>
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	77fb      	strb	r3, [r7, #31]
 8002cc6:	e0c3      	b.n	8002e50 <UART_SetConfig+0x348>
 8002cc8:	2310      	movs	r3, #16
 8002cca:	77fb      	strb	r3, [r7, #31]
 8002ccc:	e0c0      	b.n	8002e50 <UART_SetConfig+0x348>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a44      	ldr	r2, [pc, #272]	; (8002de4 <UART_SetConfig+0x2dc>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d125      	bne.n	8002d24 <UART_SetConfig+0x21c>
 8002cd8:	4b3e      	ldr	r3, [pc, #248]	; (8002dd4 <UART_SetConfig+0x2cc>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ce6:	d017      	beq.n	8002d18 <UART_SetConfig+0x210>
 8002ce8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cec:	d817      	bhi.n	8002d1e <UART_SetConfig+0x216>
 8002cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cf2:	d00b      	beq.n	8002d0c <UART_SetConfig+0x204>
 8002cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cf8:	d811      	bhi.n	8002d1e <UART_SetConfig+0x216>
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <UART_SetConfig+0x1fe>
 8002cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d02:	d006      	beq.n	8002d12 <UART_SetConfig+0x20a>
 8002d04:	e00b      	b.n	8002d1e <UART_SetConfig+0x216>
 8002d06:	2300      	movs	r3, #0
 8002d08:	77fb      	strb	r3, [r7, #31]
 8002d0a:	e0a1      	b.n	8002e50 <UART_SetConfig+0x348>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	77fb      	strb	r3, [r7, #31]
 8002d10:	e09e      	b.n	8002e50 <UART_SetConfig+0x348>
 8002d12:	2304      	movs	r3, #4
 8002d14:	77fb      	strb	r3, [r7, #31]
 8002d16:	e09b      	b.n	8002e50 <UART_SetConfig+0x348>
 8002d18:	2308      	movs	r3, #8
 8002d1a:	77fb      	strb	r3, [r7, #31]
 8002d1c:	e098      	b.n	8002e50 <UART_SetConfig+0x348>
 8002d1e:	2310      	movs	r3, #16
 8002d20:	77fb      	strb	r3, [r7, #31]
 8002d22:	e095      	b.n	8002e50 <UART_SetConfig+0x348>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a2f      	ldr	r2, [pc, #188]	; (8002de8 <UART_SetConfig+0x2e0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d125      	bne.n	8002d7a <UART_SetConfig+0x272>
 8002d2e:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <UART_SetConfig+0x2cc>)
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d3c:	d017      	beq.n	8002d6e <UART_SetConfig+0x266>
 8002d3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d42:	d817      	bhi.n	8002d74 <UART_SetConfig+0x26c>
 8002d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d48:	d00b      	beq.n	8002d62 <UART_SetConfig+0x25a>
 8002d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d4e:	d811      	bhi.n	8002d74 <UART_SetConfig+0x26c>
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <UART_SetConfig+0x254>
 8002d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d58:	d006      	beq.n	8002d68 <UART_SetConfig+0x260>
 8002d5a:	e00b      	b.n	8002d74 <UART_SetConfig+0x26c>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	77fb      	strb	r3, [r7, #31]
 8002d60:	e076      	b.n	8002e50 <UART_SetConfig+0x348>
 8002d62:	2302      	movs	r3, #2
 8002d64:	77fb      	strb	r3, [r7, #31]
 8002d66:	e073      	b.n	8002e50 <UART_SetConfig+0x348>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	77fb      	strb	r3, [r7, #31]
 8002d6c:	e070      	b.n	8002e50 <UART_SetConfig+0x348>
 8002d6e:	2308      	movs	r3, #8
 8002d70:	77fb      	strb	r3, [r7, #31]
 8002d72:	e06d      	b.n	8002e50 <UART_SetConfig+0x348>
 8002d74:	2310      	movs	r3, #16
 8002d76:	77fb      	strb	r3, [r7, #31]
 8002d78:	e06a      	b.n	8002e50 <UART_SetConfig+0x348>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <UART_SetConfig+0x2e4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d138      	bne.n	8002df6 <UART_SetConfig+0x2ee>
 8002d84:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <UART_SetConfig+0x2cc>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002d8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d92:	d017      	beq.n	8002dc4 <UART_SetConfig+0x2bc>
 8002d94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d98:	d82a      	bhi.n	8002df0 <UART_SetConfig+0x2e8>
 8002d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d9e:	d00b      	beq.n	8002db8 <UART_SetConfig+0x2b0>
 8002da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da4:	d824      	bhi.n	8002df0 <UART_SetConfig+0x2e8>
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <UART_SetConfig+0x2aa>
 8002daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dae:	d006      	beq.n	8002dbe <UART_SetConfig+0x2b6>
 8002db0:	e01e      	b.n	8002df0 <UART_SetConfig+0x2e8>
 8002db2:	2300      	movs	r3, #0
 8002db4:	77fb      	strb	r3, [r7, #31]
 8002db6:	e04b      	b.n	8002e50 <UART_SetConfig+0x348>
 8002db8:	2302      	movs	r3, #2
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	e048      	b.n	8002e50 <UART_SetConfig+0x348>
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	77fb      	strb	r3, [r7, #31]
 8002dc2:	e045      	b.n	8002e50 <UART_SetConfig+0x348>
 8002dc4:	2308      	movs	r3, #8
 8002dc6:	77fb      	strb	r3, [r7, #31]
 8002dc8:	e042      	b.n	8002e50 <UART_SetConfig+0x348>
 8002dca:	bf00      	nop
 8002dcc:	efff69f3 	.word	0xefff69f3
 8002dd0:	40011000 	.word	0x40011000
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40004400 	.word	0x40004400
 8002ddc:	40004800 	.word	0x40004800
 8002de0:	40004c00 	.word	0x40004c00
 8002de4:	40005000 	.word	0x40005000
 8002de8:	40011400 	.word	0x40011400
 8002dec:	40007800 	.word	0x40007800
 8002df0:	2310      	movs	r3, #16
 8002df2:	77fb      	strb	r3, [r7, #31]
 8002df4:	e02c      	b.n	8002e50 <UART_SetConfig+0x348>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a72      	ldr	r2, [pc, #456]	; (8002fc4 <UART_SetConfig+0x4bc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d125      	bne.n	8002e4c <UART_SetConfig+0x344>
 8002e00:	4b71      	ldr	r3, [pc, #452]	; (8002fc8 <UART_SetConfig+0x4c0>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e0e:	d017      	beq.n	8002e40 <UART_SetConfig+0x338>
 8002e10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e14:	d817      	bhi.n	8002e46 <UART_SetConfig+0x33e>
 8002e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e1a:	d00b      	beq.n	8002e34 <UART_SetConfig+0x32c>
 8002e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e20:	d811      	bhi.n	8002e46 <UART_SetConfig+0x33e>
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <UART_SetConfig+0x326>
 8002e26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e2a:	d006      	beq.n	8002e3a <UART_SetConfig+0x332>
 8002e2c:	e00b      	b.n	8002e46 <UART_SetConfig+0x33e>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	77fb      	strb	r3, [r7, #31]
 8002e32:	e00d      	b.n	8002e50 <UART_SetConfig+0x348>
 8002e34:	2302      	movs	r3, #2
 8002e36:	77fb      	strb	r3, [r7, #31]
 8002e38:	e00a      	b.n	8002e50 <UART_SetConfig+0x348>
 8002e3a:	2304      	movs	r3, #4
 8002e3c:	77fb      	strb	r3, [r7, #31]
 8002e3e:	e007      	b.n	8002e50 <UART_SetConfig+0x348>
 8002e40:	2308      	movs	r3, #8
 8002e42:	77fb      	strb	r3, [r7, #31]
 8002e44:	e004      	b.n	8002e50 <UART_SetConfig+0x348>
 8002e46:	2310      	movs	r3, #16
 8002e48:	77fb      	strb	r3, [r7, #31]
 8002e4a:	e001      	b.n	8002e50 <UART_SetConfig+0x348>
 8002e4c:	2310      	movs	r3, #16
 8002e4e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e58:	d15b      	bne.n	8002f12 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002e5a:	7ffb      	ldrb	r3, [r7, #31]
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d828      	bhi.n	8002eb2 <UART_SetConfig+0x3aa>
 8002e60:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <UART_SetConfig+0x360>)
 8002e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e66:	bf00      	nop
 8002e68:	08002e8d 	.word	0x08002e8d
 8002e6c:	08002e95 	.word	0x08002e95
 8002e70:	08002e9d 	.word	0x08002e9d
 8002e74:	08002eb3 	.word	0x08002eb3
 8002e78:	08002ea3 	.word	0x08002ea3
 8002e7c:	08002eb3 	.word	0x08002eb3
 8002e80:	08002eb3 	.word	0x08002eb3
 8002e84:	08002eb3 	.word	0x08002eb3
 8002e88:	08002eab 	.word	0x08002eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e8c:	f7ff f856 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 8002e90:	61b8      	str	r0, [r7, #24]
        break;
 8002e92:	e013      	b.n	8002ebc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e94:	f7ff f866 	bl	8001f64 <HAL_RCC_GetPCLK2Freq>
 8002e98:	61b8      	str	r0, [r7, #24]
        break;
 8002e9a:	e00f      	b.n	8002ebc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e9c:	4b4b      	ldr	r3, [pc, #300]	; (8002fcc <UART_SetConfig+0x4c4>)
 8002e9e:	61bb      	str	r3, [r7, #24]
        break;
 8002ea0:	e00c      	b.n	8002ebc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ea2:	f7fe ff39 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8002ea6:	61b8      	str	r0, [r7, #24]
        break;
 8002ea8:	e008      	b.n	8002ebc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eae:	61bb      	str	r3, [r7, #24]
        break;
 8002eb0:	e004      	b.n	8002ebc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	77bb      	strb	r3, [r7, #30]
        break;
 8002eba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d074      	beq.n	8002fac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	005a      	lsls	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	441a      	add	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	2b0f      	cmp	r3, #15
 8002edc:	d916      	bls.n	8002f0c <UART_SetConfig+0x404>
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee4:	d212      	bcs.n	8002f0c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	f023 030f 	bic.w	r3, r3, #15
 8002eee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	085b      	lsrs	r3, r3, #1
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	89fb      	ldrh	r3, [r7, #14]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	89fa      	ldrh	r2, [r7, #14]
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	e04f      	b.n	8002fac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	77bb      	strb	r3, [r7, #30]
 8002f10:	e04c      	b.n	8002fac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f12:	7ffb      	ldrb	r3, [r7, #31]
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d828      	bhi.n	8002f6a <UART_SetConfig+0x462>
 8002f18:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <UART_SetConfig+0x418>)
 8002f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1e:	bf00      	nop
 8002f20:	08002f45 	.word	0x08002f45
 8002f24:	08002f4d 	.word	0x08002f4d
 8002f28:	08002f55 	.word	0x08002f55
 8002f2c:	08002f6b 	.word	0x08002f6b
 8002f30:	08002f5b 	.word	0x08002f5b
 8002f34:	08002f6b 	.word	0x08002f6b
 8002f38:	08002f6b 	.word	0x08002f6b
 8002f3c:	08002f6b 	.word	0x08002f6b
 8002f40:	08002f63 	.word	0x08002f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f44:	f7fe fffa 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 8002f48:	61b8      	str	r0, [r7, #24]
        break;
 8002f4a:	e013      	b.n	8002f74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f4c:	f7ff f80a 	bl	8001f64 <HAL_RCC_GetPCLK2Freq>
 8002f50:	61b8      	str	r0, [r7, #24]
        break;
 8002f52:	e00f      	b.n	8002f74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f54:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <UART_SetConfig+0x4c4>)
 8002f56:	61bb      	str	r3, [r7, #24]
        break;
 8002f58:	e00c      	b.n	8002f74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f5a:	f7fe fedd 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8002f5e:	61b8      	str	r0, [r7, #24]
        break;
 8002f60:	e008      	b.n	8002f74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f66:	61bb      	str	r3, [r7, #24]
        break;
 8002f68:	e004      	b.n	8002f74 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	77bb      	strb	r3, [r7, #30]
        break;
 8002f72:	bf00      	nop
    }

    if (pclk != 0U)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d018      	beq.n	8002fac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	085a      	lsrs	r2, r3, #1
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	441a      	add	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b0f      	cmp	r3, #15
 8002f92:	d909      	bls.n	8002fa8 <UART_SetConfig+0x4a0>
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9a:	d205      	bcs.n	8002fa8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	e001      	b.n	8002fac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002fb8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3720      	adds	r7, #32
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40007c00 	.word	0x40007c00
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	00f42400 	.word	0x00f42400

08002fd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00a      	beq.n	800303e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01a      	beq.n	80030e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ce:	d10a      	bne.n	80030e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	605a      	str	r2, [r3, #4]
  }
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af02      	add	r7, sp, #8
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003124:	f7fd ff70 	bl	8001008 <HAL_GetTick>
 8003128:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b08      	cmp	r3, #8
 8003136:	d10e      	bne.n	8003156 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f831 	bl	80031ae <UART_WaitOnFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e027      	b.n	80031a6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b04      	cmp	r3, #4
 8003162:	d10e      	bne.n	8003182 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f81b 	bl	80031ae <UART_WaitOnFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e011      	b.n	80031a6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b09c      	sub	sp, #112	; 0x70
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	603b      	str	r3, [r7, #0]
 80031ba:	4613      	mov	r3, r2
 80031bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031be:	e0a7      	b.n	8003310 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c6:	f000 80a3 	beq.w	8003310 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ca:	f7fd ff1d 	bl	8001008 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d302      	bcc.n	80031e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80031da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d13f      	bne.n	8003260 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031e8:	e853 3f00 	ldrex	r3, [r3]
 80031ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80031ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031f4:	667b      	str	r3, [r7, #100]	; 0x64
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003200:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003202:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003204:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003206:	e841 2300 	strex	r3, r2, [r1]
 800320a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800320c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e6      	bne.n	80031e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3308      	adds	r3, #8
 8003218:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	663b      	str	r3, [r7, #96]	; 0x60
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3308      	adds	r3, #8
 8003230:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003232:	64ba      	str	r2, [r7, #72]	; 0x48
 8003234:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003236:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800323a:	e841 2300 	strex	r3, r2, [r1]
 800323e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1e5      	bne.n	8003212 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e068      	b.n	8003332 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d050      	beq.n	8003310 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800327c:	d148      	bne.n	8003310 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003286:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800329c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	637b      	str	r3, [r7, #52]	; 0x34
 80032a8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032ae:	e841 2300 	strex	r3, r2, [r1]
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1e6      	bne.n	8003288 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3308      	adds	r3, #8
 80032c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	613b      	str	r3, [r7, #16]
   return(result);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3308      	adds	r3, #8
 80032d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032da:	623a      	str	r2, [r7, #32]
 80032dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	69f9      	ldr	r1, [r7, #28]
 80032e0:	6a3a      	ldr	r2, [r7, #32]
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e5      	bne.n	80032ba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2220      	movs	r2, #32
 80032f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2220      	movs	r2, #32
 8003300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e010      	b.n	8003332 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69da      	ldr	r2, [r3, #28]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	4013      	ands	r3, r2
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	429a      	cmp	r2, r3
 800331e:	bf0c      	ite	eq
 8003320:	2301      	moveq	r3, #1
 8003322:	2300      	movne	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	429a      	cmp	r2, r3
 800332c:	f43f af48 	beq.w	80031c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3770      	adds	r7, #112	; 0x70
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <__errno>:
 800333c:	4b01      	ldr	r3, [pc, #4]	; (8003344 <__errno+0x8>)
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	20000014 	.word	0x20000014

08003348 <__libc_init_array>:
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	4d0d      	ldr	r5, [pc, #52]	; (8003380 <__libc_init_array+0x38>)
 800334c:	4c0d      	ldr	r4, [pc, #52]	; (8003384 <__libc_init_array+0x3c>)
 800334e:	1b64      	subs	r4, r4, r5
 8003350:	10a4      	asrs	r4, r4, #2
 8003352:	2600      	movs	r6, #0
 8003354:	42a6      	cmp	r6, r4
 8003356:	d109      	bne.n	800336c <__libc_init_array+0x24>
 8003358:	4d0b      	ldr	r5, [pc, #44]	; (8003388 <__libc_init_array+0x40>)
 800335a:	4c0c      	ldr	r4, [pc, #48]	; (800338c <__libc_init_array+0x44>)
 800335c:	f000 fc8e 	bl	8003c7c <_init>
 8003360:	1b64      	subs	r4, r4, r5
 8003362:	10a4      	asrs	r4, r4, #2
 8003364:	2600      	movs	r6, #0
 8003366:	42a6      	cmp	r6, r4
 8003368:	d105      	bne.n	8003376 <__libc_init_array+0x2e>
 800336a:	bd70      	pop	{r4, r5, r6, pc}
 800336c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003370:	4798      	blx	r3
 8003372:	3601      	adds	r6, #1
 8003374:	e7ee      	b.n	8003354 <__libc_init_array+0xc>
 8003376:	f855 3b04 	ldr.w	r3, [r5], #4
 800337a:	4798      	blx	r3
 800337c:	3601      	adds	r6, #1
 800337e:	e7f2      	b.n	8003366 <__libc_init_array+0x1e>
 8003380:	08003d6c 	.word	0x08003d6c
 8003384:	08003d6c 	.word	0x08003d6c
 8003388:	08003d6c 	.word	0x08003d6c
 800338c:	08003d70 	.word	0x08003d70

08003390 <memset>:
 8003390:	4402      	add	r2, r0
 8003392:	4603      	mov	r3, r0
 8003394:	4293      	cmp	r3, r2
 8003396:	d100      	bne.n	800339a <memset+0xa>
 8003398:	4770      	bx	lr
 800339a:	f803 1b01 	strb.w	r1, [r3], #1
 800339e:	e7f9      	b.n	8003394 <memset+0x4>

080033a0 <siprintf>:
 80033a0:	b40e      	push	{r1, r2, r3}
 80033a2:	b500      	push	{lr}
 80033a4:	b09c      	sub	sp, #112	; 0x70
 80033a6:	ab1d      	add	r3, sp, #116	; 0x74
 80033a8:	9002      	str	r0, [sp, #8]
 80033aa:	9006      	str	r0, [sp, #24]
 80033ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033b0:	4809      	ldr	r0, [pc, #36]	; (80033d8 <siprintf+0x38>)
 80033b2:	9107      	str	r1, [sp, #28]
 80033b4:	9104      	str	r1, [sp, #16]
 80033b6:	4909      	ldr	r1, [pc, #36]	; (80033dc <siprintf+0x3c>)
 80033b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80033bc:	9105      	str	r1, [sp, #20]
 80033be:	6800      	ldr	r0, [r0, #0]
 80033c0:	9301      	str	r3, [sp, #4]
 80033c2:	a902      	add	r1, sp, #8
 80033c4:	f000 f868 	bl	8003498 <_svfiprintf_r>
 80033c8:	9b02      	ldr	r3, [sp, #8]
 80033ca:	2200      	movs	r2, #0
 80033cc:	701a      	strb	r2, [r3, #0]
 80033ce:	b01c      	add	sp, #112	; 0x70
 80033d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80033d4:	b003      	add	sp, #12
 80033d6:	4770      	bx	lr
 80033d8:	20000014 	.word	0x20000014
 80033dc:	ffff0208 	.word	0xffff0208

080033e0 <__ssputs_r>:
 80033e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033e4:	688e      	ldr	r6, [r1, #8]
 80033e6:	429e      	cmp	r6, r3
 80033e8:	4682      	mov	sl, r0
 80033ea:	460c      	mov	r4, r1
 80033ec:	4690      	mov	r8, r2
 80033ee:	461f      	mov	r7, r3
 80033f0:	d838      	bhi.n	8003464 <__ssputs_r+0x84>
 80033f2:	898a      	ldrh	r2, [r1, #12]
 80033f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033f8:	d032      	beq.n	8003460 <__ssputs_r+0x80>
 80033fa:	6825      	ldr	r5, [r4, #0]
 80033fc:	6909      	ldr	r1, [r1, #16]
 80033fe:	eba5 0901 	sub.w	r9, r5, r1
 8003402:	6965      	ldr	r5, [r4, #20]
 8003404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003408:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800340c:	3301      	adds	r3, #1
 800340e:	444b      	add	r3, r9
 8003410:	106d      	asrs	r5, r5, #1
 8003412:	429d      	cmp	r5, r3
 8003414:	bf38      	it	cc
 8003416:	461d      	movcc	r5, r3
 8003418:	0553      	lsls	r3, r2, #21
 800341a:	d531      	bpl.n	8003480 <__ssputs_r+0xa0>
 800341c:	4629      	mov	r1, r5
 800341e:	f000 fb63 	bl	8003ae8 <_malloc_r>
 8003422:	4606      	mov	r6, r0
 8003424:	b950      	cbnz	r0, 800343c <__ssputs_r+0x5c>
 8003426:	230c      	movs	r3, #12
 8003428:	f8ca 3000 	str.w	r3, [sl]
 800342c:	89a3      	ldrh	r3, [r4, #12]
 800342e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003432:	81a3      	strh	r3, [r4, #12]
 8003434:	f04f 30ff 	mov.w	r0, #4294967295
 8003438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800343c:	6921      	ldr	r1, [r4, #16]
 800343e:	464a      	mov	r2, r9
 8003440:	f000 fabe 	bl	80039c0 <memcpy>
 8003444:	89a3      	ldrh	r3, [r4, #12]
 8003446:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800344a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344e:	81a3      	strh	r3, [r4, #12]
 8003450:	6126      	str	r6, [r4, #16]
 8003452:	6165      	str	r5, [r4, #20]
 8003454:	444e      	add	r6, r9
 8003456:	eba5 0509 	sub.w	r5, r5, r9
 800345a:	6026      	str	r6, [r4, #0]
 800345c:	60a5      	str	r5, [r4, #8]
 800345e:	463e      	mov	r6, r7
 8003460:	42be      	cmp	r6, r7
 8003462:	d900      	bls.n	8003466 <__ssputs_r+0x86>
 8003464:	463e      	mov	r6, r7
 8003466:	6820      	ldr	r0, [r4, #0]
 8003468:	4632      	mov	r2, r6
 800346a:	4641      	mov	r1, r8
 800346c:	f000 fab6 	bl	80039dc <memmove>
 8003470:	68a3      	ldr	r3, [r4, #8]
 8003472:	1b9b      	subs	r3, r3, r6
 8003474:	60a3      	str	r3, [r4, #8]
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	4433      	add	r3, r6
 800347a:	6023      	str	r3, [r4, #0]
 800347c:	2000      	movs	r0, #0
 800347e:	e7db      	b.n	8003438 <__ssputs_r+0x58>
 8003480:	462a      	mov	r2, r5
 8003482:	f000 fba5 	bl	8003bd0 <_realloc_r>
 8003486:	4606      	mov	r6, r0
 8003488:	2800      	cmp	r0, #0
 800348a:	d1e1      	bne.n	8003450 <__ssputs_r+0x70>
 800348c:	6921      	ldr	r1, [r4, #16]
 800348e:	4650      	mov	r0, sl
 8003490:	f000 fabe 	bl	8003a10 <_free_r>
 8003494:	e7c7      	b.n	8003426 <__ssputs_r+0x46>
	...

08003498 <_svfiprintf_r>:
 8003498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800349c:	4698      	mov	r8, r3
 800349e:	898b      	ldrh	r3, [r1, #12]
 80034a0:	061b      	lsls	r3, r3, #24
 80034a2:	b09d      	sub	sp, #116	; 0x74
 80034a4:	4607      	mov	r7, r0
 80034a6:	460d      	mov	r5, r1
 80034a8:	4614      	mov	r4, r2
 80034aa:	d50e      	bpl.n	80034ca <_svfiprintf_r+0x32>
 80034ac:	690b      	ldr	r3, [r1, #16]
 80034ae:	b963      	cbnz	r3, 80034ca <_svfiprintf_r+0x32>
 80034b0:	2140      	movs	r1, #64	; 0x40
 80034b2:	f000 fb19 	bl	8003ae8 <_malloc_r>
 80034b6:	6028      	str	r0, [r5, #0]
 80034b8:	6128      	str	r0, [r5, #16]
 80034ba:	b920      	cbnz	r0, 80034c6 <_svfiprintf_r+0x2e>
 80034bc:	230c      	movs	r3, #12
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	f04f 30ff 	mov.w	r0, #4294967295
 80034c4:	e0d1      	b.n	800366a <_svfiprintf_r+0x1d2>
 80034c6:	2340      	movs	r3, #64	; 0x40
 80034c8:	616b      	str	r3, [r5, #20]
 80034ca:	2300      	movs	r3, #0
 80034cc:	9309      	str	r3, [sp, #36]	; 0x24
 80034ce:	2320      	movs	r3, #32
 80034d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80034d8:	2330      	movs	r3, #48	; 0x30
 80034da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003684 <_svfiprintf_r+0x1ec>
 80034de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034e2:	f04f 0901 	mov.w	r9, #1
 80034e6:	4623      	mov	r3, r4
 80034e8:	469a      	mov	sl, r3
 80034ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034ee:	b10a      	cbz	r2, 80034f4 <_svfiprintf_r+0x5c>
 80034f0:	2a25      	cmp	r2, #37	; 0x25
 80034f2:	d1f9      	bne.n	80034e8 <_svfiprintf_r+0x50>
 80034f4:	ebba 0b04 	subs.w	fp, sl, r4
 80034f8:	d00b      	beq.n	8003512 <_svfiprintf_r+0x7a>
 80034fa:	465b      	mov	r3, fp
 80034fc:	4622      	mov	r2, r4
 80034fe:	4629      	mov	r1, r5
 8003500:	4638      	mov	r0, r7
 8003502:	f7ff ff6d 	bl	80033e0 <__ssputs_r>
 8003506:	3001      	adds	r0, #1
 8003508:	f000 80aa 	beq.w	8003660 <_svfiprintf_r+0x1c8>
 800350c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800350e:	445a      	add	r2, fp
 8003510:	9209      	str	r2, [sp, #36]	; 0x24
 8003512:	f89a 3000 	ldrb.w	r3, [sl]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 80a2 	beq.w	8003660 <_svfiprintf_r+0x1c8>
 800351c:	2300      	movs	r3, #0
 800351e:	f04f 32ff 	mov.w	r2, #4294967295
 8003522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003526:	f10a 0a01 	add.w	sl, sl, #1
 800352a:	9304      	str	r3, [sp, #16]
 800352c:	9307      	str	r3, [sp, #28]
 800352e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003532:	931a      	str	r3, [sp, #104]	; 0x68
 8003534:	4654      	mov	r4, sl
 8003536:	2205      	movs	r2, #5
 8003538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800353c:	4851      	ldr	r0, [pc, #324]	; (8003684 <_svfiprintf_r+0x1ec>)
 800353e:	f7fc fe87 	bl	8000250 <memchr>
 8003542:	9a04      	ldr	r2, [sp, #16]
 8003544:	b9d8      	cbnz	r0, 800357e <_svfiprintf_r+0xe6>
 8003546:	06d0      	lsls	r0, r2, #27
 8003548:	bf44      	itt	mi
 800354a:	2320      	movmi	r3, #32
 800354c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003550:	0711      	lsls	r1, r2, #28
 8003552:	bf44      	itt	mi
 8003554:	232b      	movmi	r3, #43	; 0x2b
 8003556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800355a:	f89a 3000 	ldrb.w	r3, [sl]
 800355e:	2b2a      	cmp	r3, #42	; 0x2a
 8003560:	d015      	beq.n	800358e <_svfiprintf_r+0xf6>
 8003562:	9a07      	ldr	r2, [sp, #28]
 8003564:	4654      	mov	r4, sl
 8003566:	2000      	movs	r0, #0
 8003568:	f04f 0c0a 	mov.w	ip, #10
 800356c:	4621      	mov	r1, r4
 800356e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003572:	3b30      	subs	r3, #48	; 0x30
 8003574:	2b09      	cmp	r3, #9
 8003576:	d94e      	bls.n	8003616 <_svfiprintf_r+0x17e>
 8003578:	b1b0      	cbz	r0, 80035a8 <_svfiprintf_r+0x110>
 800357a:	9207      	str	r2, [sp, #28]
 800357c:	e014      	b.n	80035a8 <_svfiprintf_r+0x110>
 800357e:	eba0 0308 	sub.w	r3, r0, r8
 8003582:	fa09 f303 	lsl.w	r3, r9, r3
 8003586:	4313      	orrs	r3, r2
 8003588:	9304      	str	r3, [sp, #16]
 800358a:	46a2      	mov	sl, r4
 800358c:	e7d2      	b.n	8003534 <_svfiprintf_r+0x9c>
 800358e:	9b03      	ldr	r3, [sp, #12]
 8003590:	1d19      	adds	r1, r3, #4
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	9103      	str	r1, [sp, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	bfbb      	ittet	lt
 800359a:	425b      	neglt	r3, r3
 800359c:	f042 0202 	orrlt.w	r2, r2, #2
 80035a0:	9307      	strge	r3, [sp, #28]
 80035a2:	9307      	strlt	r3, [sp, #28]
 80035a4:	bfb8      	it	lt
 80035a6:	9204      	strlt	r2, [sp, #16]
 80035a8:	7823      	ldrb	r3, [r4, #0]
 80035aa:	2b2e      	cmp	r3, #46	; 0x2e
 80035ac:	d10c      	bne.n	80035c8 <_svfiprintf_r+0x130>
 80035ae:	7863      	ldrb	r3, [r4, #1]
 80035b0:	2b2a      	cmp	r3, #42	; 0x2a
 80035b2:	d135      	bne.n	8003620 <_svfiprintf_r+0x188>
 80035b4:	9b03      	ldr	r3, [sp, #12]
 80035b6:	1d1a      	adds	r2, r3, #4
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	9203      	str	r2, [sp, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bfb8      	it	lt
 80035c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80035c4:	3402      	adds	r4, #2
 80035c6:	9305      	str	r3, [sp, #20]
 80035c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003694 <_svfiprintf_r+0x1fc>
 80035cc:	7821      	ldrb	r1, [r4, #0]
 80035ce:	2203      	movs	r2, #3
 80035d0:	4650      	mov	r0, sl
 80035d2:	f7fc fe3d 	bl	8000250 <memchr>
 80035d6:	b140      	cbz	r0, 80035ea <_svfiprintf_r+0x152>
 80035d8:	2340      	movs	r3, #64	; 0x40
 80035da:	eba0 000a 	sub.w	r0, r0, sl
 80035de:	fa03 f000 	lsl.w	r0, r3, r0
 80035e2:	9b04      	ldr	r3, [sp, #16]
 80035e4:	4303      	orrs	r3, r0
 80035e6:	3401      	adds	r4, #1
 80035e8:	9304      	str	r3, [sp, #16]
 80035ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035ee:	4826      	ldr	r0, [pc, #152]	; (8003688 <_svfiprintf_r+0x1f0>)
 80035f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035f4:	2206      	movs	r2, #6
 80035f6:	f7fc fe2b 	bl	8000250 <memchr>
 80035fa:	2800      	cmp	r0, #0
 80035fc:	d038      	beq.n	8003670 <_svfiprintf_r+0x1d8>
 80035fe:	4b23      	ldr	r3, [pc, #140]	; (800368c <_svfiprintf_r+0x1f4>)
 8003600:	bb1b      	cbnz	r3, 800364a <_svfiprintf_r+0x1b2>
 8003602:	9b03      	ldr	r3, [sp, #12]
 8003604:	3307      	adds	r3, #7
 8003606:	f023 0307 	bic.w	r3, r3, #7
 800360a:	3308      	adds	r3, #8
 800360c:	9303      	str	r3, [sp, #12]
 800360e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003610:	4433      	add	r3, r6
 8003612:	9309      	str	r3, [sp, #36]	; 0x24
 8003614:	e767      	b.n	80034e6 <_svfiprintf_r+0x4e>
 8003616:	fb0c 3202 	mla	r2, ip, r2, r3
 800361a:	460c      	mov	r4, r1
 800361c:	2001      	movs	r0, #1
 800361e:	e7a5      	b.n	800356c <_svfiprintf_r+0xd4>
 8003620:	2300      	movs	r3, #0
 8003622:	3401      	adds	r4, #1
 8003624:	9305      	str	r3, [sp, #20]
 8003626:	4619      	mov	r1, r3
 8003628:	f04f 0c0a 	mov.w	ip, #10
 800362c:	4620      	mov	r0, r4
 800362e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003632:	3a30      	subs	r2, #48	; 0x30
 8003634:	2a09      	cmp	r2, #9
 8003636:	d903      	bls.n	8003640 <_svfiprintf_r+0x1a8>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0c5      	beq.n	80035c8 <_svfiprintf_r+0x130>
 800363c:	9105      	str	r1, [sp, #20]
 800363e:	e7c3      	b.n	80035c8 <_svfiprintf_r+0x130>
 8003640:	fb0c 2101 	mla	r1, ip, r1, r2
 8003644:	4604      	mov	r4, r0
 8003646:	2301      	movs	r3, #1
 8003648:	e7f0      	b.n	800362c <_svfiprintf_r+0x194>
 800364a:	ab03      	add	r3, sp, #12
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	462a      	mov	r2, r5
 8003650:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <_svfiprintf_r+0x1f8>)
 8003652:	a904      	add	r1, sp, #16
 8003654:	4638      	mov	r0, r7
 8003656:	f3af 8000 	nop.w
 800365a:	1c42      	adds	r2, r0, #1
 800365c:	4606      	mov	r6, r0
 800365e:	d1d6      	bne.n	800360e <_svfiprintf_r+0x176>
 8003660:	89ab      	ldrh	r3, [r5, #12]
 8003662:	065b      	lsls	r3, r3, #25
 8003664:	f53f af2c 	bmi.w	80034c0 <_svfiprintf_r+0x28>
 8003668:	9809      	ldr	r0, [sp, #36]	; 0x24
 800366a:	b01d      	add	sp, #116	; 0x74
 800366c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003670:	ab03      	add	r3, sp, #12
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	462a      	mov	r2, r5
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <_svfiprintf_r+0x1f8>)
 8003678:	a904      	add	r1, sp, #16
 800367a:	4638      	mov	r0, r7
 800367c:	f000 f87a 	bl	8003774 <_printf_i>
 8003680:	e7eb      	b.n	800365a <_svfiprintf_r+0x1c2>
 8003682:	bf00      	nop
 8003684:	08003d30 	.word	0x08003d30
 8003688:	08003d3a 	.word	0x08003d3a
 800368c:	00000000 	.word	0x00000000
 8003690:	080033e1 	.word	0x080033e1
 8003694:	08003d36 	.word	0x08003d36

08003698 <_printf_common>:
 8003698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800369c:	4616      	mov	r6, r2
 800369e:	4699      	mov	r9, r3
 80036a0:	688a      	ldr	r2, [r1, #8]
 80036a2:	690b      	ldr	r3, [r1, #16]
 80036a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036a8:	4293      	cmp	r3, r2
 80036aa:	bfb8      	it	lt
 80036ac:	4613      	movlt	r3, r2
 80036ae:	6033      	str	r3, [r6, #0]
 80036b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036b4:	4607      	mov	r7, r0
 80036b6:	460c      	mov	r4, r1
 80036b8:	b10a      	cbz	r2, 80036be <_printf_common+0x26>
 80036ba:	3301      	adds	r3, #1
 80036bc:	6033      	str	r3, [r6, #0]
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	0699      	lsls	r1, r3, #26
 80036c2:	bf42      	ittt	mi
 80036c4:	6833      	ldrmi	r3, [r6, #0]
 80036c6:	3302      	addmi	r3, #2
 80036c8:	6033      	strmi	r3, [r6, #0]
 80036ca:	6825      	ldr	r5, [r4, #0]
 80036cc:	f015 0506 	ands.w	r5, r5, #6
 80036d0:	d106      	bne.n	80036e0 <_printf_common+0x48>
 80036d2:	f104 0a19 	add.w	sl, r4, #25
 80036d6:	68e3      	ldr	r3, [r4, #12]
 80036d8:	6832      	ldr	r2, [r6, #0]
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	42ab      	cmp	r3, r5
 80036de:	dc26      	bgt.n	800372e <_printf_common+0x96>
 80036e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036e4:	1e13      	subs	r3, r2, #0
 80036e6:	6822      	ldr	r2, [r4, #0]
 80036e8:	bf18      	it	ne
 80036ea:	2301      	movne	r3, #1
 80036ec:	0692      	lsls	r2, r2, #26
 80036ee:	d42b      	bmi.n	8003748 <_printf_common+0xb0>
 80036f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036f4:	4649      	mov	r1, r9
 80036f6:	4638      	mov	r0, r7
 80036f8:	47c0      	blx	r8
 80036fa:	3001      	adds	r0, #1
 80036fc:	d01e      	beq.n	800373c <_printf_common+0xa4>
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	68e5      	ldr	r5, [r4, #12]
 8003702:	6832      	ldr	r2, [r6, #0]
 8003704:	f003 0306 	and.w	r3, r3, #6
 8003708:	2b04      	cmp	r3, #4
 800370a:	bf08      	it	eq
 800370c:	1aad      	subeq	r5, r5, r2
 800370e:	68a3      	ldr	r3, [r4, #8]
 8003710:	6922      	ldr	r2, [r4, #16]
 8003712:	bf0c      	ite	eq
 8003714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003718:	2500      	movne	r5, #0
 800371a:	4293      	cmp	r3, r2
 800371c:	bfc4      	itt	gt
 800371e:	1a9b      	subgt	r3, r3, r2
 8003720:	18ed      	addgt	r5, r5, r3
 8003722:	2600      	movs	r6, #0
 8003724:	341a      	adds	r4, #26
 8003726:	42b5      	cmp	r5, r6
 8003728:	d11a      	bne.n	8003760 <_printf_common+0xc8>
 800372a:	2000      	movs	r0, #0
 800372c:	e008      	b.n	8003740 <_printf_common+0xa8>
 800372e:	2301      	movs	r3, #1
 8003730:	4652      	mov	r2, sl
 8003732:	4649      	mov	r1, r9
 8003734:	4638      	mov	r0, r7
 8003736:	47c0      	blx	r8
 8003738:	3001      	adds	r0, #1
 800373a:	d103      	bne.n	8003744 <_printf_common+0xac>
 800373c:	f04f 30ff 	mov.w	r0, #4294967295
 8003740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003744:	3501      	adds	r5, #1
 8003746:	e7c6      	b.n	80036d6 <_printf_common+0x3e>
 8003748:	18e1      	adds	r1, r4, r3
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	2030      	movs	r0, #48	; 0x30
 800374e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003752:	4422      	add	r2, r4
 8003754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800375c:	3302      	adds	r3, #2
 800375e:	e7c7      	b.n	80036f0 <_printf_common+0x58>
 8003760:	2301      	movs	r3, #1
 8003762:	4622      	mov	r2, r4
 8003764:	4649      	mov	r1, r9
 8003766:	4638      	mov	r0, r7
 8003768:	47c0      	blx	r8
 800376a:	3001      	adds	r0, #1
 800376c:	d0e6      	beq.n	800373c <_printf_common+0xa4>
 800376e:	3601      	adds	r6, #1
 8003770:	e7d9      	b.n	8003726 <_printf_common+0x8e>
	...

08003774 <_printf_i>:
 8003774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003778:	7e0f      	ldrb	r7, [r1, #24]
 800377a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800377c:	2f78      	cmp	r7, #120	; 0x78
 800377e:	4691      	mov	r9, r2
 8003780:	4680      	mov	r8, r0
 8003782:	460c      	mov	r4, r1
 8003784:	469a      	mov	sl, r3
 8003786:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800378a:	d807      	bhi.n	800379c <_printf_i+0x28>
 800378c:	2f62      	cmp	r7, #98	; 0x62
 800378e:	d80a      	bhi.n	80037a6 <_printf_i+0x32>
 8003790:	2f00      	cmp	r7, #0
 8003792:	f000 80d8 	beq.w	8003946 <_printf_i+0x1d2>
 8003796:	2f58      	cmp	r7, #88	; 0x58
 8003798:	f000 80a3 	beq.w	80038e2 <_printf_i+0x16e>
 800379c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037a4:	e03a      	b.n	800381c <_printf_i+0xa8>
 80037a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037aa:	2b15      	cmp	r3, #21
 80037ac:	d8f6      	bhi.n	800379c <_printf_i+0x28>
 80037ae:	a101      	add	r1, pc, #4	; (adr r1, 80037b4 <_printf_i+0x40>)
 80037b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037b4:	0800380d 	.word	0x0800380d
 80037b8:	08003821 	.word	0x08003821
 80037bc:	0800379d 	.word	0x0800379d
 80037c0:	0800379d 	.word	0x0800379d
 80037c4:	0800379d 	.word	0x0800379d
 80037c8:	0800379d 	.word	0x0800379d
 80037cc:	08003821 	.word	0x08003821
 80037d0:	0800379d 	.word	0x0800379d
 80037d4:	0800379d 	.word	0x0800379d
 80037d8:	0800379d 	.word	0x0800379d
 80037dc:	0800379d 	.word	0x0800379d
 80037e0:	0800392d 	.word	0x0800392d
 80037e4:	08003851 	.word	0x08003851
 80037e8:	0800390f 	.word	0x0800390f
 80037ec:	0800379d 	.word	0x0800379d
 80037f0:	0800379d 	.word	0x0800379d
 80037f4:	0800394f 	.word	0x0800394f
 80037f8:	0800379d 	.word	0x0800379d
 80037fc:	08003851 	.word	0x08003851
 8003800:	0800379d 	.word	0x0800379d
 8003804:	0800379d 	.word	0x0800379d
 8003808:	08003917 	.word	0x08003917
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	1d1a      	adds	r2, r3, #4
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	602a      	str	r2, [r5, #0]
 8003814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800381c:	2301      	movs	r3, #1
 800381e:	e0a3      	b.n	8003968 <_printf_i+0x1f4>
 8003820:	6820      	ldr	r0, [r4, #0]
 8003822:	6829      	ldr	r1, [r5, #0]
 8003824:	0606      	lsls	r6, r0, #24
 8003826:	f101 0304 	add.w	r3, r1, #4
 800382a:	d50a      	bpl.n	8003842 <_printf_i+0xce>
 800382c:	680e      	ldr	r6, [r1, #0]
 800382e:	602b      	str	r3, [r5, #0]
 8003830:	2e00      	cmp	r6, #0
 8003832:	da03      	bge.n	800383c <_printf_i+0xc8>
 8003834:	232d      	movs	r3, #45	; 0x2d
 8003836:	4276      	negs	r6, r6
 8003838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800383c:	485e      	ldr	r0, [pc, #376]	; (80039b8 <_printf_i+0x244>)
 800383e:	230a      	movs	r3, #10
 8003840:	e019      	b.n	8003876 <_printf_i+0x102>
 8003842:	680e      	ldr	r6, [r1, #0]
 8003844:	602b      	str	r3, [r5, #0]
 8003846:	f010 0f40 	tst.w	r0, #64	; 0x40
 800384a:	bf18      	it	ne
 800384c:	b236      	sxthne	r6, r6
 800384e:	e7ef      	b.n	8003830 <_printf_i+0xbc>
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	6820      	ldr	r0, [r4, #0]
 8003854:	1d19      	adds	r1, r3, #4
 8003856:	6029      	str	r1, [r5, #0]
 8003858:	0601      	lsls	r1, r0, #24
 800385a:	d501      	bpl.n	8003860 <_printf_i+0xec>
 800385c:	681e      	ldr	r6, [r3, #0]
 800385e:	e002      	b.n	8003866 <_printf_i+0xf2>
 8003860:	0646      	lsls	r6, r0, #25
 8003862:	d5fb      	bpl.n	800385c <_printf_i+0xe8>
 8003864:	881e      	ldrh	r6, [r3, #0]
 8003866:	4854      	ldr	r0, [pc, #336]	; (80039b8 <_printf_i+0x244>)
 8003868:	2f6f      	cmp	r7, #111	; 0x6f
 800386a:	bf0c      	ite	eq
 800386c:	2308      	moveq	r3, #8
 800386e:	230a      	movne	r3, #10
 8003870:	2100      	movs	r1, #0
 8003872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003876:	6865      	ldr	r5, [r4, #4]
 8003878:	60a5      	str	r5, [r4, #8]
 800387a:	2d00      	cmp	r5, #0
 800387c:	bfa2      	ittt	ge
 800387e:	6821      	ldrge	r1, [r4, #0]
 8003880:	f021 0104 	bicge.w	r1, r1, #4
 8003884:	6021      	strge	r1, [r4, #0]
 8003886:	b90e      	cbnz	r6, 800388c <_printf_i+0x118>
 8003888:	2d00      	cmp	r5, #0
 800388a:	d04d      	beq.n	8003928 <_printf_i+0x1b4>
 800388c:	4615      	mov	r5, r2
 800388e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003892:	fb03 6711 	mls	r7, r3, r1, r6
 8003896:	5dc7      	ldrb	r7, [r0, r7]
 8003898:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800389c:	4637      	mov	r7, r6
 800389e:	42bb      	cmp	r3, r7
 80038a0:	460e      	mov	r6, r1
 80038a2:	d9f4      	bls.n	800388e <_printf_i+0x11a>
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d10b      	bne.n	80038c0 <_printf_i+0x14c>
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	07de      	lsls	r6, r3, #31
 80038ac:	d508      	bpl.n	80038c0 <_printf_i+0x14c>
 80038ae:	6923      	ldr	r3, [r4, #16]
 80038b0:	6861      	ldr	r1, [r4, #4]
 80038b2:	4299      	cmp	r1, r3
 80038b4:	bfde      	ittt	le
 80038b6:	2330      	movle	r3, #48	; 0x30
 80038b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038c0:	1b52      	subs	r2, r2, r5
 80038c2:	6122      	str	r2, [r4, #16]
 80038c4:	f8cd a000 	str.w	sl, [sp]
 80038c8:	464b      	mov	r3, r9
 80038ca:	aa03      	add	r2, sp, #12
 80038cc:	4621      	mov	r1, r4
 80038ce:	4640      	mov	r0, r8
 80038d0:	f7ff fee2 	bl	8003698 <_printf_common>
 80038d4:	3001      	adds	r0, #1
 80038d6:	d14c      	bne.n	8003972 <_printf_i+0x1fe>
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	b004      	add	sp, #16
 80038de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e2:	4835      	ldr	r0, [pc, #212]	; (80039b8 <_printf_i+0x244>)
 80038e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038e8:	6829      	ldr	r1, [r5, #0]
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80038f0:	6029      	str	r1, [r5, #0]
 80038f2:	061d      	lsls	r5, r3, #24
 80038f4:	d514      	bpl.n	8003920 <_printf_i+0x1ac>
 80038f6:	07df      	lsls	r7, r3, #31
 80038f8:	bf44      	itt	mi
 80038fa:	f043 0320 	orrmi.w	r3, r3, #32
 80038fe:	6023      	strmi	r3, [r4, #0]
 8003900:	b91e      	cbnz	r6, 800390a <_printf_i+0x196>
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	f023 0320 	bic.w	r3, r3, #32
 8003908:	6023      	str	r3, [r4, #0]
 800390a:	2310      	movs	r3, #16
 800390c:	e7b0      	b.n	8003870 <_printf_i+0xfc>
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	f043 0320 	orr.w	r3, r3, #32
 8003914:	6023      	str	r3, [r4, #0]
 8003916:	2378      	movs	r3, #120	; 0x78
 8003918:	4828      	ldr	r0, [pc, #160]	; (80039bc <_printf_i+0x248>)
 800391a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800391e:	e7e3      	b.n	80038e8 <_printf_i+0x174>
 8003920:	0659      	lsls	r1, r3, #25
 8003922:	bf48      	it	mi
 8003924:	b2b6      	uxthmi	r6, r6
 8003926:	e7e6      	b.n	80038f6 <_printf_i+0x182>
 8003928:	4615      	mov	r5, r2
 800392a:	e7bb      	b.n	80038a4 <_printf_i+0x130>
 800392c:	682b      	ldr	r3, [r5, #0]
 800392e:	6826      	ldr	r6, [r4, #0]
 8003930:	6961      	ldr	r1, [r4, #20]
 8003932:	1d18      	adds	r0, r3, #4
 8003934:	6028      	str	r0, [r5, #0]
 8003936:	0635      	lsls	r5, r6, #24
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	d501      	bpl.n	8003940 <_printf_i+0x1cc>
 800393c:	6019      	str	r1, [r3, #0]
 800393e:	e002      	b.n	8003946 <_printf_i+0x1d2>
 8003940:	0670      	lsls	r0, r6, #25
 8003942:	d5fb      	bpl.n	800393c <_printf_i+0x1c8>
 8003944:	8019      	strh	r1, [r3, #0]
 8003946:	2300      	movs	r3, #0
 8003948:	6123      	str	r3, [r4, #16]
 800394a:	4615      	mov	r5, r2
 800394c:	e7ba      	b.n	80038c4 <_printf_i+0x150>
 800394e:	682b      	ldr	r3, [r5, #0]
 8003950:	1d1a      	adds	r2, r3, #4
 8003952:	602a      	str	r2, [r5, #0]
 8003954:	681d      	ldr	r5, [r3, #0]
 8003956:	6862      	ldr	r2, [r4, #4]
 8003958:	2100      	movs	r1, #0
 800395a:	4628      	mov	r0, r5
 800395c:	f7fc fc78 	bl	8000250 <memchr>
 8003960:	b108      	cbz	r0, 8003966 <_printf_i+0x1f2>
 8003962:	1b40      	subs	r0, r0, r5
 8003964:	6060      	str	r0, [r4, #4]
 8003966:	6863      	ldr	r3, [r4, #4]
 8003968:	6123      	str	r3, [r4, #16]
 800396a:	2300      	movs	r3, #0
 800396c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003970:	e7a8      	b.n	80038c4 <_printf_i+0x150>
 8003972:	6923      	ldr	r3, [r4, #16]
 8003974:	462a      	mov	r2, r5
 8003976:	4649      	mov	r1, r9
 8003978:	4640      	mov	r0, r8
 800397a:	47d0      	blx	sl
 800397c:	3001      	adds	r0, #1
 800397e:	d0ab      	beq.n	80038d8 <_printf_i+0x164>
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	079b      	lsls	r3, r3, #30
 8003984:	d413      	bmi.n	80039ae <_printf_i+0x23a>
 8003986:	68e0      	ldr	r0, [r4, #12]
 8003988:	9b03      	ldr	r3, [sp, #12]
 800398a:	4298      	cmp	r0, r3
 800398c:	bfb8      	it	lt
 800398e:	4618      	movlt	r0, r3
 8003990:	e7a4      	b.n	80038dc <_printf_i+0x168>
 8003992:	2301      	movs	r3, #1
 8003994:	4632      	mov	r2, r6
 8003996:	4649      	mov	r1, r9
 8003998:	4640      	mov	r0, r8
 800399a:	47d0      	blx	sl
 800399c:	3001      	adds	r0, #1
 800399e:	d09b      	beq.n	80038d8 <_printf_i+0x164>
 80039a0:	3501      	adds	r5, #1
 80039a2:	68e3      	ldr	r3, [r4, #12]
 80039a4:	9903      	ldr	r1, [sp, #12]
 80039a6:	1a5b      	subs	r3, r3, r1
 80039a8:	42ab      	cmp	r3, r5
 80039aa:	dcf2      	bgt.n	8003992 <_printf_i+0x21e>
 80039ac:	e7eb      	b.n	8003986 <_printf_i+0x212>
 80039ae:	2500      	movs	r5, #0
 80039b0:	f104 0619 	add.w	r6, r4, #25
 80039b4:	e7f5      	b.n	80039a2 <_printf_i+0x22e>
 80039b6:	bf00      	nop
 80039b8:	08003d41 	.word	0x08003d41
 80039bc:	08003d52 	.word	0x08003d52

080039c0 <memcpy>:
 80039c0:	440a      	add	r2, r1
 80039c2:	4291      	cmp	r1, r2
 80039c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80039c8:	d100      	bne.n	80039cc <memcpy+0xc>
 80039ca:	4770      	bx	lr
 80039cc:	b510      	push	{r4, lr}
 80039ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039d6:	4291      	cmp	r1, r2
 80039d8:	d1f9      	bne.n	80039ce <memcpy+0xe>
 80039da:	bd10      	pop	{r4, pc}

080039dc <memmove>:
 80039dc:	4288      	cmp	r0, r1
 80039de:	b510      	push	{r4, lr}
 80039e0:	eb01 0402 	add.w	r4, r1, r2
 80039e4:	d902      	bls.n	80039ec <memmove+0x10>
 80039e6:	4284      	cmp	r4, r0
 80039e8:	4623      	mov	r3, r4
 80039ea:	d807      	bhi.n	80039fc <memmove+0x20>
 80039ec:	1e43      	subs	r3, r0, #1
 80039ee:	42a1      	cmp	r1, r4
 80039f0:	d008      	beq.n	8003a04 <memmove+0x28>
 80039f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039fa:	e7f8      	b.n	80039ee <memmove+0x12>
 80039fc:	4402      	add	r2, r0
 80039fe:	4601      	mov	r1, r0
 8003a00:	428a      	cmp	r2, r1
 8003a02:	d100      	bne.n	8003a06 <memmove+0x2a>
 8003a04:	bd10      	pop	{r4, pc}
 8003a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a0e:	e7f7      	b.n	8003a00 <memmove+0x24>

08003a10 <_free_r>:
 8003a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a12:	2900      	cmp	r1, #0
 8003a14:	d044      	beq.n	8003aa0 <_free_r+0x90>
 8003a16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a1a:	9001      	str	r0, [sp, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f1a1 0404 	sub.w	r4, r1, #4
 8003a22:	bfb8      	it	lt
 8003a24:	18e4      	addlt	r4, r4, r3
 8003a26:	f000 f913 	bl	8003c50 <__malloc_lock>
 8003a2a:	4a1e      	ldr	r2, [pc, #120]	; (8003aa4 <_free_r+0x94>)
 8003a2c:	9801      	ldr	r0, [sp, #4]
 8003a2e:	6813      	ldr	r3, [r2, #0]
 8003a30:	b933      	cbnz	r3, 8003a40 <_free_r+0x30>
 8003a32:	6063      	str	r3, [r4, #4]
 8003a34:	6014      	str	r4, [r2, #0]
 8003a36:	b003      	add	sp, #12
 8003a38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a3c:	f000 b90e 	b.w	8003c5c <__malloc_unlock>
 8003a40:	42a3      	cmp	r3, r4
 8003a42:	d908      	bls.n	8003a56 <_free_r+0x46>
 8003a44:	6825      	ldr	r5, [r4, #0]
 8003a46:	1961      	adds	r1, r4, r5
 8003a48:	428b      	cmp	r3, r1
 8003a4a:	bf01      	itttt	eq
 8003a4c:	6819      	ldreq	r1, [r3, #0]
 8003a4e:	685b      	ldreq	r3, [r3, #4]
 8003a50:	1949      	addeq	r1, r1, r5
 8003a52:	6021      	streq	r1, [r4, #0]
 8003a54:	e7ed      	b.n	8003a32 <_free_r+0x22>
 8003a56:	461a      	mov	r2, r3
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	b10b      	cbz	r3, 8003a60 <_free_r+0x50>
 8003a5c:	42a3      	cmp	r3, r4
 8003a5e:	d9fa      	bls.n	8003a56 <_free_r+0x46>
 8003a60:	6811      	ldr	r1, [r2, #0]
 8003a62:	1855      	adds	r5, r2, r1
 8003a64:	42a5      	cmp	r5, r4
 8003a66:	d10b      	bne.n	8003a80 <_free_r+0x70>
 8003a68:	6824      	ldr	r4, [r4, #0]
 8003a6a:	4421      	add	r1, r4
 8003a6c:	1854      	adds	r4, r2, r1
 8003a6e:	42a3      	cmp	r3, r4
 8003a70:	6011      	str	r1, [r2, #0]
 8003a72:	d1e0      	bne.n	8003a36 <_free_r+0x26>
 8003a74:	681c      	ldr	r4, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	6053      	str	r3, [r2, #4]
 8003a7a:	4421      	add	r1, r4
 8003a7c:	6011      	str	r1, [r2, #0]
 8003a7e:	e7da      	b.n	8003a36 <_free_r+0x26>
 8003a80:	d902      	bls.n	8003a88 <_free_r+0x78>
 8003a82:	230c      	movs	r3, #12
 8003a84:	6003      	str	r3, [r0, #0]
 8003a86:	e7d6      	b.n	8003a36 <_free_r+0x26>
 8003a88:	6825      	ldr	r5, [r4, #0]
 8003a8a:	1961      	adds	r1, r4, r5
 8003a8c:	428b      	cmp	r3, r1
 8003a8e:	bf04      	itt	eq
 8003a90:	6819      	ldreq	r1, [r3, #0]
 8003a92:	685b      	ldreq	r3, [r3, #4]
 8003a94:	6063      	str	r3, [r4, #4]
 8003a96:	bf04      	itt	eq
 8003a98:	1949      	addeq	r1, r1, r5
 8003a9a:	6021      	streq	r1, [r4, #0]
 8003a9c:	6054      	str	r4, [r2, #4]
 8003a9e:	e7ca      	b.n	8003a36 <_free_r+0x26>
 8003aa0:	b003      	add	sp, #12
 8003aa2:	bd30      	pop	{r4, r5, pc}
 8003aa4:	200003c4 	.word	0x200003c4

08003aa8 <sbrk_aligned>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	4e0e      	ldr	r6, [pc, #56]	; (8003ae4 <sbrk_aligned+0x3c>)
 8003aac:	460c      	mov	r4, r1
 8003aae:	6831      	ldr	r1, [r6, #0]
 8003ab0:	4605      	mov	r5, r0
 8003ab2:	b911      	cbnz	r1, 8003aba <sbrk_aligned+0x12>
 8003ab4:	f000 f8bc 	bl	8003c30 <_sbrk_r>
 8003ab8:	6030      	str	r0, [r6, #0]
 8003aba:	4621      	mov	r1, r4
 8003abc:	4628      	mov	r0, r5
 8003abe:	f000 f8b7 	bl	8003c30 <_sbrk_r>
 8003ac2:	1c43      	adds	r3, r0, #1
 8003ac4:	d00a      	beq.n	8003adc <sbrk_aligned+0x34>
 8003ac6:	1cc4      	adds	r4, r0, #3
 8003ac8:	f024 0403 	bic.w	r4, r4, #3
 8003acc:	42a0      	cmp	r0, r4
 8003ace:	d007      	beq.n	8003ae0 <sbrk_aligned+0x38>
 8003ad0:	1a21      	subs	r1, r4, r0
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	f000 f8ac 	bl	8003c30 <_sbrk_r>
 8003ad8:	3001      	adds	r0, #1
 8003ada:	d101      	bne.n	8003ae0 <sbrk_aligned+0x38>
 8003adc:	f04f 34ff 	mov.w	r4, #4294967295
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	bd70      	pop	{r4, r5, r6, pc}
 8003ae4:	200003c8 	.word	0x200003c8

08003ae8 <_malloc_r>:
 8003ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aec:	1ccd      	adds	r5, r1, #3
 8003aee:	f025 0503 	bic.w	r5, r5, #3
 8003af2:	3508      	adds	r5, #8
 8003af4:	2d0c      	cmp	r5, #12
 8003af6:	bf38      	it	cc
 8003af8:	250c      	movcc	r5, #12
 8003afa:	2d00      	cmp	r5, #0
 8003afc:	4607      	mov	r7, r0
 8003afe:	db01      	blt.n	8003b04 <_malloc_r+0x1c>
 8003b00:	42a9      	cmp	r1, r5
 8003b02:	d905      	bls.n	8003b10 <_malloc_r+0x28>
 8003b04:	230c      	movs	r3, #12
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	2600      	movs	r6, #0
 8003b0a:	4630      	mov	r0, r6
 8003b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b10:	4e2e      	ldr	r6, [pc, #184]	; (8003bcc <_malloc_r+0xe4>)
 8003b12:	f000 f89d 	bl	8003c50 <__malloc_lock>
 8003b16:	6833      	ldr	r3, [r6, #0]
 8003b18:	461c      	mov	r4, r3
 8003b1a:	bb34      	cbnz	r4, 8003b6a <_malloc_r+0x82>
 8003b1c:	4629      	mov	r1, r5
 8003b1e:	4638      	mov	r0, r7
 8003b20:	f7ff ffc2 	bl	8003aa8 <sbrk_aligned>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	4604      	mov	r4, r0
 8003b28:	d14d      	bne.n	8003bc6 <_malloc_r+0xde>
 8003b2a:	6834      	ldr	r4, [r6, #0]
 8003b2c:	4626      	mov	r6, r4
 8003b2e:	2e00      	cmp	r6, #0
 8003b30:	d140      	bne.n	8003bb4 <_malloc_r+0xcc>
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	4631      	mov	r1, r6
 8003b36:	4638      	mov	r0, r7
 8003b38:	eb04 0803 	add.w	r8, r4, r3
 8003b3c:	f000 f878 	bl	8003c30 <_sbrk_r>
 8003b40:	4580      	cmp	r8, r0
 8003b42:	d13a      	bne.n	8003bba <_malloc_r+0xd2>
 8003b44:	6821      	ldr	r1, [r4, #0]
 8003b46:	3503      	adds	r5, #3
 8003b48:	1a6d      	subs	r5, r5, r1
 8003b4a:	f025 0503 	bic.w	r5, r5, #3
 8003b4e:	3508      	adds	r5, #8
 8003b50:	2d0c      	cmp	r5, #12
 8003b52:	bf38      	it	cc
 8003b54:	250c      	movcc	r5, #12
 8003b56:	4629      	mov	r1, r5
 8003b58:	4638      	mov	r0, r7
 8003b5a:	f7ff ffa5 	bl	8003aa8 <sbrk_aligned>
 8003b5e:	3001      	adds	r0, #1
 8003b60:	d02b      	beq.n	8003bba <_malloc_r+0xd2>
 8003b62:	6823      	ldr	r3, [r4, #0]
 8003b64:	442b      	add	r3, r5
 8003b66:	6023      	str	r3, [r4, #0]
 8003b68:	e00e      	b.n	8003b88 <_malloc_r+0xa0>
 8003b6a:	6822      	ldr	r2, [r4, #0]
 8003b6c:	1b52      	subs	r2, r2, r5
 8003b6e:	d41e      	bmi.n	8003bae <_malloc_r+0xc6>
 8003b70:	2a0b      	cmp	r2, #11
 8003b72:	d916      	bls.n	8003ba2 <_malloc_r+0xba>
 8003b74:	1961      	adds	r1, r4, r5
 8003b76:	42a3      	cmp	r3, r4
 8003b78:	6025      	str	r5, [r4, #0]
 8003b7a:	bf18      	it	ne
 8003b7c:	6059      	strne	r1, [r3, #4]
 8003b7e:	6863      	ldr	r3, [r4, #4]
 8003b80:	bf08      	it	eq
 8003b82:	6031      	streq	r1, [r6, #0]
 8003b84:	5162      	str	r2, [r4, r5]
 8003b86:	604b      	str	r3, [r1, #4]
 8003b88:	4638      	mov	r0, r7
 8003b8a:	f104 060b 	add.w	r6, r4, #11
 8003b8e:	f000 f865 	bl	8003c5c <__malloc_unlock>
 8003b92:	f026 0607 	bic.w	r6, r6, #7
 8003b96:	1d23      	adds	r3, r4, #4
 8003b98:	1af2      	subs	r2, r6, r3
 8003b9a:	d0b6      	beq.n	8003b0a <_malloc_r+0x22>
 8003b9c:	1b9b      	subs	r3, r3, r6
 8003b9e:	50a3      	str	r3, [r4, r2]
 8003ba0:	e7b3      	b.n	8003b0a <_malloc_r+0x22>
 8003ba2:	6862      	ldr	r2, [r4, #4]
 8003ba4:	42a3      	cmp	r3, r4
 8003ba6:	bf0c      	ite	eq
 8003ba8:	6032      	streq	r2, [r6, #0]
 8003baa:	605a      	strne	r2, [r3, #4]
 8003bac:	e7ec      	b.n	8003b88 <_malloc_r+0xa0>
 8003bae:	4623      	mov	r3, r4
 8003bb0:	6864      	ldr	r4, [r4, #4]
 8003bb2:	e7b2      	b.n	8003b1a <_malloc_r+0x32>
 8003bb4:	4634      	mov	r4, r6
 8003bb6:	6876      	ldr	r6, [r6, #4]
 8003bb8:	e7b9      	b.n	8003b2e <_malloc_r+0x46>
 8003bba:	230c      	movs	r3, #12
 8003bbc:	603b      	str	r3, [r7, #0]
 8003bbe:	4638      	mov	r0, r7
 8003bc0:	f000 f84c 	bl	8003c5c <__malloc_unlock>
 8003bc4:	e7a1      	b.n	8003b0a <_malloc_r+0x22>
 8003bc6:	6025      	str	r5, [r4, #0]
 8003bc8:	e7de      	b.n	8003b88 <_malloc_r+0xa0>
 8003bca:	bf00      	nop
 8003bcc:	200003c4 	.word	0x200003c4

08003bd0 <_realloc_r>:
 8003bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd4:	4680      	mov	r8, r0
 8003bd6:	4614      	mov	r4, r2
 8003bd8:	460e      	mov	r6, r1
 8003bda:	b921      	cbnz	r1, 8003be6 <_realloc_r+0x16>
 8003bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003be0:	4611      	mov	r1, r2
 8003be2:	f7ff bf81 	b.w	8003ae8 <_malloc_r>
 8003be6:	b92a      	cbnz	r2, 8003bf4 <_realloc_r+0x24>
 8003be8:	f7ff ff12 	bl	8003a10 <_free_r>
 8003bec:	4625      	mov	r5, r4
 8003bee:	4628      	mov	r0, r5
 8003bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bf4:	f000 f838 	bl	8003c68 <_malloc_usable_size_r>
 8003bf8:	4284      	cmp	r4, r0
 8003bfa:	4607      	mov	r7, r0
 8003bfc:	d802      	bhi.n	8003c04 <_realloc_r+0x34>
 8003bfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c02:	d812      	bhi.n	8003c2a <_realloc_r+0x5a>
 8003c04:	4621      	mov	r1, r4
 8003c06:	4640      	mov	r0, r8
 8003c08:	f7ff ff6e 	bl	8003ae8 <_malloc_r>
 8003c0c:	4605      	mov	r5, r0
 8003c0e:	2800      	cmp	r0, #0
 8003c10:	d0ed      	beq.n	8003bee <_realloc_r+0x1e>
 8003c12:	42bc      	cmp	r4, r7
 8003c14:	4622      	mov	r2, r4
 8003c16:	4631      	mov	r1, r6
 8003c18:	bf28      	it	cs
 8003c1a:	463a      	movcs	r2, r7
 8003c1c:	f7ff fed0 	bl	80039c0 <memcpy>
 8003c20:	4631      	mov	r1, r6
 8003c22:	4640      	mov	r0, r8
 8003c24:	f7ff fef4 	bl	8003a10 <_free_r>
 8003c28:	e7e1      	b.n	8003bee <_realloc_r+0x1e>
 8003c2a:	4635      	mov	r5, r6
 8003c2c:	e7df      	b.n	8003bee <_realloc_r+0x1e>
	...

08003c30 <_sbrk_r>:
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	4d06      	ldr	r5, [pc, #24]	; (8003c4c <_sbrk_r+0x1c>)
 8003c34:	2300      	movs	r3, #0
 8003c36:	4604      	mov	r4, r0
 8003c38:	4608      	mov	r0, r1
 8003c3a:	602b      	str	r3, [r5, #0]
 8003c3c:	f7fc ff92 	bl	8000b64 <_sbrk>
 8003c40:	1c43      	adds	r3, r0, #1
 8003c42:	d102      	bne.n	8003c4a <_sbrk_r+0x1a>
 8003c44:	682b      	ldr	r3, [r5, #0]
 8003c46:	b103      	cbz	r3, 8003c4a <_sbrk_r+0x1a>
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	bd38      	pop	{r3, r4, r5, pc}
 8003c4c:	200003cc 	.word	0x200003cc

08003c50 <__malloc_lock>:
 8003c50:	4801      	ldr	r0, [pc, #4]	; (8003c58 <__malloc_lock+0x8>)
 8003c52:	f000 b811 	b.w	8003c78 <__retarget_lock_acquire_recursive>
 8003c56:	bf00      	nop
 8003c58:	200003d0 	.word	0x200003d0

08003c5c <__malloc_unlock>:
 8003c5c:	4801      	ldr	r0, [pc, #4]	; (8003c64 <__malloc_unlock+0x8>)
 8003c5e:	f000 b80c 	b.w	8003c7a <__retarget_lock_release_recursive>
 8003c62:	bf00      	nop
 8003c64:	200003d0 	.word	0x200003d0

08003c68 <_malloc_usable_size_r>:
 8003c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c6c:	1f18      	subs	r0, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	bfbc      	itt	lt
 8003c72:	580b      	ldrlt	r3, [r1, r0]
 8003c74:	18c0      	addlt	r0, r0, r3
 8003c76:	4770      	bx	lr

08003c78 <__retarget_lock_acquire_recursive>:
 8003c78:	4770      	bx	lr

08003c7a <__retarget_lock_release_recursive>:
 8003c7a:	4770      	bx	lr

08003c7c <_init>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	bf00      	nop
 8003c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c82:	bc08      	pop	{r3}
 8003c84:	469e      	mov	lr, r3
 8003c86:	4770      	bx	lr

08003c88 <_fini>:
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	bf00      	nop
 8003c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8e:	bc08      	pop	{r3}
 8003c90:	469e      	mov	lr, r3
 8003c92:	4770      	bx	lr
