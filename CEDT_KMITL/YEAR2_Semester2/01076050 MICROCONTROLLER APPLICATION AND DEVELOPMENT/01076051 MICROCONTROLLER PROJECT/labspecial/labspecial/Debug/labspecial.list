
labspecial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a94  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003c94  08003c94  00013c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d64  08003d64  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08003d64  08003d64  00013d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d6c  08003d6c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d6c  08003d6c  00013d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000064  08003dd8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08003dd8  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009e23  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019a4  00000000  00000000  00029ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000790  00000000  00000000  0002b8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ba  00000000  00000000  0002c030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026de8  00000000  00000000  0002c5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b463  00000000  00000000  000533d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0869  00000000  00000000  0005e835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000021e0  00000000  00000000  0014f0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00151280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000064 	.word	0x20000064
 800021c:	00000000 	.word	0x00000000
 8000220:	08003c7c 	.word	0x08003c7c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000068 	.word	0x20000068
 800023c:	08003c7c 	.word	0x08003c7c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:

/** Configure pins
     PB6   ------> USART1_TX
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000602:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_GPIO_Init+0x88>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <MX_GPIO_Init+0x88>)
 8000608:	f043 0308 	orr.w	r3, r3, #8
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_GPIO_Init+0x88>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0308 	and.w	r3, r3, #8
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_GPIO_Init+0x88>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a15      	ldr	r2, [pc, #84]	; (8000674 <MX_GPIO_Init+0x88>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MX_GPIO_Init+0x88>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_GPIO_Init+0x88>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <MX_GPIO_Init+0x88>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <MX_GPIO_Init+0x88>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800064a:	2340      	movs	r3, #64	; 0x40
 800064c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064e:	2302      	movs	r3, #2
 8000650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000656:	2303      	movs	r3, #3
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800065a:	2307      	movs	r3, #7
 800065c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	4619      	mov	r1, r3
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_GPIO_Init+0x8c>)
 8000666:	f000 fdbd 	bl	80011e4 <HAL_GPIO_Init>

}
 800066a:	bf00      	nop
 800066c:	3720      	adds	r7, #32
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40020400 	.word	0x40020400

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f000 fc6d 	bl	8000f5e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000684:	f000 f9c0 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000688:	f7ff ffb0 	bl	80005ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800068c:	f000 faf6 	bl	8000c7c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000690:	f000 fac4 	bl	8000c1c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000694:	f000 fb22 	bl	8000cdc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000698:	bf00      	nop
 800069a:	4ba3      	ldr	r3, [pc, #652]	; (8000928 <main+0x2ac>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	69db      	ldr	r3, [r3, #28]
 80006a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a4:	2b40      	cmp	r3, #64	; 0x40
 80006a6:	d1f8      	bne.n	800069a <main+0x1e>
   HAL_UART_Transmit(&huart3, (uint32_t*)"\r\nMan From U.A.R.T.1!\n\rQuit PRESS q", 35, 1000);
 80006a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ac:	2223      	movs	r2, #35	; 0x23
 80006ae:	499f      	ldr	r1, [pc, #636]	; (800092c <main+0x2b0>)
 80006b0:	489d      	ldr	r0, [pc, #628]	; (8000928 <main+0x2ac>)
 80006b2:	f002 f8dd 	bl	8002870 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (state1 == 1 ){
 80006b6:	4b9e      	ldr	r3, [pc, #632]	; (8000930 <main+0x2b4>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d146      	bne.n	800074c <main+0xd0>
	  	  	 while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80006be:	bf00      	nop
 80006c0:	4b99      	ldr	r3, [pc, #612]	; (8000928 <main+0x2ac>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ca:	2b40      	cmp	r3, #64	; 0x40
 80006cc:	d1f8      	bne.n	80006c0 <main+0x44>
	  	  	 	HAL_UART_Transmit(&huart3, (uint32_t*)"\r\n\tName : ", 10, 1000);
 80006ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d2:	220a      	movs	r2, #10
 80006d4:	4997      	ldr	r1, [pc, #604]	; (8000934 <main+0x2b8>)
 80006d6:	4894      	ldr	r0, [pc, #592]	; (8000928 <main+0x2ac>)
 80006d8:	f002 f8ca 	bl	8002870 <HAL_UART_Transmit>


	  	  	 while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)== RESET){}
 80006dc:	bf00      	nop
 80006de:	4b92      	ldr	r3, [pc, #584]	; (8000928 <main+0x2ac>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	f003 0320 	and.w	r3, r3, #32
 80006e8:	2b20      	cmp	r3, #32
 80006ea:	d1f8      	bne.n	80006de <main+0x62>
	  	  	 	 HAL_UART_Receive(&huart3, (uint32_t*)&username, 100,1000);
 80006ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f0:	2264      	movs	r2, #100	; 0x64
 80006f2:	4991      	ldr	r1, [pc, #580]	; (8000938 <main+0x2bc>)
 80006f4:	488c      	ldr	r0, [pc, #560]	; (8000928 <main+0x2ac>)
 80006f6:	f002 f93e 	bl	8002976 <HAL_UART_Receive>


	  	  	if (username[0] != '\000'){
 80006fa:	4b8f      	ldr	r3, [pc, #572]	; (8000938 <main+0x2bc>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d021      	beq.n	8000746 <main+0xca>
	  	  		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000702:	bf00      	nop
 8000704:	4b88      	ldr	r3, [pc, #544]	; (8000928 <main+0x2ac>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070e:	2b40      	cmp	r3, #64	; 0x40
 8000710:	d1f8      	bne.n	8000704 <main+0x88>
	  	  		HAL_UART_Transmit(&huart3, (uint32_t*)&username, 100, 1000);
 8000712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000716:	2264      	movs	r2, #100	; 0x64
 8000718:	4987      	ldr	r1, [pc, #540]	; (8000938 <main+0x2bc>)
 800071a:	4883      	ldr	r0, [pc, #524]	; (8000928 <main+0x2ac>)
 800071c:	f002 f8a8 	bl	8002870 <HAL_UART_Transmit>
	  	  		while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8000720:	bf00      	nop
 8000722:	4b86      	ldr	r3, [pc, #536]	; (800093c <main+0x2c0>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	69db      	ldr	r3, [r3, #28]
 8000728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800072c:	2b40      	cmp	r3, #64	; 0x40
 800072e:	d1f8      	bne.n	8000722 <main+0xa6>
	  	  		HAL_UART_Transmit(&huart2, (uint32_t*)&username, strlen(username), 1000);}
 8000730:	4881      	ldr	r0, [pc, #516]	; (8000938 <main+0x2bc>)
 8000732:	f7ff fd85 	bl	8000240 <strlen>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073e:	497e      	ldr	r1, [pc, #504]	; (8000938 <main+0x2bc>)
 8000740:	487e      	ldr	r0, [pc, #504]	; (800093c <main+0x2c0>)
 8000742:	f002 f895 	bl	8002870 <HAL_UART_Transmit>

	  	  	    state1 = 0;
 8000746:	4b7a      	ldr	r3, [pc, #488]	; (8000930 <main+0x2b4>)
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
	  	  }


	  	  if (state2 == 1){
 800074c:	4b7c      	ldr	r3, [pc, #496]	; (8000940 <main+0x2c4>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d144      	bne.n	80007de <main+0x162>

	  				  while(name[0] == '\000'){
 8000754:	e013      	b.n	800077e <main+0x102>
	  					  memset(name,0,sizeof(name));
 8000756:	2264      	movs	r2, #100	; 0x64
 8000758:	2100      	movs	r1, #0
 800075a:	487a      	ldr	r0, [pc, #488]	; (8000944 <main+0x2c8>)
 800075c:	f002 fe0a 	bl	8003374 <memset>
	  					  while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE)== RESET){}
 8000760:	bf00      	nop
 8000762:	4b76      	ldr	r3, [pc, #472]	; (800093c <main+0x2c0>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	69db      	ldr	r3, [r3, #28]
 8000768:	f003 0320 	and.w	r3, r3, #32
 800076c:	2b20      	cmp	r3, #32
 800076e:	d1f8      	bne.n	8000762 <main+0xe6>
	  					  HAL_UART_Receive(&huart2, (uint32_t)&name, 100,1000);
 8000770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000774:	2264      	movs	r2, #100	; 0x64
 8000776:	4973      	ldr	r1, [pc, #460]	; (8000944 <main+0x2c8>)
 8000778:	4870      	ldr	r0, [pc, #448]	; (800093c <main+0x2c0>)
 800077a:	f002 f8fc 	bl	8002976 <HAL_UART_Receive>
	  				  while(name[0] == '\000'){
 800077e:	4b71      	ldr	r3, [pc, #452]	; (8000944 <main+0x2c8>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0e7      	beq.n	8000756 <main+0xda>
	  				  }

	  				  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000786:	bf00      	nop
 8000788:	4b67      	ldr	r3, [pc, #412]	; (8000928 <main+0x2ac>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000792:	2b40      	cmp	r3, #64	; 0x40
 8000794:	d1f8      	bne.n	8000788 <main+0x10c>
	  				  HAL_UART_Transmit(&huart3, (uint32_t*)"\r\n\t", 4, 200);
 8000796:	23c8      	movs	r3, #200	; 0xc8
 8000798:	2204      	movs	r2, #4
 800079a:	496b      	ldr	r1, [pc, #428]	; (8000948 <main+0x2cc>)
 800079c:	4862      	ldr	r0, [pc, #392]	; (8000928 <main+0x2ac>)
 800079e:	f002 f867 	bl	8002870 <HAL_UART_Transmit>
	  				  HAL_UART_Transmit(&huart3, (uint32_t)&name, 100, 1000);
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	2264      	movs	r2, #100	; 0x64
 80007a8:	4966      	ldr	r1, [pc, #408]	; (8000944 <main+0x2c8>)
 80007aa:	485f      	ldr	r0, [pc, #380]	; (8000928 <main+0x2ac>)
 80007ac:	f002 f860 	bl	8002870 <HAL_UART_Transmit>

	  				  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80007b0:	bf00      	nop
 80007b2:	4b5d      	ldr	r3, [pc, #372]	; (8000928 <main+0x2ac>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007bc:	2b40      	cmp	r3, #64	; 0x40
 80007be:	d1f8      	bne.n	80007b2 <main+0x136>
	  				  HAL_UART_Transmit(&huart3, (uint32_t*)" is Ready!", 10, 1000);
 80007c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c4:	220a      	movs	r2, #10
 80007c6:	4961      	ldr	r1, [pc, #388]	; (800094c <main+0x2d0>)
 80007c8:	4857      	ldr	r0, [pc, #348]	; (8000928 <main+0x2ac>)
 80007ca:	f002 f851 	bl	8002870 <HAL_UART_Transmit>
	  				  memset(name,0,sizeof(name));
 80007ce:	2264      	movs	r2, #100	; 0x64
 80007d0:	2100      	movs	r1, #0
 80007d2:	485c      	ldr	r0, [pc, #368]	; (8000944 <main+0x2c8>)
 80007d4:	f002 fdce 	bl	8003374 <memset>

	  	 		  state2 = 0;
 80007d8:	4b59      	ldr	r3, [pc, #356]	; (8000940 <main+0x2c4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]

	  	 	}

	  	      memset(buffer,0,sizeof(buffer));
 80007de:	2264      	movs	r2, #100	; 0x64
 80007e0:	2100      	movs	r1, #0
 80007e2:	485b      	ldr	r0, [pc, #364]	; (8000950 <main+0x2d4>)
 80007e4:	f002 fdc6 	bl	8003374 <memset>
	  	      memset(transmit,0,sizeof(transmit));
 80007e8:	2264      	movs	r2, #100	; 0x64
 80007ea:	2100      	movs	r1, #0
 80007ec:	4859      	ldr	r0, [pc, #356]	; (8000954 <main+0x2d8>)
 80007ee:	f002 fdc1 	bl	8003374 <memset>

	  	 	 		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80007f2:	bf00      	nop
 80007f4:	4b4c      	ldr	r3, [pc, #304]	; (8000928 <main+0x2ac>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fe:	2b40      	cmp	r3, #64	; 0x40
 8000800:	d1f8      	bne.n	80007f4 <main+0x178>
	  	 	 		  	HAL_UART_Transmit(&huart3, (uint32_t*)"\r\n\t", 4, 200);
 8000802:	23c8      	movs	r3, #200	; 0xc8
 8000804:	2204      	movs	r2, #4
 8000806:	4950      	ldr	r1, [pc, #320]	; (8000948 <main+0x2cc>)
 8000808:	4847      	ldr	r0, [pc, #284]	; (8000928 <main+0x2ac>)
 800080a:	f002 f831 	bl	8002870 <HAL_UART_Transmit>
	  	 	 		  	HAL_UART_Transmit(&huart3, (uint32_t*)&username, strlen(username), 1000);
 800080e:	484a      	ldr	r0, [pc, #296]	; (8000938 <main+0x2bc>)
 8000810:	f7ff fd16 	bl	8000240 <strlen>
 8000814:	4603      	mov	r3, r0
 8000816:	b29a      	uxth	r2, r3
 8000818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081c:	4946      	ldr	r1, [pc, #280]	; (8000938 <main+0x2bc>)
 800081e:	4842      	ldr	r0, [pc, #264]	; (8000928 <main+0x2ac>)
 8000820:	f002 f826 	bl	8002870 <HAL_UART_Transmit>

	  	 	 		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000824:	bf00      	nop
 8000826:	4b40      	ldr	r3, [pc, #256]	; (8000928 <main+0x2ac>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	69db      	ldr	r3, [r3, #28]
 800082c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000830:	2b40      	cmp	r3, #64	; 0x40
 8000832:	d1f8      	bne.n	8000826 <main+0x1aa>
	  	 	 		  	HAL_UART_Transmit(&huart3, (uint32_t*)"=>", 2, 1000);
 8000834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000838:	2202      	movs	r2, #2
 800083a:	4947      	ldr	r1, [pc, #284]	; (8000958 <main+0x2dc>)
 800083c:	483a      	ldr	r0, [pc, #232]	; (8000928 <main+0x2ac>)
 800083e:	f002 f817 	bl	8002870 <HAL_UART_Transmit>

	  	 	 		 while(transmit[0] == '\000'){
 8000842:	e013      	b.n	800086c <main+0x1f0>
	  					  memset(transmit,0,sizeof(transmit));
 8000844:	2264      	movs	r2, #100	; 0x64
 8000846:	2100      	movs	r1, #0
 8000848:	4842      	ldr	r0, [pc, #264]	; (8000954 <main+0x2d8>)
 800084a:	f002 fd93 	bl	8003374 <memset>
	  					  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)== RESET){}
 800084e:	bf00      	nop
 8000850:	4b35      	ldr	r3, [pc, #212]	; (8000928 <main+0x2ac>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 0320 	and.w	r3, r3, #32
 800085a:	2b20      	cmp	r3, #32
 800085c:	d1f8      	bne.n	8000850 <main+0x1d4>
	  						HAL_UART_Receive(&huart3, (uint32_t*)&transmit, 100,1000);
 800085e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000862:	2264      	movs	r2, #100	; 0x64
 8000864:	493b      	ldr	r1, [pc, #236]	; (8000954 <main+0x2d8>)
 8000866:	4830      	ldr	r0, [pc, #192]	; (8000928 <main+0x2ac>)
 8000868:	f002 f885 	bl	8002976 <HAL_UART_Receive>
	  	 	 		 while(transmit[0] == '\000'){
 800086c:	4b39      	ldr	r3, [pc, #228]	; (8000954 <main+0x2d8>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d0e7      	beq.n	8000844 <main+0x1c8>
	  	 	 		 }

	  	 	 		 while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000874:	bf00      	nop
 8000876:	4b2c      	ldr	r3, [pc, #176]	; (8000928 <main+0x2ac>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	69db      	ldr	r3, [r3, #28]
 800087c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000880:	2b40      	cmp	r3, #64	; 0x40
 8000882:	d1f8      	bne.n	8000876 <main+0x1fa>
	  	 	 		 HAL_UART_Transmit(&huart3, (uint32_t*)&transmit, 100, 1000);
 8000884:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000888:	2264      	movs	r2, #100	; 0x64
 800088a:	4932      	ldr	r1, [pc, #200]	; (8000954 <main+0x2d8>)
 800088c:	4826      	ldr	r0, [pc, #152]	; (8000928 <main+0x2ac>)
 800088e:	f001 ffef 	bl	8002870 <HAL_UART_Transmit>

	  	 	 		if((transmit[0] == 'q'||transmit[0] == 'Q') && transmit[1] == '\000'){
 8000892:	4b30      	ldr	r3, [pc, #192]	; (8000954 <main+0x2d8>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b71      	cmp	r3, #113	; 0x71
 8000898:	d003      	beq.n	80008a2 <main+0x226>
 800089a:	4b2e      	ldr	r3, [pc, #184]	; (8000954 <main+0x2d8>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b51      	cmp	r3, #81	; 0x51
 80008a0:	d127      	bne.n	80008f2 <main+0x276>
 80008a2:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <main+0x2d8>)
 80008a4:	785b      	ldrb	r3, [r3, #1]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d123      	bne.n	80008f2 <main+0x276>

	  	 	 			while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80008aa:	bf00      	nop
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <main+0x2ac>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b6:	2b40      	cmp	r3, #64	; 0x40
 80008b8:	d1f8      	bne.n	80008ac <main+0x230>
	  	 	 			HAL_UART_Transmit(&huart3, (uint32_t)"\r\nUSER1 is disconected", 20, 1000);
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	2214      	movs	r2, #20
 80008c0:	4926      	ldr	r1, [pc, #152]	; (800095c <main+0x2e0>)
 80008c2:	4819      	ldr	r0, [pc, #100]	; (8000928 <main+0x2ac>)
 80008c4:	f001 ffd4 	bl	8002870 <HAL_UART_Transmit>
	  	 	 			sprintf(buffer,"%s",transmit);
 80008c8:	4a22      	ldr	r2, [pc, #136]	; (8000954 <main+0x2d8>)
 80008ca:	4925      	ldr	r1, [pc, #148]	; (8000960 <main+0x2e4>)
 80008cc:	4820      	ldr	r0, [pc, #128]	; (8000950 <main+0x2d4>)
 80008ce:	f002 fd31 	bl	8003334 <siprintf>
	  	 	 			while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 80008d2:	bf00      	nop
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <main+0x2c0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008de:	2b40      	cmp	r3, #64	; 0x40
 80008e0:	d1f8      	bne.n	80008d4 <main+0x258>
	  	 	 			HAL_UART_Transmit(&huart2, (uint32_t*)&buffer, 100, 1000);
 80008e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e6:	2264      	movs	r2, #100	; 0x64
 80008e8:	4919      	ldr	r1, [pc, #100]	; (8000950 <main+0x2d4>)
 80008ea:	4814      	ldr	r0, [pc, #80]	; (800093c <main+0x2c0>)
 80008ec:	f001 ffc0 	bl	8002870 <HAL_UART_Transmit>
	  	 	 			break;
 80008f0:	e07e      	b.n	80009f0 <main+0x374>

	  	 	 		}
	  	 	 		else{
	  	 	 		 sprintf(buffer,"\r\n\t%s : %s",username,transmit);
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <main+0x2d8>)
 80008f4:	4a10      	ldr	r2, [pc, #64]	; (8000938 <main+0x2bc>)
 80008f6:	491b      	ldr	r1, [pc, #108]	; (8000964 <main+0x2e8>)
 80008f8:	4815      	ldr	r0, [pc, #84]	; (8000950 <main+0x2d4>)
 80008fa:	f002 fd1b 	bl	8003334 <siprintf>
	  	 	 		  while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 80008fe:	bf00      	nop
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <main+0x2c0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800090a:	2b40      	cmp	r3, #64	; 0x40
 800090c:	d1f8      	bne.n	8000900 <main+0x284>
	  	 	 		  HAL_UART_Transmit(&huart2, (uint32_t*)&buffer, 100, 1000);
 800090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000912:	2264      	movs	r2, #100	; 0x64
 8000914:	490e      	ldr	r1, [pc, #56]	; (8000950 <main+0x2d4>)
 8000916:	4809      	ldr	r0, [pc, #36]	; (800093c <main+0x2c0>)
 8000918:	f001 ffaa 	bl	8002870 <HAL_UART_Transmit>
	  	 	 		}



	  		  memset(name,0,sizeof(name));
 800091c:	2264      	movs	r2, #100	; 0x64
 800091e:	2100      	movs	r1, #0
 8000920:	4808      	ldr	r0, [pc, #32]	; (8000944 <main+0x2c8>)
 8000922:	f002 fd27 	bl	8003374 <memset>

	  				  while(name[0] == '\000'){
 8000926:	e033      	b.n	8000990 <main+0x314>
 8000928:	2000029c 	.word	0x2000029c
 800092c:	08003c94 	.word	0x08003c94
 8000930:	20000000 	.word	0x20000000
 8000934:	08003cb8 	.word	0x08003cb8
 8000938:	200000e4 	.word	0x200000e4
 800093c:	20000214 	.word	0x20000214
 8000940:	20000004 	.word	0x20000004
 8000944:	20000080 	.word	0x20000080
 8000948:	08003cc4 	.word	0x08003cc4
 800094c:	08003cc8 	.word	0x08003cc8
 8000950:	200001ac 	.word	0x200001ac
 8000954:	20000148 	.word	0x20000148
 8000958:	08003cd4 	.word	0x08003cd4
 800095c:	08003cd8 	.word	0x08003cd8
 8000960:	08003cf0 	.word	0x08003cf0
 8000964:	08003cf4 	.word	0x08003cf4
	  					  memset(name,0,sizeof(name));
 8000968:	2264      	movs	r2, #100	; 0x64
 800096a:	2100      	movs	r1, #0
 800096c:	4822      	ldr	r0, [pc, #136]	; (80009f8 <main+0x37c>)
 800096e:	f002 fd01 	bl	8003374 <memset>
	  					  while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE)== RESET){}
 8000972:	bf00      	nop
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <main+0x380>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f003 0320 	and.w	r3, r3, #32
 800097e:	2b20      	cmp	r3, #32
 8000980:	d1f8      	bne.n	8000974 <main+0x2f8>
	  					  HAL_UART_Receive(&huart2, (uint32_t)&name, 100,1000);
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	2264      	movs	r2, #100	; 0x64
 8000988:	491b      	ldr	r1, [pc, #108]	; (80009f8 <main+0x37c>)
 800098a:	481c      	ldr	r0, [pc, #112]	; (80009fc <main+0x380>)
 800098c:	f001 fff3 	bl	8002976 <HAL_UART_Receive>
	  				  while(name[0] == '\000'){
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <main+0x37c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d0e7      	beq.n	8000968 <main+0x2ec>

	  				  }
	  				  if((name[0] == 'q'||name[0] == 'Q') && name[1] == '\000'){
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <main+0x37c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b71      	cmp	r3, #113	; 0x71
 800099e:	d003      	beq.n	80009a8 <main+0x32c>
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <main+0x37c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b51      	cmp	r3, #81	; 0x51
 80009a6:	d113      	bne.n	80009d0 <main+0x354>
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <main+0x37c>)
 80009aa:	785b      	ldrb	r3, [r3, #1]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d10f      	bne.n	80009d0 <main+0x354>
	  				  	state3 == 0;
	  				  	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80009b0:	bf00      	nop
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <main+0x384>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	69db      	ldr	r3, [r3, #28]
 80009b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009bc:	2b40      	cmp	r3, #64	; 0x40
 80009be:	d1f8      	bne.n	80009b2 <main+0x336>
	  				  	HAL_UART_Transmit(&huart3, (uint32_t)"\r\nUSER2 is disconected", 20, 1000);
 80009c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c4:	2214      	movs	r2, #20
 80009c6:	490f      	ldr	r1, [pc, #60]	; (8000a04 <main+0x388>)
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <main+0x384>)
 80009ca:	f001 ff51 	bl	8002870 <HAL_UART_Transmit>
	  				  	break;
 80009ce:	e00f      	b.n	80009f0 <main+0x374>
	  				  }
	  				  else{

	  					  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80009d0:	bf00      	nop
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <main+0x384>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	69db      	ldr	r3, [r3, #28]
 80009d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009dc:	2b40      	cmp	r3, #64	; 0x40
 80009de:	d1f8      	bne.n	80009d2 <main+0x356>
	  					  HAL_UART_Transmit(&huart3, (uint32_t)&name, 100, 1000);
 80009e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e4:	2264      	movs	r2, #100	; 0x64
 80009e6:	4904      	ldr	r1, [pc, #16]	; (80009f8 <main+0x37c>)
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <main+0x384>)
 80009ea:	f001 ff41 	bl	8002870 <HAL_UART_Transmit>
	  if (state1 == 1 ){
 80009ee:	e662      	b.n	80006b6 <main+0x3a>
 80009f0:	2300      	movs	r3, #0
	  				  }

  }
  /* USER CODE END 3 */
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000080 	.word	0x20000080
 80009fc:	20000214 	.word	0x20000214
 8000a00:	2000029c 	.word	0x2000029c
 8000a04:	08003d00 	.word	0x08003d00

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b094      	sub	sp, #80	; 0x50
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	2234      	movs	r2, #52	; 0x34
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 fcac 	bl	8003374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2c:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <SystemClock_Config+0xd4>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	4a2a      	ldr	r2, [pc, #168]	; (8000adc <SystemClock_Config+0xd4>)
 8000a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40
 8000a38:	4b28      	ldr	r3, [pc, #160]	; (8000adc <SystemClock_Config+0xd4>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a44:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <SystemClock_Config+0xd8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a25      	ldr	r2, [pc, #148]	; (8000ae0 <SystemClock_Config+0xd8>)
 8000a4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <SystemClock_Config+0xd8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a64:	2310      	movs	r3, #16
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a70:	2308      	movs	r3, #8
 8000a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a74:	23d8      	movs	r3, #216	; 0xd8
 8000a76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fda7 	bl	80015dc <HAL_RCC_OscConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a94:	f000 f826 	bl	8000ae4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a98:	f000 fd50 	bl	800153c <HAL_PWREx_EnableOverDrive>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aa2:	f000 f81f 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ab2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	2107      	movs	r1, #7
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 f837 	bl	8001b38 <HAL_RCC_ClockConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000ad0:	f000 f808 	bl	8000ae4 <Error_Handler>
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	3750      	adds	r7, #80	; 0x50
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40007000 	.word	0x40007000

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <HAL_MspInit+0x44>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <HAL_MspInit+0x44>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <HAL_MspInit+0x44>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_MspInit+0x44>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_MspInit+0x44>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_MspInit+0x44>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b84:	f000 fa28 	bl	8000fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f002 fbe2 	bl	8003384 <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20080000 	.word	0x20080000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	20000210 	.word	0x20000210
 8000bf4:	200004f8 	.word	0x200004f8

08000bf8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <SystemInit+0x20>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <SystemInit+0x20>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c22:	4a15      	ldr	r2, [pc, #84]	; (8000c78 <MX_USART2_UART_Init+0x5c>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c60:	f001 fdb8 	bl	80027d4 <HAL_UART_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c6a:	f7ff ff3b 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000214 	.word	0x20000214
 8000c78:	40004400 	.word	0x40004400

08000c7c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_USART3_UART_Init+0x58>)
 8000c82:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <MX_USART3_UART_Init+0x5c>)
 8000c84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <MX_USART3_UART_Init+0x58>)
 8000c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_USART3_UART_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_USART3_UART_Init+0x58>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_USART3_UART_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_USART3_UART_Init+0x58>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <MX_USART3_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_USART3_UART_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <MX_USART3_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_USART3_UART_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_USART3_UART_Init+0x58>)
 8000cc0:	f001 fd88 	bl	80027d4 <HAL_UART_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cca:	f7ff ff0b 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2000029c 	.word	0x2000029c
 8000cd8:	40004800 	.word	0x40004800

08000cdc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_USART6_UART_Init+0x58>)
 8000ce2:	4a15      	ldr	r2, [pc, #84]	; (8000d38 <MX_USART6_UART_Init+0x5c>)
 8000ce4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_USART6_UART_Init+0x58>)
 8000ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_USART6_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_USART6_UART_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_USART6_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_USART6_UART_Init+0x58>)
 8000d02:	220c      	movs	r2, #12
 8000d04:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MX_USART6_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_USART6_UART_Init+0x58>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MX_USART6_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_USART6_UART_Init+0x58>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_USART6_UART_Init+0x58>)
 8000d20:	f001 fd58 	bl	80027d4 <HAL_UART_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000d2a:	f7ff fedb 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000324 	.word	0x20000324
 8000d38:	40011400 	.word	0x40011400

08000d3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0b2      	sub	sp, #200	; 0xc8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	2290      	movs	r2, #144	; 0x90
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f002 fb09 	bl	8003374 <memset>
  if(uartHandle->Instance==USART2)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a63      	ldr	r2, [pc, #396]	; (8000ef4 <HAL_UART_MspInit+0x1b8>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d13b      	bne.n	8000de4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f001 f903 	bl	8001f84 <HAL_RCCEx_PeriphCLKConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d84:	f7ff feae 	bl	8000ae4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d88:	4b5b      	ldr	r3, [pc, #364]	; (8000ef8 <HAL_UART_MspInit+0x1bc>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a5a      	ldr	r2, [pc, #360]	; (8000ef8 <HAL_UART_MspInit+0x1bc>)
 8000d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b58      	ldr	r3, [pc, #352]	; (8000ef8 <HAL_UART_MspInit+0x1bc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9c:	623b      	str	r3, [r7, #32]
 8000d9e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da0:	4b55      	ldr	r3, [pc, #340]	; (8000ef8 <HAL_UART_MspInit+0x1bc>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a54      	ldr	r2, [pc, #336]	; (8000ef8 <HAL_UART_MspInit+0x1bc>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b52      	ldr	r3, [pc, #328]	; (8000ef8 <HAL_UART_MspInit+0x1bc>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	61fb      	str	r3, [r7, #28]
 8000db6:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000db8:	2360      	movs	r3, #96	; 0x60
 8000dba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4847      	ldr	r0, [pc, #284]	; (8000efc <HAL_UART_MspInit+0x1c0>)
 8000dde:	f000 fa01 	bl	80011e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000de2:	e083      	b.n	8000eec <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART3)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a45      	ldr	r2, [pc, #276]	; (8000f00 <HAL_UART_MspInit+0x1c4>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d13d      	bne.n	8000e6a <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 f8c1 	bl	8001f84 <HAL_RCCEx_PeriphCLKConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000e08:	f7ff fe6c 	bl	8000ae4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e0c:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <HAL_UART_MspInit+0x1bc>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	4a39      	ldr	r2, [pc, #228]	; (8000ef8 <HAL_UART_MspInit+0x1bc>)
 8000e12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e16:	6413      	str	r3, [r2, #64]	; 0x40
 8000e18:	4b37      	ldr	r3, [pc, #220]	; (8000ef8 <HAL_UART_MspInit+0x1bc>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e20:	61bb      	str	r3, [r7, #24]
 8000e22:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e24:	4b34      	ldr	r3, [pc, #208]	; (8000ef8 <HAL_UART_MspInit+0x1bc>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4a33      	ldr	r2, [pc, #204]	; (8000ef8 <HAL_UART_MspInit+0x1bc>)
 8000e2a:	f043 0308 	orr.w	r3, r3, #8
 8000e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e30:	4b31      	ldr	r3, [pc, #196]	; (8000ef8 <HAL_UART_MspInit+0x1bc>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	f003 0308 	and.w	r3, r3, #8
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e56:	2307      	movs	r3, #7
 8000e58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4826      	ldr	r0, [pc, #152]	; (8000efc <HAL_UART_MspInit+0x1c0>)
 8000e64:	f000 f9be 	bl	80011e4 <HAL_GPIO_Init>
}
 8000e68:	e040      	b.n	8000eec <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART6)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a25      	ldr	r2, [pc, #148]	; (8000f04 <HAL_UART_MspInit+0x1c8>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d13b      	bne.n	8000eec <HAL_UART_MspInit+0x1b0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000e74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 f87e 	bl	8001f84 <HAL_RCCEx_PeriphCLKConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_UART_MspInit+0x156>
      Error_Handler();
 8000e8e:	f7ff fe29 	bl	8000ae4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <HAL_UART_MspInit+0x1bc>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a18      	ldr	r2, [pc, #96]	; (8000ef8 <HAL_UART_MspInit+0x1bc>)
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <HAL_UART_MspInit+0x1bc>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f003 0320 	and.w	r3, r3, #32
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <HAL_UART_MspInit+0x1bc>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <HAL_UART_MspInit+0x1bc>)
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <HAL_UART_MspInit+0x1bc>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ec2:	23c0      	movs	r3, #192	; 0xc0
 8000ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000eda:	2308      	movs	r3, #8
 8000edc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4808      	ldr	r0, [pc, #32]	; (8000f08 <HAL_UART_MspInit+0x1cc>)
 8000ee8:	f000 f97c 	bl	80011e4 <HAL_GPIO_Init>
}
 8000eec:	bf00      	nop
 8000eee:	37c8      	adds	r7, #200	; 0xc8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40004400 	.word	0x40004400
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020c00 	.word	0x40020c00
 8000f00:	40004800 	.word	0x40004800
 8000f04:	40011400 	.word	0x40011400
 8000f08:	40020800 	.word	0x40020800

08000f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f12:	490e      	ldr	r1, [pc, #56]	; (8000f4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f28:	4c0b      	ldr	r4, [pc, #44]	; (8000f58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f36:	f7ff fe5f 	bl	8000bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f002 fa29 	bl	8003390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3e:	f7ff fb9d 	bl	800067c <main>
  bx  lr    
 8000f42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f44:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f4c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000f50:	08003d74 	.word	0x08003d74
  ldr r2, =_sbss
 8000f54:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000f58:	200004f8 	.word	0x200004f8

08000f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC_IRQHandler>

08000f5e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f62:	2003      	movs	r0, #3
 8000f64:	f000 f90a 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f000 f805 	bl	8000f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6e:	f7ff fdbf 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_InitTick+0x54>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x58>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f917 	bl	80011ca <HAL_SYSTICK_Config>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00e      	b.n	8000fc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d80a      	bhi.n	8000fc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fac:	2200      	movs	r2, #0
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f000 f8ed 	bl	8001192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb8:	4a06      	ldr	r2, [pc, #24]	; (8000fd4 <HAL_InitTick+0x5c>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e000      	b.n	8000fc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000010 	.word	0x20000010
 8000fd4:	2000000c 	.word	0x2000000c

08000fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x24>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_IncTick+0x24>)
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000010 	.word	0x20000010
 8000ffc:	200003ac 	.word	0x200003ac

08001000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <HAL_GetTick+0x14>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	200003ac 	.word	0x200003ac

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <__NVIC_SetPriorityGrouping+0x40>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	4313      	orrs	r3, r2
 8001044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001046:	4a04      	ldr	r2, [pc, #16]	; (8001058 <__NVIC_SetPriorityGrouping+0x40>)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	60d3      	str	r3, [r2, #12]
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00
 800105c:	05fa0000 	.word	0x05fa0000

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	; (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ff8e 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff47 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff5c 	bl	8001060 <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff8e 	bl	80010d0 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff5d 	bl	800107c <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffb0 	bl	8001138 <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
 8001202:	e175      	b.n	80014f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001204:	2201      	movs	r2, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	429a      	cmp	r2, r3
 800121e:	f040 8164 	bne.w	80014ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d005      	beq.n	800123a <HAL_GPIO_Init+0x56>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d130      	bne.n	800129c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 0201 	and.w	r2, r3, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d017      	beq.n	80012d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d123      	bne.n	800132c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	08da      	lsrs	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3208      	adds	r2, #8
 80012ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	69b9      	ldr	r1, [r7, #24]
 8001328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0203 	and.w	r2, r3, #3
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80be 	beq.w	80014ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	4b66      	ldr	r3, [pc, #408]	; (8001508 <HAL_GPIO_Init+0x324>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a65      	ldr	r2, [pc, #404]	; (8001508 <HAL_GPIO_Init+0x324>)
 8001374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b63      	ldr	r3, [pc, #396]	; (8001508 <HAL_GPIO_Init+0x324>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001386:	4a61      	ldr	r2, [pc, #388]	; (800150c <HAL_GPIO_Init+0x328>)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	220f      	movs	r2, #15
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a58      	ldr	r2, [pc, #352]	; (8001510 <HAL_GPIO_Init+0x32c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d037      	beq.n	8001422 <HAL_GPIO_Init+0x23e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a57      	ldr	r2, [pc, #348]	; (8001514 <HAL_GPIO_Init+0x330>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d031      	beq.n	800141e <HAL_GPIO_Init+0x23a>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a56      	ldr	r2, [pc, #344]	; (8001518 <HAL_GPIO_Init+0x334>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d02b      	beq.n	800141a <HAL_GPIO_Init+0x236>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a55      	ldr	r2, [pc, #340]	; (800151c <HAL_GPIO_Init+0x338>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d025      	beq.n	8001416 <HAL_GPIO_Init+0x232>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a54      	ldr	r2, [pc, #336]	; (8001520 <HAL_GPIO_Init+0x33c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d01f      	beq.n	8001412 <HAL_GPIO_Init+0x22e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a53      	ldr	r2, [pc, #332]	; (8001524 <HAL_GPIO_Init+0x340>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d019      	beq.n	800140e <HAL_GPIO_Init+0x22a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a52      	ldr	r2, [pc, #328]	; (8001528 <HAL_GPIO_Init+0x344>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d013      	beq.n	800140a <HAL_GPIO_Init+0x226>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a51      	ldr	r2, [pc, #324]	; (800152c <HAL_GPIO_Init+0x348>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d00d      	beq.n	8001406 <HAL_GPIO_Init+0x222>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a50      	ldr	r2, [pc, #320]	; (8001530 <HAL_GPIO_Init+0x34c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d007      	beq.n	8001402 <HAL_GPIO_Init+0x21e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4f      	ldr	r2, [pc, #316]	; (8001534 <HAL_GPIO_Init+0x350>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d101      	bne.n	80013fe <HAL_GPIO_Init+0x21a>
 80013fa:	2309      	movs	r3, #9
 80013fc:	e012      	b.n	8001424 <HAL_GPIO_Init+0x240>
 80013fe:	230a      	movs	r3, #10
 8001400:	e010      	b.n	8001424 <HAL_GPIO_Init+0x240>
 8001402:	2308      	movs	r3, #8
 8001404:	e00e      	b.n	8001424 <HAL_GPIO_Init+0x240>
 8001406:	2307      	movs	r3, #7
 8001408:	e00c      	b.n	8001424 <HAL_GPIO_Init+0x240>
 800140a:	2306      	movs	r3, #6
 800140c:	e00a      	b.n	8001424 <HAL_GPIO_Init+0x240>
 800140e:	2305      	movs	r3, #5
 8001410:	e008      	b.n	8001424 <HAL_GPIO_Init+0x240>
 8001412:	2304      	movs	r3, #4
 8001414:	e006      	b.n	8001424 <HAL_GPIO_Init+0x240>
 8001416:	2303      	movs	r3, #3
 8001418:	e004      	b.n	8001424 <HAL_GPIO_Init+0x240>
 800141a:	2302      	movs	r3, #2
 800141c:	e002      	b.n	8001424 <HAL_GPIO_Init+0x240>
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <HAL_GPIO_Init+0x240>
 8001422:	2300      	movs	r3, #0
 8001424:	69fa      	ldr	r2, [r7, #28]
 8001426:	f002 0203 	and.w	r2, r2, #3
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	4093      	lsls	r3, r2
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001434:	4935      	ldr	r1, [pc, #212]	; (800150c <HAL_GPIO_Init+0x328>)
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	089b      	lsrs	r3, r3, #2
 800143a:	3302      	adds	r3, #2
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001442:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <HAL_GPIO_Init+0x354>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001466:	4a34      	ldr	r2, [pc, #208]	; (8001538 <HAL_GPIO_Init+0x354>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800146c:	4b32      	ldr	r3, [pc, #200]	; (8001538 <HAL_GPIO_Init+0x354>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001490:	4a29      	ldr	r2, [pc, #164]	; (8001538 <HAL_GPIO_Init+0x354>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001496:	4b28      	ldr	r3, [pc, #160]	; (8001538 <HAL_GPIO_Init+0x354>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ba:	4a1f      	ldr	r2, [pc, #124]	; (8001538 <HAL_GPIO_Init+0x354>)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_GPIO_Init+0x354>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014e4:	4a14      	ldr	r2, [pc, #80]	; (8001538 <HAL_GPIO_Init+0x354>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3301      	adds	r3, #1
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	f67f ae86 	bls.w	8001204 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3724      	adds	r7, #36	; 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40013800 	.word	0x40013800
 8001510:	40020000 	.word	0x40020000
 8001514:	40020400 	.word	0x40020400
 8001518:	40020800 	.word	0x40020800
 800151c:	40020c00 	.word	0x40020c00
 8001520:	40021000 	.word	0x40021000
 8001524:	40021400 	.word	0x40021400
 8001528:	40021800 	.word	0x40021800
 800152c:	40021c00 	.word	0x40021c00
 8001530:	40022000 	.word	0x40022000
 8001534:	40022400 	.word	0x40022400
 8001538:	40013c00 	.word	0x40013c00

0800153c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a22      	ldr	r2, [pc, #136]	; (80015d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800155e:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800156a:	f7ff fd49 	bl	8001000 <HAL_GetTick>
 800156e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001570:	e009      	b.n	8001586 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001572:	f7ff fd45 	bl	8001000 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001580:	d901      	bls.n	8001586 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e022      	b.n	80015cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001592:	d1ee      	bne.n	8001572 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001594:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800159a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a0:	f7ff fd2e 	bl	8001000 <HAL_GetTick>
 80015a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015a6:	e009      	b.n	80015bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015a8:	f7ff fd2a 	bl	8001000 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015b6:	d901      	bls.n	80015bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e007      	b.n	80015cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015c8:	d1ee      	bne.n	80015a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40007000 	.word	0x40007000

080015dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e29b      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8087 	beq.w	800170e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001600:	4b96      	ldr	r3, [pc, #600]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b04      	cmp	r3, #4
 800160a:	d00c      	beq.n	8001626 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160c:	4b93      	ldr	r3, [pc, #588]	; (800185c <HAL_RCC_OscConfig+0x280>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b08      	cmp	r3, #8
 8001616:	d112      	bne.n	800163e <HAL_RCC_OscConfig+0x62>
 8001618:	4b90      	ldr	r3, [pc, #576]	; (800185c <HAL_RCC_OscConfig+0x280>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001624:	d10b      	bne.n	800163e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001626:	4b8d      	ldr	r3, [pc, #564]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d06c      	beq.n	800170c <HAL_RCC_OscConfig+0x130>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d168      	bne.n	800170c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e275      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0x7a>
 8001648:	4b84      	ldr	r3, [pc, #528]	; (800185c <HAL_RCC_OscConfig+0x280>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a83      	ldr	r2, [pc, #524]	; (800185c <HAL_RCC_OscConfig+0x280>)
 800164e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	e02e      	b.n	80016b4 <HAL_RCC_OscConfig+0xd8>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x9c>
 800165e:	4b7f      	ldr	r3, [pc, #508]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a7e      	ldr	r2, [pc, #504]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b7c      	ldr	r3, [pc, #496]	; (800185c <HAL_RCC_OscConfig+0x280>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a7b      	ldr	r2, [pc, #492]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e01d      	b.n	80016b4 <HAL_RCC_OscConfig+0xd8>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001680:	d10c      	bne.n	800169c <HAL_RCC_OscConfig+0xc0>
 8001682:	4b76      	ldr	r3, [pc, #472]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a75      	ldr	r2, [pc, #468]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b73      	ldr	r3, [pc, #460]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a72      	ldr	r2, [pc, #456]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e00b      	b.n	80016b4 <HAL_RCC_OscConfig+0xd8>
 800169c:	4b6f      	ldr	r3, [pc, #444]	; (800185c <HAL_RCC_OscConfig+0x280>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a6e      	ldr	r2, [pc, #440]	; (800185c <HAL_RCC_OscConfig+0x280>)
 80016a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b6c      	ldr	r3, [pc, #432]	; (800185c <HAL_RCC_OscConfig+0x280>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a6b      	ldr	r2, [pc, #428]	; (800185c <HAL_RCC_OscConfig+0x280>)
 80016ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d013      	beq.n	80016e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff fca0 	bl	8001000 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff fc9c 	bl	8001000 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	; 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e229      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b61      	ldr	r3, [pc, #388]	; (800185c <HAL_RCC_OscConfig+0x280>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0xe8>
 80016e2:	e014      	b.n	800170e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fc8c 	bl	8001000 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff fc88 	bl	8001000 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	; 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e215      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fe:	4b57      	ldr	r3, [pc, #348]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x110>
 800170a:	e000      	b.n	800170e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d069      	beq.n	80017ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800171a:	4b50      	ldr	r3, [pc, #320]	; (800185c <HAL_RCC_OscConfig+0x280>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00b      	beq.n	800173e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001726:	4b4d      	ldr	r3, [pc, #308]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b08      	cmp	r3, #8
 8001730:	d11c      	bne.n	800176c <HAL_RCC_OscConfig+0x190>
 8001732:	4b4a      	ldr	r3, [pc, #296]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d116      	bne.n	800176c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173e:	4b47      	ldr	r3, [pc, #284]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d005      	beq.n	8001756 <HAL_RCC_OscConfig+0x17a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d001      	beq.n	8001756 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e1e9      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001756:	4b41      	ldr	r3, [pc, #260]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	493d      	ldr	r1, [pc, #244]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176a:	e040      	b.n	80017ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d023      	beq.n	80017bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001774:	4b39      	ldr	r3, [pc, #228]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a38      	ldr	r2, [pc, #224]	; (800185c <HAL_RCC_OscConfig+0x280>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001780:	f7ff fc3e 	bl	8001000 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001788:	f7ff fc3a 	bl	8001000 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e1c7      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179a:	4b30      	ldr	r3, [pc, #192]	; (800185c <HAL_RCC_OscConfig+0x280>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <HAL_RCC_OscConfig+0x280>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4929      	ldr	r1, [pc, #164]	; (800185c <HAL_RCC_OscConfig+0x280>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
 80017ba:	e018      	b.n	80017ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017bc:	4b27      	ldr	r3, [pc, #156]	; (800185c <HAL_RCC_OscConfig+0x280>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a26      	ldr	r2, [pc, #152]	; (800185c <HAL_RCC_OscConfig+0x280>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff fc1a 	bl	8001000 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d0:	f7ff fc16 	bl	8001000 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e1a3      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e2:	4b1e      	ldr	r3, [pc, #120]	; (800185c <HAL_RCC_OscConfig+0x280>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d038      	beq.n	800186c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d019      	beq.n	8001836 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001806:	4a15      	ldr	r2, [pc, #84]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180e:	f7ff fbf7 	bl	8001000 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001816:	f7ff fbf3 	bl	8001000 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e180      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_RCC_OscConfig+0x280>)
 800182a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x23a>
 8001834:	e01a      	b.n	800186c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_RCC_OscConfig+0x280>)
 8001838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <HAL_RCC_OscConfig+0x280>)
 800183c:	f023 0301 	bic.w	r3, r3, #1
 8001840:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001842:	f7ff fbdd 	bl	8001000 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001848:	e00a      	b.n	8001860 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184a:	f7ff fbd9 	bl	8001000 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d903      	bls.n	8001860 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e166      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
 800185c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	4b92      	ldr	r3, [pc, #584]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1ee      	bne.n	800184a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80a4 	beq.w	80019c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187a:	4b8c      	ldr	r3, [pc, #560]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10d      	bne.n	80018a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4b89      	ldr	r3, [pc, #548]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a88      	ldr	r2, [pc, #544]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b86      	ldr	r3, [pc, #536]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189e:	2301      	movs	r3, #1
 80018a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a2:	4b83      	ldr	r3, [pc, #524]	; (8001ab0 <HAL_RCC_OscConfig+0x4d4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d118      	bne.n	80018e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80018ae:	4b80      	ldr	r3, [pc, #512]	; (8001ab0 <HAL_RCC_OscConfig+0x4d4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a7f      	ldr	r2, [pc, #508]	; (8001ab0 <HAL_RCC_OscConfig+0x4d4>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ba:	f7ff fba1 	bl	8001000 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c2:	f7ff fb9d 	bl	8001000 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b64      	cmp	r3, #100	; 0x64
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e12a      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d4:	4b76      	ldr	r3, [pc, #472]	; (8001ab0 <HAL_RCC_OscConfig+0x4d4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x31a>
 80018e8:	4b70      	ldr	r3, [pc, #448]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ec:	4a6f      	ldr	r2, [pc, #444]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6713      	str	r3, [r2, #112]	; 0x70
 80018f4:	e02d      	b.n	8001952 <HAL_RCC_OscConfig+0x376>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x33c>
 80018fe:	4b6b      	ldr	r3, [pc, #428]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001902:	4a6a      	ldr	r2, [pc, #424]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	6713      	str	r3, [r2, #112]	; 0x70
 800190a:	4b68      	ldr	r3, [pc, #416]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 800190c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190e:	4a67      	ldr	r2, [pc, #412]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001910:	f023 0304 	bic.w	r3, r3, #4
 8001914:	6713      	str	r3, [r2, #112]	; 0x70
 8001916:	e01c      	b.n	8001952 <HAL_RCC_OscConfig+0x376>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b05      	cmp	r3, #5
 800191e:	d10c      	bne.n	800193a <HAL_RCC_OscConfig+0x35e>
 8001920:	4b62      	ldr	r3, [pc, #392]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001924:	4a61      	ldr	r2, [pc, #388]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6713      	str	r3, [r2, #112]	; 0x70
 800192c:	4b5f      	ldr	r3, [pc, #380]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001930:	4a5e      	ldr	r2, [pc, #376]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6713      	str	r3, [r2, #112]	; 0x70
 8001938:	e00b      	b.n	8001952 <HAL_RCC_OscConfig+0x376>
 800193a:	4b5c      	ldr	r3, [pc, #368]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193e:	4a5b      	ldr	r2, [pc, #364]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6713      	str	r3, [r2, #112]	; 0x70
 8001946:	4b59      	ldr	r3, [pc, #356]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194a:	4a58      	ldr	r2, [pc, #352]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 800194c:	f023 0304 	bic.w	r3, r3, #4
 8001950:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d015      	beq.n	8001986 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195a:	f7ff fb51 	bl	8001000 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7ff fb4d 	bl	8001000 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e0d8      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	4b4c      	ldr	r3, [pc, #304]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 800197a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0ee      	beq.n	8001962 <HAL_RCC_OscConfig+0x386>
 8001984:	e014      	b.n	80019b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001986:	f7ff fb3b 	bl	8001000 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff fb37 	bl	8001000 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f241 3288 	movw	r2, #5000	; 0x1388
 800199c:	4293      	cmp	r3, r2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e0c2      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a4:	4b41      	ldr	r3, [pc, #260]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1ee      	bne.n	800198e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d105      	bne.n	80019c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b6:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	4a3c      	ldr	r2, [pc, #240]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 80019bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 80ae 	beq.w	8001b28 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019cc:	4b37      	ldr	r3, [pc, #220]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d06d      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d14b      	bne.n	8001a78 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e0:	4b32      	ldr	r3, [pc, #200]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a31      	ldr	r2, [pc, #196]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 80019e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff fb08 	bl	8001000 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff fb04 	bl	8001000 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e091      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a06:	4b29      	ldr	r3, [pc, #164]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69da      	ldr	r2, [r3, #28]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	019b      	lsls	r3, r3, #6
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	085b      	lsrs	r3, r3, #1
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	041b      	lsls	r3, r3, #16
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	071b      	lsls	r3, r3, #28
 8001a3e:	491b      	ldr	r1, [pc, #108]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a18      	ldr	r2, [pc, #96]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff fad6 	bl	8001000 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff fad2 	bl	8001000 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e05f      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x47c>
 8001a76:	e057      	b.n	8001b28 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff fabc 	bl	8001000 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8c:	f7ff fab8 	bl	8001000 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e045      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9e:	4b03      	ldr	r3, [pc, #12]	; (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4b0>
 8001aaa:	e03d      	b.n	8001b28 <HAL_RCC_OscConfig+0x54c>
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <HAL_RCC_OscConfig+0x558>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d030      	beq.n	8001b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d129      	bne.n	8001b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d122      	bne.n	8001b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d119      	bne.n	8001b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	085b      	lsrs	r3, r3, #1
 8001afc:	3b01      	subs	r3, #1
 8001afe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d10f      	bne.n	8001b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d107      	bne.n	8001b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800

08001b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0d0      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b50:	4b6a      	ldr	r3, [pc, #424]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d910      	bls.n	8001b80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b67      	ldr	r3, [pc, #412]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 020f 	bic.w	r2, r3, #15
 8001b66:	4965      	ldr	r1, [pc, #404]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b63      	ldr	r3, [pc, #396]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0b8      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d020      	beq.n	8001bce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b98:	4b59      	ldr	r3, [pc, #356]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	4a58      	ldr	r2, [pc, #352]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ba2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bb0:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4a52      	ldr	r2, [pc, #328]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bbc:	4b50      	ldr	r3, [pc, #320]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	494d      	ldr	r1, [pc, #308]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d040      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d115      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e07f      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfa:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e073      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e06b      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c1a:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f023 0203 	bic.w	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4936      	ldr	r1, [pc, #216]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c2c:	f7ff f9e8 	bl	8001000 <HAL_GetTick>
 8001c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	e00a      	b.n	8001c4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c34:	f7ff f9e4 	bl	8001000 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e053      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 020c 	and.w	r2, r3, #12
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d1eb      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d210      	bcs.n	8001c8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 020f 	bic.w	r2, r3, #15
 8001c72:	4922      	ldr	r1, [pc, #136]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e032      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	4916      	ldr	r1, [pc, #88]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d009      	beq.n	8001cca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	490e      	ldr	r1, [pc, #56]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cca:	f000 f821 	bl	8001d10 <HAL_RCC_GetSysClockFreq>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	490a      	ldr	r1, [pc, #40]	; (8001d04 <HAL_RCC_ClockConfig+0x1cc>)
 8001cdc:	5ccb      	ldrb	r3, [r1, r3]
 8001cde:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce2:	4a09      	ldr	r2, [pc, #36]	; (8001d08 <HAL_RCC_ClockConfig+0x1d0>)
 8001ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_RCC_ClockConfig+0x1d4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff f944 	bl	8000f78 <HAL_InitTick>

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023c00 	.word	0x40023c00
 8001d00:	40023800 	.word	0x40023800
 8001d04:	08003d18 	.word	0x08003d18
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	2000000c 	.word	0x2000000c

08001d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d14:	b094      	sub	sp, #80	; 0x50
 8001d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d20:	2300      	movs	r3, #0
 8001d22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d28:	4b79      	ldr	r3, [pc, #484]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d00d      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0x40>
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	f200 80e1 	bhi.w	8001efc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0x34>
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d003      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d42:	e0db      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d44:	4b73      	ldr	r3, [pc, #460]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d48:	e0db      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d4a:	4b73      	ldr	r3, [pc, #460]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d4e:	e0d8      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d50:	4b6f      	ldr	r3, [pc, #444]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d58:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d5a:	4b6d      	ldr	r3, [pc, #436]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d063      	beq.n	8001e2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d66:	4b6a      	ldr	r3, [pc, #424]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	099b      	lsrs	r3, r3, #6
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d78:	633b      	str	r3, [r7, #48]	; 0x30
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d82:	4622      	mov	r2, r4
 8001d84:	462b      	mov	r3, r5
 8001d86:	f04f 0000 	mov.w	r0, #0
 8001d8a:	f04f 0100 	mov.w	r1, #0
 8001d8e:	0159      	lsls	r1, r3, #5
 8001d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d94:	0150      	lsls	r0, r2, #5
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	1a51      	subs	r1, r2, r1
 8001d9e:	6139      	str	r1, [r7, #16]
 8001da0:	4629      	mov	r1, r5
 8001da2:	eb63 0301 	sbc.w	r3, r3, r1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001db4:	4659      	mov	r1, fp
 8001db6:	018b      	lsls	r3, r1, #6
 8001db8:	4651      	mov	r1, sl
 8001dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dbe:	4651      	mov	r1, sl
 8001dc0:	018a      	lsls	r2, r1, #6
 8001dc2:	4651      	mov	r1, sl
 8001dc4:	ebb2 0801 	subs.w	r8, r2, r1
 8001dc8:	4659      	mov	r1, fp
 8001dca:	eb63 0901 	sbc.w	r9, r3, r1
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001de2:	4690      	mov	r8, r2
 8001de4:	4699      	mov	r9, r3
 8001de6:	4623      	mov	r3, r4
 8001de8:	eb18 0303 	adds.w	r3, r8, r3
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	462b      	mov	r3, r5
 8001df0:	eb49 0303 	adc.w	r3, r9, r3
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e02:	4629      	mov	r1, r5
 8001e04:	024b      	lsls	r3, r1, #9
 8001e06:	4621      	mov	r1, r4
 8001e08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	024a      	lsls	r2, r1, #9
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e16:	2200      	movs	r2, #0
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e20:	f7fe fa66 	bl	80002f0 <__aeabi_uldivmod>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4613      	mov	r3, r2
 8001e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e2c:	e058      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2e:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	099b      	lsrs	r3, r3, #6
 8001e34:	2200      	movs	r2, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	4611      	mov	r1, r2
 8001e3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e3e:	623b      	str	r3, [r7, #32]
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
 8001e44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e48:	4642      	mov	r2, r8
 8001e4a:	464b      	mov	r3, r9
 8001e4c:	f04f 0000 	mov.w	r0, #0
 8001e50:	f04f 0100 	mov.w	r1, #0
 8001e54:	0159      	lsls	r1, r3, #5
 8001e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e5a:	0150      	lsls	r0, r2, #5
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4641      	mov	r1, r8
 8001e62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e66:	4649      	mov	r1, r9
 8001e68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e80:	ebb2 040a 	subs.w	r4, r2, sl
 8001e84:	eb63 050b 	sbc.w	r5, r3, fp
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	00eb      	lsls	r3, r5, #3
 8001e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e96:	00e2      	lsls	r2, r4, #3
 8001e98:	4614      	mov	r4, r2
 8001e9a:	461d      	mov	r5, r3
 8001e9c:	4643      	mov	r3, r8
 8001e9e:	18e3      	adds	r3, r4, r3
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	464b      	mov	r3, r9
 8001ea4:	eb45 0303 	adc.w	r3, r5, r3
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	028b      	lsls	r3, r1, #10
 8001eba:	4621      	mov	r1, r4
 8001ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	028a      	lsls	r2, r1, #10
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	61fa      	str	r2, [r7, #28]
 8001ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ed4:	f7fe fa0c 	bl	80002f0 <__aeabi_uldivmod>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4613      	mov	r3, r2
 8001ede:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	3301      	adds	r3, #1
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001ef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001efa:	e002      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001efe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3750      	adds	r7, #80	; 0x50
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	00f42400 	.word	0x00f42400
 8001f18:	007a1200 	.word	0x007a1200

08001f1c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000008 	.word	0x20000008

08001f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f38:	f7ff fff0 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	0a9b      	lsrs	r3, r3, #10
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	4903      	ldr	r1, [pc, #12]	; (8001f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f4a:	5ccb      	ldrb	r3, [r1, r3]
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40023800 	.word	0x40023800
 8001f58:	08003d28 	.word	0x08003d28

08001f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f60:	f7ff ffdc 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	0b5b      	lsrs	r3, r3, #13
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	4903      	ldr	r1, [pc, #12]	; (8001f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f72:	5ccb      	ldrb	r3, [r1, r3]
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	08003d28 	.word	0x08003d28

08001f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d012      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fac:	4b69      	ldr	r3, [pc, #420]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	4a68      	ldr	r2, [pc, #416]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fb6:	6093      	str	r3, [r2, #8]
 8001fb8:	4b66      	ldr	r3, [pc, #408]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc0:	4964      	ldr	r1, [pc, #400]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d017      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fde:	4b5d      	ldr	r3, [pc, #372]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fe4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fec:	4959      	ldr	r1, [pc, #356]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ffc:	d101      	bne.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001ffe:	2301      	movs	r3, #1
 8002000:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800200a:	2301      	movs	r3, #1
 800200c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d017      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800201a:	4b4e      	ldr	r3, [pc, #312]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002020:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	494a      	ldr	r1, [pc, #296]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002038:	d101      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800203a:	2301      	movs	r3, #1
 800203c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002046:	2301      	movs	r3, #1
 8002048:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002056:	2301      	movs	r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 808b 	beq.w	800217e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002068:	4b3a      	ldr	r3, [pc, #232]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	4a39      	ldr	r2, [pc, #228]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800206e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002072:	6413      	str	r3, [r2, #64]	; 0x40
 8002074:	4b37      	ldr	r3, [pc, #220]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002080:	4b35      	ldr	r3, [pc, #212]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a34      	ldr	r2, [pc, #208]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800208c:	f7fe ffb8 	bl	8001000 <HAL_GetTick>
 8002090:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002094:	f7fe ffb4 	bl	8001000 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e38f      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020a6:	4b2c      	ldr	r3, [pc, #176]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020b2:	4b28      	ldr	r3, [pc, #160]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d035      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d02e      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020d0:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020da:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	4a1d      	ldr	r2, [pc, #116]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020e6:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ea:	4a1a      	ldr	r2, [pc, #104]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80020f2:	4a18      	ldr	r2, [pc, #96]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d114      	bne.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7fe ff7c 	bl	8001000 <HAL_GetTick>
 8002108:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210a:	e00a      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210c:	f7fe ff78 	bl	8001000 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e351      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0ee      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002136:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800213a:	d111      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800214a:	400b      	ands	r3, r1
 800214c:	4901      	ldr	r1, [pc, #4]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800214e:	4313      	orrs	r3, r2
 8002150:	608b      	str	r3, [r1, #8]
 8002152:	e00b      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002154:	40023800 	.word	0x40023800
 8002158:	40007000 	.word	0x40007000
 800215c:	0ffffcff 	.word	0x0ffffcff
 8002160:	4bac      	ldr	r3, [pc, #688]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4aab      	ldr	r2, [pc, #684]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002166:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800216a:	6093      	str	r3, [r2, #8]
 800216c:	4ba9      	ldr	r3, [pc, #676]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002178:	49a6      	ldr	r1, [pc, #664]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217a:	4313      	orrs	r3, r2
 800217c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b00      	cmp	r3, #0
 8002188:	d010      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800218a:	4ba2      	ldr	r3, [pc, #648]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002190:	4aa0      	ldr	r2, [pc, #640]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002196:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800219a:	4b9e      	ldr	r3, [pc, #632]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800219c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a4:	499b      	ldr	r1, [pc, #620]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021b8:	4b96      	ldr	r3, [pc, #600]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021c6:	4993      	ldr	r1, [pc, #588]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00a      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021da:	4b8e      	ldr	r3, [pc, #568]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021e8:	498a      	ldr	r1, [pc, #552]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00a      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021fc:	4b85      	ldr	r3, [pc, #532]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800220a:	4982      	ldr	r1, [pc, #520]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800221e:	4b7d      	ldr	r3, [pc, #500]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002224:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	4979      	ldr	r1, [pc, #484]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002240:	4b74      	ldr	r3, [pc, #464]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002246:	f023 0203 	bic.w	r2, r3, #3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	4971      	ldr	r1, [pc, #452]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002262:	4b6c      	ldr	r3, [pc, #432]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002268:	f023 020c 	bic.w	r2, r3, #12
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002270:	4968      	ldr	r1, [pc, #416]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002284:	4b63      	ldr	r3, [pc, #396]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	4960      	ldr	r1, [pc, #384]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022a6:	4b5b      	ldr	r3, [pc, #364]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b4:	4957      	ldr	r1, [pc, #348]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022c8:	4b52      	ldr	r3, [pc, #328]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d6:	494f      	ldr	r1, [pc, #316]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80022ea:	4b4a      	ldr	r3, [pc, #296]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f8:	4946      	ldr	r1, [pc, #280]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800230c:	4b41      	ldr	r3, [pc, #260]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002312:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231a:	493e      	ldr	r1, [pc, #248]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800232e:	4b39      	ldr	r3, [pc, #228]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002334:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233c:	4935      	ldr	r1, [pc, #212]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00a      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002350:	4b30      	ldr	r3, [pc, #192]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002356:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800235e:	492d      	ldr	r1, [pc, #180]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d011      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002372:	4b28      	ldr	r3, [pc, #160]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002378:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002380:	4924      	ldr	r1, [pc, #144]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800238c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002390:	d101      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002392:	2301      	movs	r3, #1
 8002394:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80023a2:	2301      	movs	r3, #1
 80023a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00a      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023b2:	4b18      	ldr	r3, [pc, #96]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c0:	4914      	ldr	r1, [pc, #80]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00b      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023e4:	490b      	ldr	r1, [pc, #44]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00f      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002408:	4902      	ldr	r1, [pc, #8]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002410:	e002      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00b      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002424:	4b8a      	ldr	r3, [pc, #552]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800242a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002434:	4986      	ldr	r1, [pc, #536]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00b      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002448:	4b81      	ldr	r3, [pc, #516]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800244a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800244e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002458:	497d      	ldr	r1, [pc, #500]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d006      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80d6 	beq.w	8002620 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002474:	4b76      	ldr	r3, [pc, #472]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a75      	ldr	r2, [pc, #468]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800247a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800247e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002480:	f7fe fdbe 	bl	8001000 <HAL_GetTick>
 8002484:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002488:	f7fe fdba 	bl	8001000 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	; 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e195      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800249a:	4b6d      	ldr	r3, [pc, #436]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d021      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d11d      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024ba:	4b65      	ldr	r3, [pc, #404]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c0:	0c1b      	lsrs	r3, r3, #16
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024c8:	4b61      	ldr	r3, [pc, #388]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ce:	0e1b      	lsrs	r3, r3, #24
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	019a      	lsls	r2, r3, #6
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	041b      	lsls	r3, r3, #16
 80024e0:	431a      	orrs	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	061b      	lsls	r3, r3, #24
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	071b      	lsls	r3, r3, #28
 80024ee:	4958      	ldr	r1, [pc, #352]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d004      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800250a:	d00a      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002514:	2b00      	cmp	r3, #0
 8002516:	d02e      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002520:	d129      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002522:	4b4b      	ldr	r3, [pc, #300]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002528:	0c1b      	lsrs	r3, r3, #16
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002530:	4b47      	ldr	r3, [pc, #284]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002536:	0f1b      	lsrs	r3, r3, #28
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	019a      	lsls	r2, r3, #6
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	041b      	lsls	r3, r3, #16
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	061b      	lsls	r3, r3, #24
 8002550:	431a      	orrs	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	071b      	lsls	r3, r3, #28
 8002556:	493e      	ldr	r1, [pc, #248]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800255e:	4b3c      	ldr	r3, [pc, #240]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002564:	f023 021f 	bic.w	r2, r3, #31
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	3b01      	subs	r3, #1
 800256e:	4938      	ldr	r1, [pc, #224]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d01d      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002582:	4b33      	ldr	r3, [pc, #204]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002588:	0e1b      	lsrs	r3, r3, #24
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002590:	4b2f      	ldr	r3, [pc, #188]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002596:	0f1b      	lsrs	r3, r3, #28
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	019a      	lsls	r2, r3, #6
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	041b      	lsls	r3, r3, #16
 80025aa:	431a      	orrs	r2, r3
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	061b      	lsls	r3, r3, #24
 80025b0:	431a      	orrs	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	071b      	lsls	r3, r3, #28
 80025b6:	4926      	ldr	r1, [pc, #152]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d011      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	019a      	lsls	r2, r3, #6
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	041b      	lsls	r3, r3, #16
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	061b      	lsls	r3, r3, #24
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	071b      	lsls	r3, r3, #28
 80025e6:	491a      	ldr	r1, [pc, #104]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025ee:	4b18      	ldr	r3, [pc, #96]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a17      	ldr	r2, [pc, #92]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025fa:	f7fe fd01 	bl	8001000 <HAL_GetTick>
 80025fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002602:	f7fe fcfd 	bl	8001000 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b64      	cmp	r3, #100	; 0x64
 800260e:	d901      	bls.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e0d8      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	2b01      	cmp	r3, #1
 8002624:	f040 80ce 	bne.w	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a08      	ldr	r2, [pc, #32]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800262e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002634:	f7fe fce4 	bl	8001000 <HAL_GetTick>
 8002638:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800263a:	e00b      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800263c:	f7fe fce0 	bl	8001000 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	; 0x64
 8002648:	d904      	bls.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e0bb      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002654:	4b5e      	ldr	r3, [pc, #376]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800265c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002660:	d0ec      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800267e:	2b00      	cmp	r3, #0
 8002680:	d02e      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d12a      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800268a:	4b51      	ldr	r3, [pc, #324]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002698:	4b4d      	ldr	r3, [pc, #308]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269e:	0f1b      	lsrs	r3, r3, #28
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	019a      	lsls	r2, r3, #6
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	041b      	lsls	r3, r3, #16
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	061b      	lsls	r3, r3, #24
 80026b8:	431a      	orrs	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	071b      	lsls	r3, r3, #28
 80026be:	4944      	ldr	r1, [pc, #272]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026c6:	4b42      	ldr	r3, [pc, #264]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	3b01      	subs	r3, #1
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	493d      	ldr	r1, [pc, #244]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d022      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026f4:	d11d      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026f6:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fc:	0e1b      	lsrs	r3, r3, #24
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002704:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	0f1b      	lsrs	r3, r3, #28
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	019a      	lsls	r2, r3, #6
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	041b      	lsls	r3, r3, #16
 800271e:	431a      	orrs	r2, r3
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	061b      	lsls	r3, r3, #24
 8002724:	431a      	orrs	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	071b      	lsls	r3, r3, #28
 800272a:	4929      	ldr	r1, [pc, #164]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d028      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800273e:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	0e1b      	lsrs	r3, r3, #24
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800274c:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	0c1b      	lsrs	r3, r3, #16
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	019a      	lsls	r2, r3, #6
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	041b      	lsls	r3, r3, #16
 8002764:	431a      	orrs	r2, r3
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	061b      	lsls	r3, r3, #24
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	071b      	lsls	r3, r3, #28
 8002772:	4917      	ldr	r1, [pc, #92]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800277c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002780:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	4911      	ldr	r1, [pc, #68]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002790:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800279c:	f7fe fc30 	bl	8001000 <HAL_GetTick>
 80027a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027a4:	f7fe fc2c 	bl	8001000 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	; 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e007      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027c2:	d1ef      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3720      	adds	r7, #32
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800

080027d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e040      	b.n	8002868 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe faa0 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2224      	movs	r2, #36	; 0x24
 8002800:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0201 	bic.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f974 	bl	8002b00 <UART_SetConfig>
 8002818:	4603      	mov	r3, r0
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e022      	b.n	8002868 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fbcc 	bl	8002fc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800283e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800284e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fc53 	bl	800310c <UART_CheckIdleState>
 8002866:	4603      	mov	r3, r0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af02      	add	r7, sp, #8
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	4613      	mov	r3, r2
 800287e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002884:	2b20      	cmp	r3, #32
 8002886:	d171      	bne.n	800296c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <HAL_UART_Transmit+0x24>
 800288e:	88fb      	ldrh	r3, [r7, #6]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e06a      	b.n	800296e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2221      	movs	r2, #33	; 0x21
 80028a4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028a6:	f7fe fbab 	bl	8001000 <HAL_GetTick>
 80028aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	88fa      	ldrh	r2, [r7, #6]
 80028b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	88fa      	ldrh	r2, [r7, #6]
 80028b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c4:	d108      	bne.n	80028d8 <HAL_UART_Transmit+0x68>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d104      	bne.n	80028d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	e003      	b.n	80028e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028e0:	e02c      	b.n	800293c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2200      	movs	r2, #0
 80028ea:	2180      	movs	r1, #128	; 0x80
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fc5a 	bl	80031a6 <UART_WaitOnFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e038      	b.n	800296e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10b      	bne.n	800291a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002910:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	3302      	adds	r3, #2
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	e007      	b.n	800292a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	781a      	ldrb	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	3301      	adds	r3, #1
 8002928:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1cc      	bne.n	80028e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2200      	movs	r2, #0
 8002950:	2140      	movs	r1, #64	; 0x40
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fc27 	bl	80031a6 <UART_WaitOnFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e005      	b.n	800296e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	e000      	b.n	800296e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800296c:	2302      	movs	r3, #2
  }
}
 800296e:	4618      	mov	r0, r3
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b08a      	sub	sp, #40	; 0x28
 800297a:	af02      	add	r7, sp, #8
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	603b      	str	r3, [r7, #0]
 8002982:	4613      	mov	r3, r2
 8002984:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800298c:	2b20      	cmp	r3, #32
 800298e:	f040 80b1 	bne.w	8002af4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_UART_Receive+0x28>
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e0a9      	b.n	8002af6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2222      	movs	r2, #34	; 0x22
 80029ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029b8:	f7fe fb22 	bl	8001000 <HAL_GetTick>
 80029bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	88fa      	ldrh	r2, [r7, #6]
 80029c2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	88fa      	ldrh	r2, [r7, #6]
 80029ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d6:	d10e      	bne.n	80029f6 <HAL_UART_Receive+0x80>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d105      	bne.n	80029ec <HAL_UART_Receive+0x76>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80029e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029ea:	e02d      	b.n	8002a48 <HAL_UART_Receive+0xd2>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	22ff      	movs	r2, #255	; 0xff
 80029f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029f4:	e028      	b.n	8002a48 <HAL_UART_Receive+0xd2>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10d      	bne.n	8002a1a <HAL_UART_Receive+0xa4>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d104      	bne.n	8002a10 <HAL_UART_Receive+0x9a>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	22ff      	movs	r2, #255	; 0xff
 8002a0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a0e:	e01b      	b.n	8002a48 <HAL_UART_Receive+0xd2>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	227f      	movs	r2, #127	; 0x7f
 8002a14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a18:	e016      	b.n	8002a48 <HAL_UART_Receive+0xd2>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a22:	d10d      	bne.n	8002a40 <HAL_UART_Receive+0xca>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d104      	bne.n	8002a36 <HAL_UART_Receive+0xc0>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	227f      	movs	r2, #127	; 0x7f
 8002a30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a34:	e008      	b.n	8002a48 <HAL_UART_Receive+0xd2>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	223f      	movs	r2, #63	; 0x3f
 8002a3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a3e:	e003      	b.n	8002a48 <HAL_UART_Receive+0xd2>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002a4e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a58:	d108      	bne.n	8002a6c <HAL_UART_Receive+0xf6>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d104      	bne.n	8002a6c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	e003      	b.n	8002a74 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002a74:	e032      	b.n	8002adc <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2120      	movs	r1, #32
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fb90 	bl	80031a6 <UART_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e032      	b.n	8002af6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10c      	bne.n	8002ab0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	8a7b      	ldrh	r3, [r7, #18]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	3302      	adds	r3, #2
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	e00c      	b.n	8002aca <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	8a7b      	ldrh	r3, [r7, #18]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	4013      	ands	r3, r2
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1c6      	bne.n	8002a76 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	e000      	b.n	8002af6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002af4:	2302      	movs	r3, #2
  }
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3720      	adds	r7, #32
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	4ba6      	ldr	r3, [pc, #664]	; (8002dc4 <UART_SetConfig+0x2c4>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	6979      	ldr	r1, [r7, #20]
 8002b34:	430b      	orrs	r3, r1
 8002b36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a94      	ldr	r2, [pc, #592]	; (8002dc8 <UART_SetConfig+0x2c8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d120      	bne.n	8002bbe <UART_SetConfig+0xbe>
 8002b7c:	4b93      	ldr	r3, [pc, #588]	; (8002dcc <UART_SetConfig+0x2cc>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d816      	bhi.n	8002bb8 <UART_SetConfig+0xb8>
 8002b8a:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <UART_SetConfig+0x90>)
 8002b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b90:	08002ba1 	.word	0x08002ba1
 8002b94:	08002bad 	.word	0x08002bad
 8002b98:	08002ba7 	.word	0x08002ba7
 8002b9c:	08002bb3 	.word	0x08002bb3
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	77fb      	strb	r3, [r7, #31]
 8002ba4:	e150      	b.n	8002e48 <UART_SetConfig+0x348>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	77fb      	strb	r3, [r7, #31]
 8002baa:	e14d      	b.n	8002e48 <UART_SetConfig+0x348>
 8002bac:	2304      	movs	r3, #4
 8002bae:	77fb      	strb	r3, [r7, #31]
 8002bb0:	e14a      	b.n	8002e48 <UART_SetConfig+0x348>
 8002bb2:	2308      	movs	r3, #8
 8002bb4:	77fb      	strb	r3, [r7, #31]
 8002bb6:	e147      	b.n	8002e48 <UART_SetConfig+0x348>
 8002bb8:	2310      	movs	r3, #16
 8002bba:	77fb      	strb	r3, [r7, #31]
 8002bbc:	e144      	b.n	8002e48 <UART_SetConfig+0x348>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a83      	ldr	r2, [pc, #524]	; (8002dd0 <UART_SetConfig+0x2d0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d132      	bne.n	8002c2e <UART_SetConfig+0x12e>
 8002bc8:	4b80      	ldr	r3, [pc, #512]	; (8002dcc <UART_SetConfig+0x2cc>)
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b0c      	cmp	r3, #12
 8002bd4:	d828      	bhi.n	8002c28 <UART_SetConfig+0x128>
 8002bd6:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <UART_SetConfig+0xdc>)
 8002bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bdc:	08002c11 	.word	0x08002c11
 8002be0:	08002c29 	.word	0x08002c29
 8002be4:	08002c29 	.word	0x08002c29
 8002be8:	08002c29 	.word	0x08002c29
 8002bec:	08002c1d 	.word	0x08002c1d
 8002bf0:	08002c29 	.word	0x08002c29
 8002bf4:	08002c29 	.word	0x08002c29
 8002bf8:	08002c29 	.word	0x08002c29
 8002bfc:	08002c17 	.word	0x08002c17
 8002c00:	08002c29 	.word	0x08002c29
 8002c04:	08002c29 	.word	0x08002c29
 8002c08:	08002c29 	.word	0x08002c29
 8002c0c:	08002c23 	.word	0x08002c23
 8002c10:	2300      	movs	r3, #0
 8002c12:	77fb      	strb	r3, [r7, #31]
 8002c14:	e118      	b.n	8002e48 <UART_SetConfig+0x348>
 8002c16:	2302      	movs	r3, #2
 8002c18:	77fb      	strb	r3, [r7, #31]
 8002c1a:	e115      	b.n	8002e48 <UART_SetConfig+0x348>
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	77fb      	strb	r3, [r7, #31]
 8002c20:	e112      	b.n	8002e48 <UART_SetConfig+0x348>
 8002c22:	2308      	movs	r3, #8
 8002c24:	77fb      	strb	r3, [r7, #31]
 8002c26:	e10f      	b.n	8002e48 <UART_SetConfig+0x348>
 8002c28:	2310      	movs	r3, #16
 8002c2a:	77fb      	strb	r3, [r7, #31]
 8002c2c:	e10c      	b.n	8002e48 <UART_SetConfig+0x348>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a68      	ldr	r2, [pc, #416]	; (8002dd4 <UART_SetConfig+0x2d4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d120      	bne.n	8002c7a <UART_SetConfig+0x17a>
 8002c38:	4b64      	ldr	r3, [pc, #400]	; (8002dcc <UART_SetConfig+0x2cc>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c42:	2b30      	cmp	r3, #48	; 0x30
 8002c44:	d013      	beq.n	8002c6e <UART_SetConfig+0x16e>
 8002c46:	2b30      	cmp	r3, #48	; 0x30
 8002c48:	d814      	bhi.n	8002c74 <UART_SetConfig+0x174>
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d009      	beq.n	8002c62 <UART_SetConfig+0x162>
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d810      	bhi.n	8002c74 <UART_SetConfig+0x174>
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <UART_SetConfig+0x15c>
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d006      	beq.n	8002c68 <UART_SetConfig+0x168>
 8002c5a:	e00b      	b.n	8002c74 <UART_SetConfig+0x174>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	77fb      	strb	r3, [r7, #31]
 8002c60:	e0f2      	b.n	8002e48 <UART_SetConfig+0x348>
 8002c62:	2302      	movs	r3, #2
 8002c64:	77fb      	strb	r3, [r7, #31]
 8002c66:	e0ef      	b.n	8002e48 <UART_SetConfig+0x348>
 8002c68:	2304      	movs	r3, #4
 8002c6a:	77fb      	strb	r3, [r7, #31]
 8002c6c:	e0ec      	b.n	8002e48 <UART_SetConfig+0x348>
 8002c6e:	2308      	movs	r3, #8
 8002c70:	77fb      	strb	r3, [r7, #31]
 8002c72:	e0e9      	b.n	8002e48 <UART_SetConfig+0x348>
 8002c74:	2310      	movs	r3, #16
 8002c76:	77fb      	strb	r3, [r7, #31]
 8002c78:	e0e6      	b.n	8002e48 <UART_SetConfig+0x348>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a56      	ldr	r2, [pc, #344]	; (8002dd8 <UART_SetConfig+0x2d8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d120      	bne.n	8002cc6 <UART_SetConfig+0x1c6>
 8002c84:	4b51      	ldr	r3, [pc, #324]	; (8002dcc <UART_SetConfig+0x2cc>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c8e:	2bc0      	cmp	r3, #192	; 0xc0
 8002c90:	d013      	beq.n	8002cba <UART_SetConfig+0x1ba>
 8002c92:	2bc0      	cmp	r3, #192	; 0xc0
 8002c94:	d814      	bhi.n	8002cc0 <UART_SetConfig+0x1c0>
 8002c96:	2b80      	cmp	r3, #128	; 0x80
 8002c98:	d009      	beq.n	8002cae <UART_SetConfig+0x1ae>
 8002c9a:	2b80      	cmp	r3, #128	; 0x80
 8002c9c:	d810      	bhi.n	8002cc0 <UART_SetConfig+0x1c0>
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <UART_SetConfig+0x1a8>
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d006      	beq.n	8002cb4 <UART_SetConfig+0x1b4>
 8002ca6:	e00b      	b.n	8002cc0 <UART_SetConfig+0x1c0>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	77fb      	strb	r3, [r7, #31]
 8002cac:	e0cc      	b.n	8002e48 <UART_SetConfig+0x348>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	77fb      	strb	r3, [r7, #31]
 8002cb2:	e0c9      	b.n	8002e48 <UART_SetConfig+0x348>
 8002cb4:	2304      	movs	r3, #4
 8002cb6:	77fb      	strb	r3, [r7, #31]
 8002cb8:	e0c6      	b.n	8002e48 <UART_SetConfig+0x348>
 8002cba:	2308      	movs	r3, #8
 8002cbc:	77fb      	strb	r3, [r7, #31]
 8002cbe:	e0c3      	b.n	8002e48 <UART_SetConfig+0x348>
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	77fb      	strb	r3, [r7, #31]
 8002cc4:	e0c0      	b.n	8002e48 <UART_SetConfig+0x348>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a44      	ldr	r2, [pc, #272]	; (8002ddc <UART_SetConfig+0x2dc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d125      	bne.n	8002d1c <UART_SetConfig+0x21c>
 8002cd0:	4b3e      	ldr	r3, [pc, #248]	; (8002dcc <UART_SetConfig+0x2cc>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cde:	d017      	beq.n	8002d10 <UART_SetConfig+0x210>
 8002ce0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ce4:	d817      	bhi.n	8002d16 <UART_SetConfig+0x216>
 8002ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cea:	d00b      	beq.n	8002d04 <UART_SetConfig+0x204>
 8002cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cf0:	d811      	bhi.n	8002d16 <UART_SetConfig+0x216>
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <UART_SetConfig+0x1fe>
 8002cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cfa:	d006      	beq.n	8002d0a <UART_SetConfig+0x20a>
 8002cfc:	e00b      	b.n	8002d16 <UART_SetConfig+0x216>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	77fb      	strb	r3, [r7, #31]
 8002d02:	e0a1      	b.n	8002e48 <UART_SetConfig+0x348>
 8002d04:	2302      	movs	r3, #2
 8002d06:	77fb      	strb	r3, [r7, #31]
 8002d08:	e09e      	b.n	8002e48 <UART_SetConfig+0x348>
 8002d0a:	2304      	movs	r3, #4
 8002d0c:	77fb      	strb	r3, [r7, #31]
 8002d0e:	e09b      	b.n	8002e48 <UART_SetConfig+0x348>
 8002d10:	2308      	movs	r3, #8
 8002d12:	77fb      	strb	r3, [r7, #31]
 8002d14:	e098      	b.n	8002e48 <UART_SetConfig+0x348>
 8002d16:	2310      	movs	r3, #16
 8002d18:	77fb      	strb	r3, [r7, #31]
 8002d1a:	e095      	b.n	8002e48 <UART_SetConfig+0x348>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a2f      	ldr	r2, [pc, #188]	; (8002de0 <UART_SetConfig+0x2e0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d125      	bne.n	8002d72 <UART_SetConfig+0x272>
 8002d26:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <UART_SetConfig+0x2cc>)
 8002d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d34:	d017      	beq.n	8002d66 <UART_SetConfig+0x266>
 8002d36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d3a:	d817      	bhi.n	8002d6c <UART_SetConfig+0x26c>
 8002d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d40:	d00b      	beq.n	8002d5a <UART_SetConfig+0x25a>
 8002d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d46:	d811      	bhi.n	8002d6c <UART_SetConfig+0x26c>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <UART_SetConfig+0x254>
 8002d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d50:	d006      	beq.n	8002d60 <UART_SetConfig+0x260>
 8002d52:	e00b      	b.n	8002d6c <UART_SetConfig+0x26c>
 8002d54:	2301      	movs	r3, #1
 8002d56:	77fb      	strb	r3, [r7, #31]
 8002d58:	e076      	b.n	8002e48 <UART_SetConfig+0x348>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	77fb      	strb	r3, [r7, #31]
 8002d5e:	e073      	b.n	8002e48 <UART_SetConfig+0x348>
 8002d60:	2304      	movs	r3, #4
 8002d62:	77fb      	strb	r3, [r7, #31]
 8002d64:	e070      	b.n	8002e48 <UART_SetConfig+0x348>
 8002d66:	2308      	movs	r3, #8
 8002d68:	77fb      	strb	r3, [r7, #31]
 8002d6a:	e06d      	b.n	8002e48 <UART_SetConfig+0x348>
 8002d6c:	2310      	movs	r3, #16
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	e06a      	b.n	8002e48 <UART_SetConfig+0x348>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1b      	ldr	r2, [pc, #108]	; (8002de4 <UART_SetConfig+0x2e4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d138      	bne.n	8002dee <UART_SetConfig+0x2ee>
 8002d7c:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <UART_SetConfig+0x2cc>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002d86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d8a:	d017      	beq.n	8002dbc <UART_SetConfig+0x2bc>
 8002d8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d90:	d82a      	bhi.n	8002de8 <UART_SetConfig+0x2e8>
 8002d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d96:	d00b      	beq.n	8002db0 <UART_SetConfig+0x2b0>
 8002d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d9c:	d824      	bhi.n	8002de8 <UART_SetConfig+0x2e8>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <UART_SetConfig+0x2aa>
 8002da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da6:	d006      	beq.n	8002db6 <UART_SetConfig+0x2b6>
 8002da8:	e01e      	b.n	8002de8 <UART_SetConfig+0x2e8>
 8002daa:	2300      	movs	r3, #0
 8002dac:	77fb      	strb	r3, [r7, #31]
 8002dae:	e04b      	b.n	8002e48 <UART_SetConfig+0x348>
 8002db0:	2302      	movs	r3, #2
 8002db2:	77fb      	strb	r3, [r7, #31]
 8002db4:	e048      	b.n	8002e48 <UART_SetConfig+0x348>
 8002db6:	2304      	movs	r3, #4
 8002db8:	77fb      	strb	r3, [r7, #31]
 8002dba:	e045      	b.n	8002e48 <UART_SetConfig+0x348>
 8002dbc:	2308      	movs	r3, #8
 8002dbe:	77fb      	strb	r3, [r7, #31]
 8002dc0:	e042      	b.n	8002e48 <UART_SetConfig+0x348>
 8002dc2:	bf00      	nop
 8002dc4:	efff69f3 	.word	0xefff69f3
 8002dc8:	40011000 	.word	0x40011000
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40004400 	.word	0x40004400
 8002dd4:	40004800 	.word	0x40004800
 8002dd8:	40004c00 	.word	0x40004c00
 8002ddc:	40005000 	.word	0x40005000
 8002de0:	40011400 	.word	0x40011400
 8002de4:	40007800 	.word	0x40007800
 8002de8:	2310      	movs	r3, #16
 8002dea:	77fb      	strb	r3, [r7, #31]
 8002dec:	e02c      	b.n	8002e48 <UART_SetConfig+0x348>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a72      	ldr	r2, [pc, #456]	; (8002fbc <UART_SetConfig+0x4bc>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d125      	bne.n	8002e44 <UART_SetConfig+0x344>
 8002df8:	4b71      	ldr	r3, [pc, #452]	; (8002fc0 <UART_SetConfig+0x4c0>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e06:	d017      	beq.n	8002e38 <UART_SetConfig+0x338>
 8002e08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e0c:	d817      	bhi.n	8002e3e <UART_SetConfig+0x33e>
 8002e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e12:	d00b      	beq.n	8002e2c <UART_SetConfig+0x32c>
 8002e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e18:	d811      	bhi.n	8002e3e <UART_SetConfig+0x33e>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <UART_SetConfig+0x326>
 8002e1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e22:	d006      	beq.n	8002e32 <UART_SetConfig+0x332>
 8002e24:	e00b      	b.n	8002e3e <UART_SetConfig+0x33e>
 8002e26:	2300      	movs	r3, #0
 8002e28:	77fb      	strb	r3, [r7, #31]
 8002e2a:	e00d      	b.n	8002e48 <UART_SetConfig+0x348>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	77fb      	strb	r3, [r7, #31]
 8002e30:	e00a      	b.n	8002e48 <UART_SetConfig+0x348>
 8002e32:	2304      	movs	r3, #4
 8002e34:	77fb      	strb	r3, [r7, #31]
 8002e36:	e007      	b.n	8002e48 <UART_SetConfig+0x348>
 8002e38:	2308      	movs	r3, #8
 8002e3a:	77fb      	strb	r3, [r7, #31]
 8002e3c:	e004      	b.n	8002e48 <UART_SetConfig+0x348>
 8002e3e:	2310      	movs	r3, #16
 8002e40:	77fb      	strb	r3, [r7, #31]
 8002e42:	e001      	b.n	8002e48 <UART_SetConfig+0x348>
 8002e44:	2310      	movs	r3, #16
 8002e46:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e50:	d15b      	bne.n	8002f0a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002e52:	7ffb      	ldrb	r3, [r7, #31]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d828      	bhi.n	8002eaa <UART_SetConfig+0x3aa>
 8002e58:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <UART_SetConfig+0x360>)
 8002e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5e:	bf00      	nop
 8002e60:	08002e85 	.word	0x08002e85
 8002e64:	08002e8d 	.word	0x08002e8d
 8002e68:	08002e95 	.word	0x08002e95
 8002e6c:	08002eab 	.word	0x08002eab
 8002e70:	08002e9b 	.word	0x08002e9b
 8002e74:	08002eab 	.word	0x08002eab
 8002e78:	08002eab 	.word	0x08002eab
 8002e7c:	08002eab 	.word	0x08002eab
 8002e80:	08002ea3 	.word	0x08002ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e84:	f7ff f856 	bl	8001f34 <HAL_RCC_GetPCLK1Freq>
 8002e88:	61b8      	str	r0, [r7, #24]
        break;
 8002e8a:	e013      	b.n	8002eb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e8c:	f7ff f866 	bl	8001f5c <HAL_RCC_GetPCLK2Freq>
 8002e90:	61b8      	str	r0, [r7, #24]
        break;
 8002e92:	e00f      	b.n	8002eb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e94:	4b4b      	ldr	r3, [pc, #300]	; (8002fc4 <UART_SetConfig+0x4c4>)
 8002e96:	61bb      	str	r3, [r7, #24]
        break;
 8002e98:	e00c      	b.n	8002eb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e9a:	f7fe ff39 	bl	8001d10 <HAL_RCC_GetSysClockFreq>
 8002e9e:	61b8      	str	r0, [r7, #24]
        break;
 8002ea0:	e008      	b.n	8002eb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea6:	61bb      	str	r3, [r7, #24]
        break;
 8002ea8:	e004      	b.n	8002eb4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	77bb      	strb	r3, [r7, #30]
        break;
 8002eb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d074      	beq.n	8002fa4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	005a      	lsls	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	085b      	lsrs	r3, r3, #1
 8002ec4:	441a      	add	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ece:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	2b0f      	cmp	r3, #15
 8002ed4:	d916      	bls.n	8002f04 <UART_SetConfig+0x404>
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002edc:	d212      	bcs.n	8002f04 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	f023 030f 	bic.w	r3, r3, #15
 8002ee6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	085b      	lsrs	r3, r3, #1
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	89fb      	ldrh	r3, [r7, #14]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	89fa      	ldrh	r2, [r7, #14]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	e04f      	b.n	8002fa4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	77bb      	strb	r3, [r7, #30]
 8002f08:	e04c      	b.n	8002fa4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f0a:	7ffb      	ldrb	r3, [r7, #31]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d828      	bhi.n	8002f62 <UART_SetConfig+0x462>
 8002f10:	a201      	add	r2, pc, #4	; (adr r2, 8002f18 <UART_SetConfig+0x418>)
 8002f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f16:	bf00      	nop
 8002f18:	08002f3d 	.word	0x08002f3d
 8002f1c:	08002f45 	.word	0x08002f45
 8002f20:	08002f4d 	.word	0x08002f4d
 8002f24:	08002f63 	.word	0x08002f63
 8002f28:	08002f53 	.word	0x08002f53
 8002f2c:	08002f63 	.word	0x08002f63
 8002f30:	08002f63 	.word	0x08002f63
 8002f34:	08002f63 	.word	0x08002f63
 8002f38:	08002f5b 	.word	0x08002f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f3c:	f7fe fffa 	bl	8001f34 <HAL_RCC_GetPCLK1Freq>
 8002f40:	61b8      	str	r0, [r7, #24]
        break;
 8002f42:	e013      	b.n	8002f6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f44:	f7ff f80a 	bl	8001f5c <HAL_RCC_GetPCLK2Freq>
 8002f48:	61b8      	str	r0, [r7, #24]
        break;
 8002f4a:	e00f      	b.n	8002f6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <UART_SetConfig+0x4c4>)
 8002f4e:	61bb      	str	r3, [r7, #24]
        break;
 8002f50:	e00c      	b.n	8002f6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f52:	f7fe fedd 	bl	8001d10 <HAL_RCC_GetSysClockFreq>
 8002f56:	61b8      	str	r0, [r7, #24]
        break;
 8002f58:	e008      	b.n	8002f6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f5e:	61bb      	str	r3, [r7, #24]
        break;
 8002f60:	e004      	b.n	8002f6c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	77bb      	strb	r3, [r7, #30]
        break;
 8002f6a:	bf00      	nop
    }

    if (pclk != 0U)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d018      	beq.n	8002fa4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	085a      	lsrs	r2, r3, #1
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	441a      	add	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	2b0f      	cmp	r3, #15
 8002f8a:	d909      	bls.n	8002fa0 <UART_SetConfig+0x4a0>
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f92:	d205      	bcs.n	8002fa0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	e001      	b.n	8002fa4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002fb0:	7fbb      	ldrb	r3, [r7, #30]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40007c00 	.word	0x40007c00
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	00f42400 	.word	0x00f42400

08002fc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01a      	beq.n	80030de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030c6:	d10a      	bne.n	80030de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	605a      	str	r2, [r3, #4]
  }
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af02      	add	r7, sp, #8
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800311c:	f7fd ff70 	bl	8001000 <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b08      	cmp	r3, #8
 800312e:	d10e      	bne.n	800314e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003130:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f831 	bl	80031a6 <UART_WaitOnFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e027      	b.n	800319e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b04      	cmp	r3, #4
 800315a:	d10e      	bne.n	800317a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800315c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f81b 	bl	80031a6 <UART_WaitOnFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e011      	b.n	800319e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b09c      	sub	sp, #112	; 0x70
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	4613      	mov	r3, r2
 80031b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b6:	e0a7      	b.n	8003308 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	f000 80a3 	beq.w	8003308 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c2:	f7fd ff1d 	bl	8001000 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d302      	bcc.n	80031d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80031d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d13f      	bne.n	8003258 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031e0:	e853 3f00 	ldrex	r3, [r3]
 80031e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80031e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031ec:	667b      	str	r3, [r7, #100]	; 0x64
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80031fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031fe:	e841 2300 	strex	r3, r2, [r1]
 8003202:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1e6      	bne.n	80031d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3308      	adds	r3, #8
 8003210:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003214:	e853 3f00 	ldrex	r3, [r3]
 8003218:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	663b      	str	r3, [r7, #96]	; 0x60
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3308      	adds	r3, #8
 8003228:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800322a:	64ba      	str	r2, [r7, #72]	; 0x48
 800322c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003232:	e841 2300 	strex	r3, r2, [r1]
 8003236:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1e5      	bne.n	800320a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e068      	b.n	800332a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	2b00      	cmp	r3, #0
 8003264:	d050      	beq.n	8003308 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003274:	d148      	bne.n	8003308 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800327e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	e853 3f00 	ldrex	r3, [r3]
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003294:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329e:	637b      	str	r3, [r7, #52]	; 0x34
 80032a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032a6:	e841 2300 	strex	r3, r2, [r1]
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1e6      	bne.n	8003280 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3308      	adds	r3, #8
 80032b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	e853 3f00 	ldrex	r3, [r3]
 80032c0:	613b      	str	r3, [r7, #16]
   return(result);
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	3308      	adds	r3, #8
 80032d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032d2:	623a      	str	r2, [r7, #32]
 80032d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d6:	69f9      	ldr	r1, [r7, #28]
 80032d8:	6a3a      	ldr	r2, [r7, #32]
 80032da:	e841 2300 	strex	r3, r2, [r1]
 80032de:	61bb      	str	r3, [r7, #24]
   return(result);
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1e5      	bne.n	80032b2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2220      	movs	r2, #32
 80032ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e010      	b.n	800332a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	69da      	ldr	r2, [r3, #28]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4013      	ands	r3, r2
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	429a      	cmp	r2, r3
 8003316:	bf0c      	ite	eq
 8003318:	2301      	moveq	r3, #1
 800331a:	2300      	movne	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	429a      	cmp	r2, r3
 8003324:	f43f af48 	beq.w	80031b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3770      	adds	r7, #112	; 0x70
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <siprintf>:
 8003334:	b40e      	push	{r1, r2, r3}
 8003336:	b500      	push	{lr}
 8003338:	b09c      	sub	sp, #112	; 0x70
 800333a:	ab1d      	add	r3, sp, #116	; 0x74
 800333c:	9002      	str	r0, [sp, #8]
 800333e:	9006      	str	r0, [sp, #24]
 8003340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003344:	4809      	ldr	r0, [pc, #36]	; (800336c <siprintf+0x38>)
 8003346:	9107      	str	r1, [sp, #28]
 8003348:	9104      	str	r1, [sp, #16]
 800334a:	4909      	ldr	r1, [pc, #36]	; (8003370 <siprintf+0x3c>)
 800334c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003350:	9105      	str	r1, [sp, #20]
 8003352:	6800      	ldr	r0, [r0, #0]
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	a902      	add	r1, sp, #8
 8003358:	f000 f992 	bl	8003680 <_svfiprintf_r>
 800335c:	9b02      	ldr	r3, [sp, #8]
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	b01c      	add	sp, #112	; 0x70
 8003364:	f85d eb04 	ldr.w	lr, [sp], #4
 8003368:	b003      	add	sp, #12
 800336a:	4770      	bx	lr
 800336c:	20000060 	.word	0x20000060
 8003370:	ffff0208 	.word	0xffff0208

08003374 <memset>:
 8003374:	4402      	add	r2, r0
 8003376:	4603      	mov	r3, r0
 8003378:	4293      	cmp	r3, r2
 800337a:	d100      	bne.n	800337e <memset+0xa>
 800337c:	4770      	bx	lr
 800337e:	f803 1b01 	strb.w	r1, [r3], #1
 8003382:	e7f9      	b.n	8003378 <memset+0x4>

08003384 <__errno>:
 8003384:	4b01      	ldr	r3, [pc, #4]	; (800338c <__errno+0x8>)
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000060 	.word	0x20000060

08003390 <__libc_init_array>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	4d0d      	ldr	r5, [pc, #52]	; (80033c8 <__libc_init_array+0x38>)
 8003394:	4c0d      	ldr	r4, [pc, #52]	; (80033cc <__libc_init_array+0x3c>)
 8003396:	1b64      	subs	r4, r4, r5
 8003398:	10a4      	asrs	r4, r4, #2
 800339a:	2600      	movs	r6, #0
 800339c:	42a6      	cmp	r6, r4
 800339e:	d109      	bne.n	80033b4 <__libc_init_array+0x24>
 80033a0:	4d0b      	ldr	r5, [pc, #44]	; (80033d0 <__libc_init_array+0x40>)
 80033a2:	4c0c      	ldr	r4, [pc, #48]	; (80033d4 <__libc_init_array+0x44>)
 80033a4:	f000 fc6a 	bl	8003c7c <_init>
 80033a8:	1b64      	subs	r4, r4, r5
 80033aa:	10a4      	asrs	r4, r4, #2
 80033ac:	2600      	movs	r6, #0
 80033ae:	42a6      	cmp	r6, r4
 80033b0:	d105      	bne.n	80033be <__libc_init_array+0x2e>
 80033b2:	bd70      	pop	{r4, r5, r6, pc}
 80033b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b8:	4798      	blx	r3
 80033ba:	3601      	adds	r6, #1
 80033bc:	e7ee      	b.n	800339c <__libc_init_array+0xc>
 80033be:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c2:	4798      	blx	r3
 80033c4:	3601      	adds	r6, #1
 80033c6:	e7f2      	b.n	80033ae <__libc_init_array+0x1e>
 80033c8:	08003d6c 	.word	0x08003d6c
 80033cc:	08003d6c 	.word	0x08003d6c
 80033d0:	08003d6c 	.word	0x08003d6c
 80033d4:	08003d70 	.word	0x08003d70

080033d8 <__retarget_lock_acquire_recursive>:
 80033d8:	4770      	bx	lr

080033da <__retarget_lock_release_recursive>:
 80033da:	4770      	bx	lr

080033dc <_free_r>:
 80033dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033de:	2900      	cmp	r1, #0
 80033e0:	d044      	beq.n	800346c <_free_r+0x90>
 80033e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033e6:	9001      	str	r0, [sp, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f1a1 0404 	sub.w	r4, r1, #4
 80033ee:	bfb8      	it	lt
 80033f0:	18e4      	addlt	r4, r4, r3
 80033f2:	f000 f8df 	bl	80035b4 <__malloc_lock>
 80033f6:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <_free_r+0x94>)
 80033f8:	9801      	ldr	r0, [sp, #4]
 80033fa:	6813      	ldr	r3, [r2, #0]
 80033fc:	b933      	cbnz	r3, 800340c <_free_r+0x30>
 80033fe:	6063      	str	r3, [r4, #4]
 8003400:	6014      	str	r4, [r2, #0]
 8003402:	b003      	add	sp, #12
 8003404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003408:	f000 b8da 	b.w	80035c0 <__malloc_unlock>
 800340c:	42a3      	cmp	r3, r4
 800340e:	d908      	bls.n	8003422 <_free_r+0x46>
 8003410:	6825      	ldr	r5, [r4, #0]
 8003412:	1961      	adds	r1, r4, r5
 8003414:	428b      	cmp	r3, r1
 8003416:	bf01      	itttt	eq
 8003418:	6819      	ldreq	r1, [r3, #0]
 800341a:	685b      	ldreq	r3, [r3, #4]
 800341c:	1949      	addeq	r1, r1, r5
 800341e:	6021      	streq	r1, [r4, #0]
 8003420:	e7ed      	b.n	80033fe <_free_r+0x22>
 8003422:	461a      	mov	r2, r3
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	b10b      	cbz	r3, 800342c <_free_r+0x50>
 8003428:	42a3      	cmp	r3, r4
 800342a:	d9fa      	bls.n	8003422 <_free_r+0x46>
 800342c:	6811      	ldr	r1, [r2, #0]
 800342e:	1855      	adds	r5, r2, r1
 8003430:	42a5      	cmp	r5, r4
 8003432:	d10b      	bne.n	800344c <_free_r+0x70>
 8003434:	6824      	ldr	r4, [r4, #0]
 8003436:	4421      	add	r1, r4
 8003438:	1854      	adds	r4, r2, r1
 800343a:	42a3      	cmp	r3, r4
 800343c:	6011      	str	r1, [r2, #0]
 800343e:	d1e0      	bne.n	8003402 <_free_r+0x26>
 8003440:	681c      	ldr	r4, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	6053      	str	r3, [r2, #4]
 8003446:	440c      	add	r4, r1
 8003448:	6014      	str	r4, [r2, #0]
 800344a:	e7da      	b.n	8003402 <_free_r+0x26>
 800344c:	d902      	bls.n	8003454 <_free_r+0x78>
 800344e:	230c      	movs	r3, #12
 8003450:	6003      	str	r3, [r0, #0]
 8003452:	e7d6      	b.n	8003402 <_free_r+0x26>
 8003454:	6825      	ldr	r5, [r4, #0]
 8003456:	1961      	adds	r1, r4, r5
 8003458:	428b      	cmp	r3, r1
 800345a:	bf04      	itt	eq
 800345c:	6819      	ldreq	r1, [r3, #0]
 800345e:	685b      	ldreq	r3, [r3, #4]
 8003460:	6063      	str	r3, [r4, #4]
 8003462:	bf04      	itt	eq
 8003464:	1949      	addeq	r1, r1, r5
 8003466:	6021      	streq	r1, [r4, #0]
 8003468:	6054      	str	r4, [r2, #4]
 800346a:	e7ca      	b.n	8003402 <_free_r+0x26>
 800346c:	b003      	add	sp, #12
 800346e:	bd30      	pop	{r4, r5, pc}
 8003470:	200004f0 	.word	0x200004f0

08003474 <sbrk_aligned>:
 8003474:	b570      	push	{r4, r5, r6, lr}
 8003476:	4e0e      	ldr	r6, [pc, #56]	; (80034b0 <sbrk_aligned+0x3c>)
 8003478:	460c      	mov	r4, r1
 800347a:	6831      	ldr	r1, [r6, #0]
 800347c:	4605      	mov	r5, r0
 800347e:	b911      	cbnz	r1, 8003486 <sbrk_aligned+0x12>
 8003480:	f000 fba6 	bl	8003bd0 <_sbrk_r>
 8003484:	6030      	str	r0, [r6, #0]
 8003486:	4621      	mov	r1, r4
 8003488:	4628      	mov	r0, r5
 800348a:	f000 fba1 	bl	8003bd0 <_sbrk_r>
 800348e:	1c43      	adds	r3, r0, #1
 8003490:	d00a      	beq.n	80034a8 <sbrk_aligned+0x34>
 8003492:	1cc4      	adds	r4, r0, #3
 8003494:	f024 0403 	bic.w	r4, r4, #3
 8003498:	42a0      	cmp	r0, r4
 800349a:	d007      	beq.n	80034ac <sbrk_aligned+0x38>
 800349c:	1a21      	subs	r1, r4, r0
 800349e:	4628      	mov	r0, r5
 80034a0:	f000 fb96 	bl	8003bd0 <_sbrk_r>
 80034a4:	3001      	adds	r0, #1
 80034a6:	d101      	bne.n	80034ac <sbrk_aligned+0x38>
 80034a8:	f04f 34ff 	mov.w	r4, #4294967295
 80034ac:	4620      	mov	r0, r4
 80034ae:	bd70      	pop	{r4, r5, r6, pc}
 80034b0:	200004f4 	.word	0x200004f4

080034b4 <_malloc_r>:
 80034b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034b8:	1ccd      	adds	r5, r1, #3
 80034ba:	f025 0503 	bic.w	r5, r5, #3
 80034be:	3508      	adds	r5, #8
 80034c0:	2d0c      	cmp	r5, #12
 80034c2:	bf38      	it	cc
 80034c4:	250c      	movcc	r5, #12
 80034c6:	2d00      	cmp	r5, #0
 80034c8:	4607      	mov	r7, r0
 80034ca:	db01      	blt.n	80034d0 <_malloc_r+0x1c>
 80034cc:	42a9      	cmp	r1, r5
 80034ce:	d905      	bls.n	80034dc <_malloc_r+0x28>
 80034d0:	230c      	movs	r3, #12
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	2600      	movs	r6, #0
 80034d6:	4630      	mov	r0, r6
 80034d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80035b0 <_malloc_r+0xfc>
 80034e0:	f000 f868 	bl	80035b4 <__malloc_lock>
 80034e4:	f8d8 3000 	ldr.w	r3, [r8]
 80034e8:	461c      	mov	r4, r3
 80034ea:	bb5c      	cbnz	r4, 8003544 <_malloc_r+0x90>
 80034ec:	4629      	mov	r1, r5
 80034ee:	4638      	mov	r0, r7
 80034f0:	f7ff ffc0 	bl	8003474 <sbrk_aligned>
 80034f4:	1c43      	adds	r3, r0, #1
 80034f6:	4604      	mov	r4, r0
 80034f8:	d155      	bne.n	80035a6 <_malloc_r+0xf2>
 80034fa:	f8d8 4000 	ldr.w	r4, [r8]
 80034fe:	4626      	mov	r6, r4
 8003500:	2e00      	cmp	r6, #0
 8003502:	d145      	bne.n	8003590 <_malloc_r+0xdc>
 8003504:	2c00      	cmp	r4, #0
 8003506:	d048      	beq.n	800359a <_malloc_r+0xe6>
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	4631      	mov	r1, r6
 800350c:	4638      	mov	r0, r7
 800350e:	eb04 0903 	add.w	r9, r4, r3
 8003512:	f000 fb5d 	bl	8003bd0 <_sbrk_r>
 8003516:	4581      	cmp	r9, r0
 8003518:	d13f      	bne.n	800359a <_malloc_r+0xe6>
 800351a:	6821      	ldr	r1, [r4, #0]
 800351c:	1a6d      	subs	r5, r5, r1
 800351e:	4629      	mov	r1, r5
 8003520:	4638      	mov	r0, r7
 8003522:	f7ff ffa7 	bl	8003474 <sbrk_aligned>
 8003526:	3001      	adds	r0, #1
 8003528:	d037      	beq.n	800359a <_malloc_r+0xe6>
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	442b      	add	r3, r5
 800352e:	6023      	str	r3, [r4, #0]
 8003530:	f8d8 3000 	ldr.w	r3, [r8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d038      	beq.n	80035aa <_malloc_r+0xf6>
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	42a2      	cmp	r2, r4
 800353c:	d12b      	bne.n	8003596 <_malloc_r+0xe2>
 800353e:	2200      	movs	r2, #0
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	e00f      	b.n	8003564 <_malloc_r+0xb0>
 8003544:	6822      	ldr	r2, [r4, #0]
 8003546:	1b52      	subs	r2, r2, r5
 8003548:	d41f      	bmi.n	800358a <_malloc_r+0xd6>
 800354a:	2a0b      	cmp	r2, #11
 800354c:	d917      	bls.n	800357e <_malloc_r+0xca>
 800354e:	1961      	adds	r1, r4, r5
 8003550:	42a3      	cmp	r3, r4
 8003552:	6025      	str	r5, [r4, #0]
 8003554:	bf18      	it	ne
 8003556:	6059      	strne	r1, [r3, #4]
 8003558:	6863      	ldr	r3, [r4, #4]
 800355a:	bf08      	it	eq
 800355c:	f8c8 1000 	streq.w	r1, [r8]
 8003560:	5162      	str	r2, [r4, r5]
 8003562:	604b      	str	r3, [r1, #4]
 8003564:	4638      	mov	r0, r7
 8003566:	f104 060b 	add.w	r6, r4, #11
 800356a:	f000 f829 	bl	80035c0 <__malloc_unlock>
 800356e:	f026 0607 	bic.w	r6, r6, #7
 8003572:	1d23      	adds	r3, r4, #4
 8003574:	1af2      	subs	r2, r6, r3
 8003576:	d0ae      	beq.n	80034d6 <_malloc_r+0x22>
 8003578:	1b9b      	subs	r3, r3, r6
 800357a:	50a3      	str	r3, [r4, r2]
 800357c:	e7ab      	b.n	80034d6 <_malloc_r+0x22>
 800357e:	42a3      	cmp	r3, r4
 8003580:	6862      	ldr	r2, [r4, #4]
 8003582:	d1dd      	bne.n	8003540 <_malloc_r+0x8c>
 8003584:	f8c8 2000 	str.w	r2, [r8]
 8003588:	e7ec      	b.n	8003564 <_malloc_r+0xb0>
 800358a:	4623      	mov	r3, r4
 800358c:	6864      	ldr	r4, [r4, #4]
 800358e:	e7ac      	b.n	80034ea <_malloc_r+0x36>
 8003590:	4634      	mov	r4, r6
 8003592:	6876      	ldr	r6, [r6, #4]
 8003594:	e7b4      	b.n	8003500 <_malloc_r+0x4c>
 8003596:	4613      	mov	r3, r2
 8003598:	e7cc      	b.n	8003534 <_malloc_r+0x80>
 800359a:	230c      	movs	r3, #12
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	4638      	mov	r0, r7
 80035a0:	f000 f80e 	bl	80035c0 <__malloc_unlock>
 80035a4:	e797      	b.n	80034d6 <_malloc_r+0x22>
 80035a6:	6025      	str	r5, [r4, #0]
 80035a8:	e7dc      	b.n	8003564 <_malloc_r+0xb0>
 80035aa:	605b      	str	r3, [r3, #4]
 80035ac:	deff      	udf	#255	; 0xff
 80035ae:	bf00      	nop
 80035b0:	200004f0 	.word	0x200004f0

080035b4 <__malloc_lock>:
 80035b4:	4801      	ldr	r0, [pc, #4]	; (80035bc <__malloc_lock+0x8>)
 80035b6:	f7ff bf0f 	b.w	80033d8 <__retarget_lock_acquire_recursive>
 80035ba:	bf00      	nop
 80035bc:	200004ec 	.word	0x200004ec

080035c0 <__malloc_unlock>:
 80035c0:	4801      	ldr	r0, [pc, #4]	; (80035c8 <__malloc_unlock+0x8>)
 80035c2:	f7ff bf0a 	b.w	80033da <__retarget_lock_release_recursive>
 80035c6:	bf00      	nop
 80035c8:	200004ec 	.word	0x200004ec

080035cc <__ssputs_r>:
 80035cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035d0:	688e      	ldr	r6, [r1, #8]
 80035d2:	461f      	mov	r7, r3
 80035d4:	42be      	cmp	r6, r7
 80035d6:	680b      	ldr	r3, [r1, #0]
 80035d8:	4682      	mov	sl, r0
 80035da:	460c      	mov	r4, r1
 80035dc:	4690      	mov	r8, r2
 80035de:	d82c      	bhi.n	800363a <__ssputs_r+0x6e>
 80035e0:	898a      	ldrh	r2, [r1, #12]
 80035e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035e6:	d026      	beq.n	8003636 <__ssputs_r+0x6a>
 80035e8:	6965      	ldr	r5, [r4, #20]
 80035ea:	6909      	ldr	r1, [r1, #16]
 80035ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035f0:	eba3 0901 	sub.w	r9, r3, r1
 80035f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035f8:	1c7b      	adds	r3, r7, #1
 80035fa:	444b      	add	r3, r9
 80035fc:	106d      	asrs	r5, r5, #1
 80035fe:	429d      	cmp	r5, r3
 8003600:	bf38      	it	cc
 8003602:	461d      	movcc	r5, r3
 8003604:	0553      	lsls	r3, r2, #21
 8003606:	d527      	bpl.n	8003658 <__ssputs_r+0x8c>
 8003608:	4629      	mov	r1, r5
 800360a:	f7ff ff53 	bl	80034b4 <_malloc_r>
 800360e:	4606      	mov	r6, r0
 8003610:	b360      	cbz	r0, 800366c <__ssputs_r+0xa0>
 8003612:	6921      	ldr	r1, [r4, #16]
 8003614:	464a      	mov	r2, r9
 8003616:	f000 faeb 	bl	8003bf0 <memcpy>
 800361a:	89a3      	ldrh	r3, [r4, #12]
 800361c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003624:	81a3      	strh	r3, [r4, #12]
 8003626:	6126      	str	r6, [r4, #16]
 8003628:	6165      	str	r5, [r4, #20]
 800362a:	444e      	add	r6, r9
 800362c:	eba5 0509 	sub.w	r5, r5, r9
 8003630:	6026      	str	r6, [r4, #0]
 8003632:	60a5      	str	r5, [r4, #8]
 8003634:	463e      	mov	r6, r7
 8003636:	42be      	cmp	r6, r7
 8003638:	d900      	bls.n	800363c <__ssputs_r+0x70>
 800363a:	463e      	mov	r6, r7
 800363c:	6820      	ldr	r0, [r4, #0]
 800363e:	4632      	mov	r2, r6
 8003640:	4641      	mov	r1, r8
 8003642:	f000 faab 	bl	8003b9c <memmove>
 8003646:	68a3      	ldr	r3, [r4, #8]
 8003648:	1b9b      	subs	r3, r3, r6
 800364a:	60a3      	str	r3, [r4, #8]
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	4433      	add	r3, r6
 8003650:	6023      	str	r3, [r4, #0]
 8003652:	2000      	movs	r0, #0
 8003654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003658:	462a      	mov	r2, r5
 800365a:	f000 fad7 	bl	8003c0c <_realloc_r>
 800365e:	4606      	mov	r6, r0
 8003660:	2800      	cmp	r0, #0
 8003662:	d1e0      	bne.n	8003626 <__ssputs_r+0x5a>
 8003664:	6921      	ldr	r1, [r4, #16]
 8003666:	4650      	mov	r0, sl
 8003668:	f7ff feb8 	bl	80033dc <_free_r>
 800366c:	230c      	movs	r3, #12
 800366e:	f8ca 3000 	str.w	r3, [sl]
 8003672:	89a3      	ldrh	r3, [r4, #12]
 8003674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003678:	81a3      	strh	r3, [r4, #12]
 800367a:	f04f 30ff 	mov.w	r0, #4294967295
 800367e:	e7e9      	b.n	8003654 <__ssputs_r+0x88>

08003680 <_svfiprintf_r>:
 8003680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003684:	4698      	mov	r8, r3
 8003686:	898b      	ldrh	r3, [r1, #12]
 8003688:	061b      	lsls	r3, r3, #24
 800368a:	b09d      	sub	sp, #116	; 0x74
 800368c:	4607      	mov	r7, r0
 800368e:	460d      	mov	r5, r1
 8003690:	4614      	mov	r4, r2
 8003692:	d50e      	bpl.n	80036b2 <_svfiprintf_r+0x32>
 8003694:	690b      	ldr	r3, [r1, #16]
 8003696:	b963      	cbnz	r3, 80036b2 <_svfiprintf_r+0x32>
 8003698:	2140      	movs	r1, #64	; 0x40
 800369a:	f7ff ff0b 	bl	80034b4 <_malloc_r>
 800369e:	6028      	str	r0, [r5, #0]
 80036a0:	6128      	str	r0, [r5, #16]
 80036a2:	b920      	cbnz	r0, 80036ae <_svfiprintf_r+0x2e>
 80036a4:	230c      	movs	r3, #12
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ac:	e0d0      	b.n	8003850 <_svfiprintf_r+0x1d0>
 80036ae:	2340      	movs	r3, #64	; 0x40
 80036b0:	616b      	str	r3, [r5, #20]
 80036b2:	2300      	movs	r3, #0
 80036b4:	9309      	str	r3, [sp, #36]	; 0x24
 80036b6:	2320      	movs	r3, #32
 80036b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80036c0:	2330      	movs	r3, #48	; 0x30
 80036c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003868 <_svfiprintf_r+0x1e8>
 80036c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036ca:	f04f 0901 	mov.w	r9, #1
 80036ce:	4623      	mov	r3, r4
 80036d0:	469a      	mov	sl, r3
 80036d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036d6:	b10a      	cbz	r2, 80036dc <_svfiprintf_r+0x5c>
 80036d8:	2a25      	cmp	r2, #37	; 0x25
 80036da:	d1f9      	bne.n	80036d0 <_svfiprintf_r+0x50>
 80036dc:	ebba 0b04 	subs.w	fp, sl, r4
 80036e0:	d00b      	beq.n	80036fa <_svfiprintf_r+0x7a>
 80036e2:	465b      	mov	r3, fp
 80036e4:	4622      	mov	r2, r4
 80036e6:	4629      	mov	r1, r5
 80036e8:	4638      	mov	r0, r7
 80036ea:	f7ff ff6f 	bl	80035cc <__ssputs_r>
 80036ee:	3001      	adds	r0, #1
 80036f0:	f000 80a9 	beq.w	8003846 <_svfiprintf_r+0x1c6>
 80036f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036f6:	445a      	add	r2, fp
 80036f8:	9209      	str	r2, [sp, #36]	; 0x24
 80036fa:	f89a 3000 	ldrb.w	r3, [sl]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80a1 	beq.w	8003846 <_svfiprintf_r+0x1c6>
 8003704:	2300      	movs	r3, #0
 8003706:	f04f 32ff 	mov.w	r2, #4294967295
 800370a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800370e:	f10a 0a01 	add.w	sl, sl, #1
 8003712:	9304      	str	r3, [sp, #16]
 8003714:	9307      	str	r3, [sp, #28]
 8003716:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800371a:	931a      	str	r3, [sp, #104]	; 0x68
 800371c:	4654      	mov	r4, sl
 800371e:	2205      	movs	r2, #5
 8003720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003724:	4850      	ldr	r0, [pc, #320]	; (8003868 <_svfiprintf_r+0x1e8>)
 8003726:	f7fc fd93 	bl	8000250 <memchr>
 800372a:	9a04      	ldr	r2, [sp, #16]
 800372c:	b9d8      	cbnz	r0, 8003766 <_svfiprintf_r+0xe6>
 800372e:	06d0      	lsls	r0, r2, #27
 8003730:	bf44      	itt	mi
 8003732:	2320      	movmi	r3, #32
 8003734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003738:	0711      	lsls	r1, r2, #28
 800373a:	bf44      	itt	mi
 800373c:	232b      	movmi	r3, #43	; 0x2b
 800373e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003742:	f89a 3000 	ldrb.w	r3, [sl]
 8003746:	2b2a      	cmp	r3, #42	; 0x2a
 8003748:	d015      	beq.n	8003776 <_svfiprintf_r+0xf6>
 800374a:	9a07      	ldr	r2, [sp, #28]
 800374c:	4654      	mov	r4, sl
 800374e:	2000      	movs	r0, #0
 8003750:	f04f 0c0a 	mov.w	ip, #10
 8003754:	4621      	mov	r1, r4
 8003756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800375a:	3b30      	subs	r3, #48	; 0x30
 800375c:	2b09      	cmp	r3, #9
 800375e:	d94d      	bls.n	80037fc <_svfiprintf_r+0x17c>
 8003760:	b1b0      	cbz	r0, 8003790 <_svfiprintf_r+0x110>
 8003762:	9207      	str	r2, [sp, #28]
 8003764:	e014      	b.n	8003790 <_svfiprintf_r+0x110>
 8003766:	eba0 0308 	sub.w	r3, r0, r8
 800376a:	fa09 f303 	lsl.w	r3, r9, r3
 800376e:	4313      	orrs	r3, r2
 8003770:	9304      	str	r3, [sp, #16]
 8003772:	46a2      	mov	sl, r4
 8003774:	e7d2      	b.n	800371c <_svfiprintf_r+0x9c>
 8003776:	9b03      	ldr	r3, [sp, #12]
 8003778:	1d19      	adds	r1, r3, #4
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	9103      	str	r1, [sp, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	bfbb      	ittet	lt
 8003782:	425b      	neglt	r3, r3
 8003784:	f042 0202 	orrlt.w	r2, r2, #2
 8003788:	9307      	strge	r3, [sp, #28]
 800378a:	9307      	strlt	r3, [sp, #28]
 800378c:	bfb8      	it	lt
 800378e:	9204      	strlt	r2, [sp, #16]
 8003790:	7823      	ldrb	r3, [r4, #0]
 8003792:	2b2e      	cmp	r3, #46	; 0x2e
 8003794:	d10c      	bne.n	80037b0 <_svfiprintf_r+0x130>
 8003796:	7863      	ldrb	r3, [r4, #1]
 8003798:	2b2a      	cmp	r3, #42	; 0x2a
 800379a:	d134      	bne.n	8003806 <_svfiprintf_r+0x186>
 800379c:	9b03      	ldr	r3, [sp, #12]
 800379e:	1d1a      	adds	r2, r3, #4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	9203      	str	r2, [sp, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bfb8      	it	lt
 80037a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80037ac:	3402      	adds	r4, #2
 80037ae:	9305      	str	r3, [sp, #20]
 80037b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003878 <_svfiprintf_r+0x1f8>
 80037b4:	7821      	ldrb	r1, [r4, #0]
 80037b6:	2203      	movs	r2, #3
 80037b8:	4650      	mov	r0, sl
 80037ba:	f7fc fd49 	bl	8000250 <memchr>
 80037be:	b138      	cbz	r0, 80037d0 <_svfiprintf_r+0x150>
 80037c0:	9b04      	ldr	r3, [sp, #16]
 80037c2:	eba0 000a 	sub.w	r0, r0, sl
 80037c6:	2240      	movs	r2, #64	; 0x40
 80037c8:	4082      	lsls	r2, r0
 80037ca:	4313      	orrs	r3, r2
 80037cc:	3401      	adds	r4, #1
 80037ce:	9304      	str	r3, [sp, #16]
 80037d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037d4:	4825      	ldr	r0, [pc, #148]	; (800386c <_svfiprintf_r+0x1ec>)
 80037d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037da:	2206      	movs	r2, #6
 80037dc:	f7fc fd38 	bl	8000250 <memchr>
 80037e0:	2800      	cmp	r0, #0
 80037e2:	d038      	beq.n	8003856 <_svfiprintf_r+0x1d6>
 80037e4:	4b22      	ldr	r3, [pc, #136]	; (8003870 <_svfiprintf_r+0x1f0>)
 80037e6:	bb1b      	cbnz	r3, 8003830 <_svfiprintf_r+0x1b0>
 80037e8:	9b03      	ldr	r3, [sp, #12]
 80037ea:	3307      	adds	r3, #7
 80037ec:	f023 0307 	bic.w	r3, r3, #7
 80037f0:	3308      	adds	r3, #8
 80037f2:	9303      	str	r3, [sp, #12]
 80037f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037f6:	4433      	add	r3, r6
 80037f8:	9309      	str	r3, [sp, #36]	; 0x24
 80037fa:	e768      	b.n	80036ce <_svfiprintf_r+0x4e>
 80037fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003800:	460c      	mov	r4, r1
 8003802:	2001      	movs	r0, #1
 8003804:	e7a6      	b.n	8003754 <_svfiprintf_r+0xd4>
 8003806:	2300      	movs	r3, #0
 8003808:	3401      	adds	r4, #1
 800380a:	9305      	str	r3, [sp, #20]
 800380c:	4619      	mov	r1, r3
 800380e:	f04f 0c0a 	mov.w	ip, #10
 8003812:	4620      	mov	r0, r4
 8003814:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003818:	3a30      	subs	r2, #48	; 0x30
 800381a:	2a09      	cmp	r2, #9
 800381c:	d903      	bls.n	8003826 <_svfiprintf_r+0x1a6>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0c6      	beq.n	80037b0 <_svfiprintf_r+0x130>
 8003822:	9105      	str	r1, [sp, #20]
 8003824:	e7c4      	b.n	80037b0 <_svfiprintf_r+0x130>
 8003826:	fb0c 2101 	mla	r1, ip, r1, r2
 800382a:	4604      	mov	r4, r0
 800382c:	2301      	movs	r3, #1
 800382e:	e7f0      	b.n	8003812 <_svfiprintf_r+0x192>
 8003830:	ab03      	add	r3, sp, #12
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	462a      	mov	r2, r5
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <_svfiprintf_r+0x1f4>)
 8003838:	a904      	add	r1, sp, #16
 800383a:	4638      	mov	r0, r7
 800383c:	f3af 8000 	nop.w
 8003840:	1c42      	adds	r2, r0, #1
 8003842:	4606      	mov	r6, r0
 8003844:	d1d6      	bne.n	80037f4 <_svfiprintf_r+0x174>
 8003846:	89ab      	ldrh	r3, [r5, #12]
 8003848:	065b      	lsls	r3, r3, #25
 800384a:	f53f af2d 	bmi.w	80036a8 <_svfiprintf_r+0x28>
 800384e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003850:	b01d      	add	sp, #116	; 0x74
 8003852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003856:	ab03      	add	r3, sp, #12
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	462a      	mov	r2, r5
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <_svfiprintf_r+0x1f4>)
 800385e:	a904      	add	r1, sp, #16
 8003860:	4638      	mov	r0, r7
 8003862:	f000 f879 	bl	8003958 <_printf_i>
 8003866:	e7eb      	b.n	8003840 <_svfiprintf_r+0x1c0>
 8003868:	08003d30 	.word	0x08003d30
 800386c:	08003d3a 	.word	0x08003d3a
 8003870:	00000000 	.word	0x00000000
 8003874:	080035cd 	.word	0x080035cd
 8003878:	08003d36 	.word	0x08003d36

0800387c <_printf_common>:
 800387c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003880:	4616      	mov	r6, r2
 8003882:	4699      	mov	r9, r3
 8003884:	688a      	ldr	r2, [r1, #8]
 8003886:	690b      	ldr	r3, [r1, #16]
 8003888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800388c:	4293      	cmp	r3, r2
 800388e:	bfb8      	it	lt
 8003890:	4613      	movlt	r3, r2
 8003892:	6033      	str	r3, [r6, #0]
 8003894:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003898:	4607      	mov	r7, r0
 800389a:	460c      	mov	r4, r1
 800389c:	b10a      	cbz	r2, 80038a2 <_printf_common+0x26>
 800389e:	3301      	adds	r3, #1
 80038a0:	6033      	str	r3, [r6, #0]
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	0699      	lsls	r1, r3, #26
 80038a6:	bf42      	ittt	mi
 80038a8:	6833      	ldrmi	r3, [r6, #0]
 80038aa:	3302      	addmi	r3, #2
 80038ac:	6033      	strmi	r3, [r6, #0]
 80038ae:	6825      	ldr	r5, [r4, #0]
 80038b0:	f015 0506 	ands.w	r5, r5, #6
 80038b4:	d106      	bne.n	80038c4 <_printf_common+0x48>
 80038b6:	f104 0a19 	add.w	sl, r4, #25
 80038ba:	68e3      	ldr	r3, [r4, #12]
 80038bc:	6832      	ldr	r2, [r6, #0]
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	42ab      	cmp	r3, r5
 80038c2:	dc26      	bgt.n	8003912 <_printf_common+0x96>
 80038c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038c8:	1e13      	subs	r3, r2, #0
 80038ca:	6822      	ldr	r2, [r4, #0]
 80038cc:	bf18      	it	ne
 80038ce:	2301      	movne	r3, #1
 80038d0:	0692      	lsls	r2, r2, #26
 80038d2:	d42b      	bmi.n	800392c <_printf_common+0xb0>
 80038d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038d8:	4649      	mov	r1, r9
 80038da:	4638      	mov	r0, r7
 80038dc:	47c0      	blx	r8
 80038de:	3001      	adds	r0, #1
 80038e0:	d01e      	beq.n	8003920 <_printf_common+0xa4>
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	6922      	ldr	r2, [r4, #16]
 80038e6:	f003 0306 	and.w	r3, r3, #6
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	bf02      	ittt	eq
 80038ee:	68e5      	ldreq	r5, [r4, #12]
 80038f0:	6833      	ldreq	r3, [r6, #0]
 80038f2:	1aed      	subeq	r5, r5, r3
 80038f4:	68a3      	ldr	r3, [r4, #8]
 80038f6:	bf0c      	ite	eq
 80038f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038fc:	2500      	movne	r5, #0
 80038fe:	4293      	cmp	r3, r2
 8003900:	bfc4      	itt	gt
 8003902:	1a9b      	subgt	r3, r3, r2
 8003904:	18ed      	addgt	r5, r5, r3
 8003906:	2600      	movs	r6, #0
 8003908:	341a      	adds	r4, #26
 800390a:	42b5      	cmp	r5, r6
 800390c:	d11a      	bne.n	8003944 <_printf_common+0xc8>
 800390e:	2000      	movs	r0, #0
 8003910:	e008      	b.n	8003924 <_printf_common+0xa8>
 8003912:	2301      	movs	r3, #1
 8003914:	4652      	mov	r2, sl
 8003916:	4649      	mov	r1, r9
 8003918:	4638      	mov	r0, r7
 800391a:	47c0      	blx	r8
 800391c:	3001      	adds	r0, #1
 800391e:	d103      	bne.n	8003928 <_printf_common+0xac>
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003928:	3501      	adds	r5, #1
 800392a:	e7c6      	b.n	80038ba <_printf_common+0x3e>
 800392c:	18e1      	adds	r1, r4, r3
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	2030      	movs	r0, #48	; 0x30
 8003932:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003936:	4422      	add	r2, r4
 8003938:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800393c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003940:	3302      	adds	r3, #2
 8003942:	e7c7      	b.n	80038d4 <_printf_common+0x58>
 8003944:	2301      	movs	r3, #1
 8003946:	4622      	mov	r2, r4
 8003948:	4649      	mov	r1, r9
 800394a:	4638      	mov	r0, r7
 800394c:	47c0      	blx	r8
 800394e:	3001      	adds	r0, #1
 8003950:	d0e6      	beq.n	8003920 <_printf_common+0xa4>
 8003952:	3601      	adds	r6, #1
 8003954:	e7d9      	b.n	800390a <_printf_common+0x8e>
	...

08003958 <_printf_i>:
 8003958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800395c:	7e0f      	ldrb	r7, [r1, #24]
 800395e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003960:	2f78      	cmp	r7, #120	; 0x78
 8003962:	4691      	mov	r9, r2
 8003964:	4680      	mov	r8, r0
 8003966:	460c      	mov	r4, r1
 8003968:	469a      	mov	sl, r3
 800396a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800396e:	d807      	bhi.n	8003980 <_printf_i+0x28>
 8003970:	2f62      	cmp	r7, #98	; 0x62
 8003972:	d80a      	bhi.n	800398a <_printf_i+0x32>
 8003974:	2f00      	cmp	r7, #0
 8003976:	f000 80d4 	beq.w	8003b22 <_printf_i+0x1ca>
 800397a:	2f58      	cmp	r7, #88	; 0x58
 800397c:	f000 80c0 	beq.w	8003b00 <_printf_i+0x1a8>
 8003980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003984:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003988:	e03a      	b.n	8003a00 <_printf_i+0xa8>
 800398a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800398e:	2b15      	cmp	r3, #21
 8003990:	d8f6      	bhi.n	8003980 <_printf_i+0x28>
 8003992:	a101      	add	r1, pc, #4	; (adr r1, 8003998 <_printf_i+0x40>)
 8003994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003998:	080039f1 	.word	0x080039f1
 800399c:	08003a05 	.word	0x08003a05
 80039a0:	08003981 	.word	0x08003981
 80039a4:	08003981 	.word	0x08003981
 80039a8:	08003981 	.word	0x08003981
 80039ac:	08003981 	.word	0x08003981
 80039b0:	08003a05 	.word	0x08003a05
 80039b4:	08003981 	.word	0x08003981
 80039b8:	08003981 	.word	0x08003981
 80039bc:	08003981 	.word	0x08003981
 80039c0:	08003981 	.word	0x08003981
 80039c4:	08003b09 	.word	0x08003b09
 80039c8:	08003a31 	.word	0x08003a31
 80039cc:	08003ac3 	.word	0x08003ac3
 80039d0:	08003981 	.word	0x08003981
 80039d4:	08003981 	.word	0x08003981
 80039d8:	08003b2b 	.word	0x08003b2b
 80039dc:	08003981 	.word	0x08003981
 80039e0:	08003a31 	.word	0x08003a31
 80039e4:	08003981 	.word	0x08003981
 80039e8:	08003981 	.word	0x08003981
 80039ec:	08003acb 	.word	0x08003acb
 80039f0:	682b      	ldr	r3, [r5, #0]
 80039f2:	1d1a      	adds	r2, r3, #4
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	602a      	str	r2, [r5, #0]
 80039f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a00:	2301      	movs	r3, #1
 8003a02:	e09f      	b.n	8003b44 <_printf_i+0x1ec>
 8003a04:	6820      	ldr	r0, [r4, #0]
 8003a06:	682b      	ldr	r3, [r5, #0]
 8003a08:	0607      	lsls	r7, r0, #24
 8003a0a:	f103 0104 	add.w	r1, r3, #4
 8003a0e:	6029      	str	r1, [r5, #0]
 8003a10:	d501      	bpl.n	8003a16 <_printf_i+0xbe>
 8003a12:	681e      	ldr	r6, [r3, #0]
 8003a14:	e003      	b.n	8003a1e <_printf_i+0xc6>
 8003a16:	0646      	lsls	r6, r0, #25
 8003a18:	d5fb      	bpl.n	8003a12 <_printf_i+0xba>
 8003a1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003a1e:	2e00      	cmp	r6, #0
 8003a20:	da03      	bge.n	8003a2a <_printf_i+0xd2>
 8003a22:	232d      	movs	r3, #45	; 0x2d
 8003a24:	4276      	negs	r6, r6
 8003a26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a2a:	485a      	ldr	r0, [pc, #360]	; (8003b94 <_printf_i+0x23c>)
 8003a2c:	230a      	movs	r3, #10
 8003a2e:	e012      	b.n	8003a56 <_printf_i+0xfe>
 8003a30:	682b      	ldr	r3, [r5, #0]
 8003a32:	6820      	ldr	r0, [r4, #0]
 8003a34:	1d19      	adds	r1, r3, #4
 8003a36:	6029      	str	r1, [r5, #0]
 8003a38:	0605      	lsls	r5, r0, #24
 8003a3a:	d501      	bpl.n	8003a40 <_printf_i+0xe8>
 8003a3c:	681e      	ldr	r6, [r3, #0]
 8003a3e:	e002      	b.n	8003a46 <_printf_i+0xee>
 8003a40:	0641      	lsls	r1, r0, #25
 8003a42:	d5fb      	bpl.n	8003a3c <_printf_i+0xe4>
 8003a44:	881e      	ldrh	r6, [r3, #0]
 8003a46:	4853      	ldr	r0, [pc, #332]	; (8003b94 <_printf_i+0x23c>)
 8003a48:	2f6f      	cmp	r7, #111	; 0x6f
 8003a4a:	bf0c      	ite	eq
 8003a4c:	2308      	moveq	r3, #8
 8003a4e:	230a      	movne	r3, #10
 8003a50:	2100      	movs	r1, #0
 8003a52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a56:	6865      	ldr	r5, [r4, #4]
 8003a58:	60a5      	str	r5, [r4, #8]
 8003a5a:	2d00      	cmp	r5, #0
 8003a5c:	bfa2      	ittt	ge
 8003a5e:	6821      	ldrge	r1, [r4, #0]
 8003a60:	f021 0104 	bicge.w	r1, r1, #4
 8003a64:	6021      	strge	r1, [r4, #0]
 8003a66:	b90e      	cbnz	r6, 8003a6c <_printf_i+0x114>
 8003a68:	2d00      	cmp	r5, #0
 8003a6a:	d04b      	beq.n	8003b04 <_printf_i+0x1ac>
 8003a6c:	4615      	mov	r5, r2
 8003a6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a72:	fb03 6711 	mls	r7, r3, r1, r6
 8003a76:	5dc7      	ldrb	r7, [r0, r7]
 8003a78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a7c:	4637      	mov	r7, r6
 8003a7e:	42bb      	cmp	r3, r7
 8003a80:	460e      	mov	r6, r1
 8003a82:	d9f4      	bls.n	8003a6e <_printf_i+0x116>
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d10b      	bne.n	8003aa0 <_printf_i+0x148>
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	07de      	lsls	r6, r3, #31
 8003a8c:	d508      	bpl.n	8003aa0 <_printf_i+0x148>
 8003a8e:	6923      	ldr	r3, [r4, #16]
 8003a90:	6861      	ldr	r1, [r4, #4]
 8003a92:	4299      	cmp	r1, r3
 8003a94:	bfde      	ittt	le
 8003a96:	2330      	movle	r3, #48	; 0x30
 8003a98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003aa0:	1b52      	subs	r2, r2, r5
 8003aa2:	6122      	str	r2, [r4, #16]
 8003aa4:	f8cd a000 	str.w	sl, [sp]
 8003aa8:	464b      	mov	r3, r9
 8003aaa:	aa03      	add	r2, sp, #12
 8003aac:	4621      	mov	r1, r4
 8003aae:	4640      	mov	r0, r8
 8003ab0:	f7ff fee4 	bl	800387c <_printf_common>
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	d14a      	bne.n	8003b4e <_printf_i+0x1f6>
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8003abc:	b004      	add	sp, #16
 8003abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	f043 0320 	orr.w	r3, r3, #32
 8003ac8:	6023      	str	r3, [r4, #0]
 8003aca:	4833      	ldr	r0, [pc, #204]	; (8003b98 <_printf_i+0x240>)
 8003acc:	2778      	movs	r7, #120	; 0x78
 8003ace:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	6829      	ldr	r1, [r5, #0]
 8003ad6:	061f      	lsls	r7, r3, #24
 8003ad8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003adc:	d402      	bmi.n	8003ae4 <_printf_i+0x18c>
 8003ade:	065f      	lsls	r7, r3, #25
 8003ae0:	bf48      	it	mi
 8003ae2:	b2b6      	uxthmi	r6, r6
 8003ae4:	07df      	lsls	r7, r3, #31
 8003ae6:	bf48      	it	mi
 8003ae8:	f043 0320 	orrmi.w	r3, r3, #32
 8003aec:	6029      	str	r1, [r5, #0]
 8003aee:	bf48      	it	mi
 8003af0:	6023      	strmi	r3, [r4, #0]
 8003af2:	b91e      	cbnz	r6, 8003afc <_printf_i+0x1a4>
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	f023 0320 	bic.w	r3, r3, #32
 8003afa:	6023      	str	r3, [r4, #0]
 8003afc:	2310      	movs	r3, #16
 8003afe:	e7a7      	b.n	8003a50 <_printf_i+0xf8>
 8003b00:	4824      	ldr	r0, [pc, #144]	; (8003b94 <_printf_i+0x23c>)
 8003b02:	e7e4      	b.n	8003ace <_printf_i+0x176>
 8003b04:	4615      	mov	r5, r2
 8003b06:	e7bd      	b.n	8003a84 <_printf_i+0x12c>
 8003b08:	682b      	ldr	r3, [r5, #0]
 8003b0a:	6826      	ldr	r6, [r4, #0]
 8003b0c:	6961      	ldr	r1, [r4, #20]
 8003b0e:	1d18      	adds	r0, r3, #4
 8003b10:	6028      	str	r0, [r5, #0]
 8003b12:	0635      	lsls	r5, r6, #24
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	d501      	bpl.n	8003b1c <_printf_i+0x1c4>
 8003b18:	6019      	str	r1, [r3, #0]
 8003b1a:	e002      	b.n	8003b22 <_printf_i+0x1ca>
 8003b1c:	0670      	lsls	r0, r6, #25
 8003b1e:	d5fb      	bpl.n	8003b18 <_printf_i+0x1c0>
 8003b20:	8019      	strh	r1, [r3, #0]
 8003b22:	2300      	movs	r3, #0
 8003b24:	6123      	str	r3, [r4, #16]
 8003b26:	4615      	mov	r5, r2
 8003b28:	e7bc      	b.n	8003aa4 <_printf_i+0x14c>
 8003b2a:	682b      	ldr	r3, [r5, #0]
 8003b2c:	1d1a      	adds	r2, r3, #4
 8003b2e:	602a      	str	r2, [r5, #0]
 8003b30:	681d      	ldr	r5, [r3, #0]
 8003b32:	6862      	ldr	r2, [r4, #4]
 8003b34:	2100      	movs	r1, #0
 8003b36:	4628      	mov	r0, r5
 8003b38:	f7fc fb8a 	bl	8000250 <memchr>
 8003b3c:	b108      	cbz	r0, 8003b42 <_printf_i+0x1ea>
 8003b3e:	1b40      	subs	r0, r0, r5
 8003b40:	6060      	str	r0, [r4, #4]
 8003b42:	6863      	ldr	r3, [r4, #4]
 8003b44:	6123      	str	r3, [r4, #16]
 8003b46:	2300      	movs	r3, #0
 8003b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b4c:	e7aa      	b.n	8003aa4 <_printf_i+0x14c>
 8003b4e:	6923      	ldr	r3, [r4, #16]
 8003b50:	462a      	mov	r2, r5
 8003b52:	4649      	mov	r1, r9
 8003b54:	4640      	mov	r0, r8
 8003b56:	47d0      	blx	sl
 8003b58:	3001      	adds	r0, #1
 8003b5a:	d0ad      	beq.n	8003ab8 <_printf_i+0x160>
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	079b      	lsls	r3, r3, #30
 8003b60:	d413      	bmi.n	8003b8a <_printf_i+0x232>
 8003b62:	68e0      	ldr	r0, [r4, #12]
 8003b64:	9b03      	ldr	r3, [sp, #12]
 8003b66:	4298      	cmp	r0, r3
 8003b68:	bfb8      	it	lt
 8003b6a:	4618      	movlt	r0, r3
 8003b6c:	e7a6      	b.n	8003abc <_printf_i+0x164>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	4632      	mov	r2, r6
 8003b72:	4649      	mov	r1, r9
 8003b74:	4640      	mov	r0, r8
 8003b76:	47d0      	blx	sl
 8003b78:	3001      	adds	r0, #1
 8003b7a:	d09d      	beq.n	8003ab8 <_printf_i+0x160>
 8003b7c:	3501      	adds	r5, #1
 8003b7e:	68e3      	ldr	r3, [r4, #12]
 8003b80:	9903      	ldr	r1, [sp, #12]
 8003b82:	1a5b      	subs	r3, r3, r1
 8003b84:	42ab      	cmp	r3, r5
 8003b86:	dcf2      	bgt.n	8003b6e <_printf_i+0x216>
 8003b88:	e7eb      	b.n	8003b62 <_printf_i+0x20a>
 8003b8a:	2500      	movs	r5, #0
 8003b8c:	f104 0619 	add.w	r6, r4, #25
 8003b90:	e7f5      	b.n	8003b7e <_printf_i+0x226>
 8003b92:	bf00      	nop
 8003b94:	08003d41 	.word	0x08003d41
 8003b98:	08003d52 	.word	0x08003d52

08003b9c <memmove>:
 8003b9c:	4288      	cmp	r0, r1
 8003b9e:	b510      	push	{r4, lr}
 8003ba0:	eb01 0402 	add.w	r4, r1, r2
 8003ba4:	d902      	bls.n	8003bac <memmove+0x10>
 8003ba6:	4284      	cmp	r4, r0
 8003ba8:	4623      	mov	r3, r4
 8003baa:	d807      	bhi.n	8003bbc <memmove+0x20>
 8003bac:	1e43      	subs	r3, r0, #1
 8003bae:	42a1      	cmp	r1, r4
 8003bb0:	d008      	beq.n	8003bc4 <memmove+0x28>
 8003bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bba:	e7f8      	b.n	8003bae <memmove+0x12>
 8003bbc:	4402      	add	r2, r0
 8003bbe:	4601      	mov	r1, r0
 8003bc0:	428a      	cmp	r2, r1
 8003bc2:	d100      	bne.n	8003bc6 <memmove+0x2a>
 8003bc4:	bd10      	pop	{r4, pc}
 8003bc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bce:	e7f7      	b.n	8003bc0 <memmove+0x24>

08003bd0 <_sbrk_r>:
 8003bd0:	b538      	push	{r3, r4, r5, lr}
 8003bd2:	4d06      	ldr	r5, [pc, #24]	; (8003bec <_sbrk_r+0x1c>)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	4608      	mov	r0, r1
 8003bda:	602b      	str	r3, [r5, #0]
 8003bdc:	f7fc ffd6 	bl	8000b8c <_sbrk>
 8003be0:	1c43      	adds	r3, r0, #1
 8003be2:	d102      	bne.n	8003bea <_sbrk_r+0x1a>
 8003be4:	682b      	ldr	r3, [r5, #0]
 8003be6:	b103      	cbz	r3, 8003bea <_sbrk_r+0x1a>
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	bd38      	pop	{r3, r4, r5, pc}
 8003bec:	200004e8 	.word	0x200004e8

08003bf0 <memcpy>:
 8003bf0:	440a      	add	r2, r1
 8003bf2:	4291      	cmp	r1, r2
 8003bf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bf8:	d100      	bne.n	8003bfc <memcpy+0xc>
 8003bfa:	4770      	bx	lr
 8003bfc:	b510      	push	{r4, lr}
 8003bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c06:	4291      	cmp	r1, r2
 8003c08:	d1f9      	bne.n	8003bfe <memcpy+0xe>
 8003c0a:	bd10      	pop	{r4, pc}

08003c0c <_realloc_r>:
 8003c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c10:	4680      	mov	r8, r0
 8003c12:	4614      	mov	r4, r2
 8003c14:	460e      	mov	r6, r1
 8003c16:	b921      	cbnz	r1, 8003c22 <_realloc_r+0x16>
 8003c18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	f7ff bc49 	b.w	80034b4 <_malloc_r>
 8003c22:	b92a      	cbnz	r2, 8003c30 <_realloc_r+0x24>
 8003c24:	f7ff fbda 	bl	80033dc <_free_r>
 8003c28:	4625      	mov	r5, r4
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c30:	f000 f81b 	bl	8003c6a <_malloc_usable_size_r>
 8003c34:	4284      	cmp	r4, r0
 8003c36:	4607      	mov	r7, r0
 8003c38:	d802      	bhi.n	8003c40 <_realloc_r+0x34>
 8003c3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c3e:	d812      	bhi.n	8003c66 <_realloc_r+0x5a>
 8003c40:	4621      	mov	r1, r4
 8003c42:	4640      	mov	r0, r8
 8003c44:	f7ff fc36 	bl	80034b4 <_malloc_r>
 8003c48:	4605      	mov	r5, r0
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d0ed      	beq.n	8003c2a <_realloc_r+0x1e>
 8003c4e:	42bc      	cmp	r4, r7
 8003c50:	4622      	mov	r2, r4
 8003c52:	4631      	mov	r1, r6
 8003c54:	bf28      	it	cs
 8003c56:	463a      	movcs	r2, r7
 8003c58:	f7ff ffca 	bl	8003bf0 <memcpy>
 8003c5c:	4631      	mov	r1, r6
 8003c5e:	4640      	mov	r0, r8
 8003c60:	f7ff fbbc 	bl	80033dc <_free_r>
 8003c64:	e7e1      	b.n	8003c2a <_realloc_r+0x1e>
 8003c66:	4635      	mov	r5, r6
 8003c68:	e7df      	b.n	8003c2a <_realloc_r+0x1e>

08003c6a <_malloc_usable_size_r>:
 8003c6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c6e:	1f18      	subs	r0, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bfbc      	itt	lt
 8003c74:	580b      	ldrlt	r3, [r1, r0]
 8003c76:	18c0      	addlt	r0, r0, r3
 8003c78:	4770      	bx	lr
	...

08003c7c <_init>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	bf00      	nop
 8003c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c82:	bc08      	pop	{r3}
 8003c84:	469e      	mov	lr, r3
 8003c86:	4770      	bx	lr

08003c88 <_fini>:
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	bf00      	nop
 8003c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8e:	bc08      	pop	{r3}
 8003c90:	469e      	mov	lr, r3
 8003c92:	4770      	bx	lr
